// Archivo DLL principal.
int main0(int pars);
# define _SECURE_SCL 0
// Archivo DLL principal.
#include <math.h>
#include <windows.h>
#include <fstream>
#include <stdio.h>
#include <cstdlib>
#include <iostream>
//Librerias auxiliares
#include "..\\..\\mmf.h"
#include "Functions.h"

//Fin de Librerias Auxiliares

using namespace std;



// funciones de inicializacion de memoria y acceso a memoria compartida


//----------Definiciones de Control de errores----------------
FARPROC lpfnGetADD ;
FARPROC lpfnGetADD2 ;
FARPROC lpfnGetADD3 ;
typedef  void (__stdcall * pICDLLFUNC00)();//(char *); 
   pICDLLFUNC00 TRACE; 
typedef  void (__stdcall * pICDLLFUNC01)(EXCEPTION_POINTERS* pExp, DWORD dwExpCode);//(char *); 
   pICDLLFUNC01 TRACE2; 
typedef  void (__stdcall * pICDLLFUNC02)(char ID[]);//(char *); 
   pICDLLFUNC02 MYID; 



__declspec(dllexport) void __cdecl load(int instance) 
{ 
initmmf("APP 03",instance);

//carga el debugger

HINSTANCE hGetProcIDDLL2 = LoadLibrary(L"kernel.dll"); 
if (!hGetProcIDDLL2  ){
	cout<<"No se encontro el dll solicitado: kernel.dll";
}
lpfnGetADD = GetProcAddress(HMODULE (hGetProcIDDLL2),"?CALLSTACK@@YAHXZ");    
TRACE = pICDLLFUNC00(lpfnGetADD) ;
lpfnGetADD2 = GetProcAddress(HMODULE (hGetProcIDDLL2),"?ExpFilter@@YGJPAU_EXCEPTION_POINTERS@@K@Z");    
TRACE2 = pICDLLFUNC01(lpfnGetADD2) ;
lpfnGetADD3 = GetProcAddress(HMODULE (hGetProcIDDLL2),"?NAME@@YAHQAD@Z");    
MYID = pICDLLFUNC02(lpfnGetADD3) ;
MYID("LOADED ON SITE DEBUGGER IN APP_03 ");
cout<<"\n******************************\nCargando On Site Debugger ...";


}





//----------Fin Funciones Virtuales (Permiten debugger)-------
#pragma unmanaged

//----------**************STACK TRACE**************-----------
   LONG WINAPI ExpFilterO(EXCEPTION_POINTERS* pExp, DWORD dwExpCode)
{
	cout<<"Aplicacion Interrumpida - On Site Debugger en Diagnostico";
	TRACE2(pExp, dwExpCode);
	return EXCEPTION_EXECUTE_HANDLER;
}
//-------**************Entrada de Main**************----------
__declspec(dllexport) int __cdecl execute(int pars) 

{
__try
{
	
///////////////////////////////////////////////FIN Funiones de Genericas De Control //////////////////////
	int su;
	su=main0(pars);          ////cambiar por la funcion main local
	return su;
///////////////////////////////////////////////Funiones de control de errores//////////////////////
}
__except(ExpFilterO(GetExceptionInformation(), GetExceptionCode()))
{
	
	system("pause");
	return -1;
}
}


//----------FIN DE FUNCIONES DE DEBUGGER----------------------

//Aquí se declaran todas las variables del programa

double Time_cycle;
double Time_factor;
double Print_iter;
int Counter;

///////////////////////////ALARMAS_VIBRACIÓN////////////////////////////////////////

int NEVADA_COMM_BR_V_10_6;
int DATA_IO_LCR_BR_V_1595;
int NEVADA_COMM_BR_V_1_1;
int NEVADA_COMM_BR_V_10_1;
int FALSE_NEVADA_SYSMAL_OR;
int ALARM_ALM_LAT_IN_163;
int NEVADA_SYS_ALM;
int NEVADA_COMM_BR_V_1_9;
int ALARM_ALM_LAT_IN_164;
int NEVADA_COMM_BR_V_1_15;
int ALARM_ALM_LAT_IN_165;
int NEVADA_COMM_BR_V_1_21;
int ALARM_ALM_LAT_IN_166;
int NEVADA_COMM_BR_V_3_1;
int ALARM_ALM_LAT_IN_167;
int NEVADA_COMM_BR_V_3_9;
int ALARM_ALM_LAT_IN_168;
int NEVADA_COMM_BR_V_3_17;
int ALARM_ALM_LAT_IN_169;
int NEVADA_COMM_BR_V_3_25;
int ALARM_ALM_LAT_IN_170;
int NEVADA_CH_FAIL_AL_IN;
int SHUTDOWN_DM_IN_1;
int out_SHUTDOWN_DM_IN_1[5];
double TP_SHUTDOWN_DM_IN_1=6;//CHECAR LOS TIEMPOS
int NEVADA_COMM_BR_V_1_27;
int ALARM_ALM_LAT_IN_172;
int CORE_ANALOG_N2ROTOR;
int NEVADA_XNSDENBL;
int NEVADA_NEWOLD_1_NO;
int CORE_ANALOG_N25SEL;
int NEVADA_XN25ENBL;
int NEVADA_NEWOLD_2_NO;
int TRUE_NEVADA_KP_NEW_OLD;
int NEVADA_KEYMASK1_IN_2;
int NEVADA_KEYMASK2_IN_2;
int NEVADA_COMM_BR_V_4_1;
int ALARM_ALM_LAT_IN_173;
int NEVADA_COMM_BR_V_4_9;
int ALARM_ALM_LAT_IN_174;
int TRUE_NEVADA_NEWOLD_1;
int TRUE_NEVADA_NEWOLD_2;
//VARIABLES SHEET 187
int NEVADA_COMM_V_1_33;
int ALARM_ALM_LAT_IN_175;
int NEVADA_COMM_V_5_1;
int ALARM_ALM_LAT_IN_176;
int NEVADA_COMM_V_5_9;
int ALARM_ALM_LAT_IN_177;
int NEVADA_COMM_V_1_17;
int ALARM_ALM_LAT_IN_178;
int NEVADA_COMM_V_5_25;
int ALARM_ALM_LAT_IN_179;
int NEVADA_COMM_V_1_63;
int ALARM_ALM_LAT_IN_180;
int NEVADA_COMM_V_9_1;
int ALARM_ALM_LAT_IN_181;
int NEVADA_COMM_V_9_9;
int ALARM_ALM_LAT_IN_182;
int NEVADA_COMM_V_9_17;
int FALSE_NEVADA_CD42FL3MSK;
int ALARM_ALM_LAT_IN_183;
int NEVADA_COMM_V_9_25;
int FALSE_NEVADA_CD42FL4MSK;
int ALARM_ALM_LAT_IN_184;
int NEVADA_COMM_BR_V_1_45;
int ALARM_ALM_LAT_IN_185;
int SHUTDOWN_DM_GEN_IN_13;
int out_SHUTDOWN_DM_GEN_IN_13[5];
double TP_SHUTDOWN_DM_GEN_IN_13=6;//VERIFICAR TIEMPO
int NEVADA_COMM_BR_V_1_49;
int ALARM_ALM_LAT_IN_186;
float BENTLY_N2LT3000;
int BENTLY_CRF_LO_VAL_IN_1;
float BENTLY_N2GT3590;
int BENTLY_CRF_LO_VAL_IN_2;
float BENTLY_N2LT3590;
int BENTLY_CRF_HI_VAL_IN_2;
float BENTLY_N2GT3000;
int BENTLY_CRF_HI_VAL_IN_3;
float CORE_ANALOG_N25MAX;
int BENTLY_M25MXVSN25_GT;
int BENTLY_M25MXVSN25_EQ;
int BENTLY_M25MXVSN25_LT;
int OUT_BENTLY_CRF_LO_VAL;
int B_FORCE_SAR_82_IN;

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////ARRANQUE HIRÁULICO///////////////////////////////////

int FALSE_CLUTCH_Y;//IF CLUTCH TUNE TRUE
int CORE_DIGITAL_FUELON;
int SFC_STEP_RST_AND_ST;//SHUTDOWN RESTART
int OUT_RESTRTMASK;
int SFC_STEP_AUXFAN_DLY;//UNIT RUNNING 
int OUT_CLRPMPOR;
int SPEED_SW_COASTDOWN;//ZERO SPEED INPUT 
int HYD_STRT_NOT_PMPON;
int OUT_CLUTCHOFF;
int FALSE_SEL_OFF;//SELECT SYSTEM OFF
int OUT_MASK_ON;
int LATCH_DE1364LAT;
int ALARM_RESET;
int HYD_STRT_LSLL1601SD;
int FALSE_PROB_LAT;
int LATCH1_PROB_LAT;
int OUT_PMP_OFF;
int HYD_STRT_DE1364A;//SALIDA HYDR STAR CLUTCH LUBE/COOLER PUMP-START-STOP SALIDA A PLC
int HYD_STRT_TRIPPED;
int SFC_STEP_CRNKTMRDN;//COOLDOWN CRANK TIMER DONE
int SPEED_SW_N25GT4600;
int SHUTDOWN_FOURHRLOK;//FOUR HOUR LOCK OUT
int SHUTDOWN_SDN_CORE;//SHUTDOWN NO MOTOR INPUT (ESN)
int SFC_STEP_CRANKSTOP;//CRANK ABORT 
int SFC_STEP_ES_1;//STOP MOTOR BEFORE MOTOR 
int SFC_STEP_WWCRANK_11;
int OUT_KILL_PUMP;
int HYD_STRT_CNK_SEQPRM;//SALIDA (INTLK) STOP ANY CRANK STARTER NOT READY 
int LATCH_STRT_LATCH;
int TRUE_MASK_PMP;
int OUT_MASK_PMP;
int OUT_OUT_AND_STRT_MASK_PMP[5];
double TP_out_AND_STRT_MASK_PMP=10;
int Nout_AND_STRT_MASK_PMP;
int Nout_out_AND_STRT_MASK_PMP;
int out_SFC_STEP_AUXFAN_DLY[5];
double TP_SFC_STEP_AUXFAN_DLY=10;
int HYD_STRT_DLY_SD;
int out_HYD_STRT_DLY_SD[5];
double TP_HYD_STRT_DLY_SD=10;
int HYD_STRT_MOT1615;
int out_HYD_STRT_MOT1615[5];//"HYDRAULIC STARTER PUMP" SALIDA A PLC
double TP_HYD_STRT_MOT1615=12;
int CORE_DIGITAL_RESET;
int HYD_STRT_PSLL1605SD;
int HYD_STRT_PDSH1600SD;
int LATCH1_TRIPPED;
int HYD_STRT_NOTSTART;
int OUT_ST_A_OFFOR;
int SFC_STEP_STRTR_SPD;
double NC_OFFSPDSEL;
double NO_OFFSPDSEL;
double OUT_OFFSPDSEL;
int SFC_STEP_LO_SPD_OR;
int HYD_STRT_PUMPONDLY;
int OUT_MASK_1;
int SFC_STEP_HI_SPD_OR;
int OUT_MASK_2;
int FUEL_SYS_GAS100;
double NC_CSTSPD_SW;
double NO_CSTSPD_SW;
double OUT_CSTSPD_SW;
int SFC_STEP_HIEST_SEL;
int OUT_MASK_3;
double CORE_ANALOG_N25SEL;
int TRUE_LIQ_GAS_2;
double NO_LIQ_GAS_2;
double NC_LIQ_GAS_2;
double OUT_LIQ_GAS_2;
int OUT_N25COMP1;
int OUT_N25COMP2;
int HYD_STRT_MOV_UP_Z;
int LT_N25COMP1;
int GT_N25COMP1;
int LT_N25COMP2;
int GT_N25COMP2;
int OUT_RATE_SEL1;
int OUT_RATE_SEL2;
int OUT_RATE_SEL3;
int HYD_STRT_MASK1;
int HYD_STRT_MASK3;
int OUT_FAIL_OR;
int SPEED_SW_N25LT1200;
int SPEED_SW_N25LT1700;
int OUT_FLSPD_SW;
int HYD_STRT_STRT_LATCH;
int A1_A04_MPU_N25_MAX;
int OUT_N25LT200;
int FALSE_N25LO_MASK;
int OUT_N25LO_MASK;
int OUT_N25LT_DEL;
int SHUTDOWN_SD_RESET;
int OUT_FAILTOACC;
int FL_DEL_TMR;//
int out_FL_DEL_TMR[5];
double TP_FL_DEL_TMR=20;
int CRANK_TMR;
int out_CRANK_TMR[5];
double TP_CRANK_TMR=30;
int HYD_STRT_STRT_FAIL1;//N25 LT 1200 20 SEC
int N1N34_BI_LSLL1601;//"START SKID HYD RESERVOIR OIL LEVEL LO" ENTRADA PLC Y SALIDA
int N3N41_BI_HYD_ST_AUX;//"START SKID MOTOR STARTER AUX CONTACT" ENTRADA PLC
int N1N34_BI_TSH1602;//"START SKID HYD RESERVOIR OIL TEMP HI" ENTRADA PLC mayor 180°f
int N1N34_BI_TSH1603;//"START SKID HYD RESERVOIR OIL TEMP LO" ENTRADA PLC
int N1N34_BI_PDSHH1600;//"START SKID HYD PUMP VACUUM DELTA P HI" ENTRADA PLC
int N1N34_BI_PSLL1605;//"START SKID HYUD PUMP PRESSURE LO" ENTRADA PLC
int SFC_STEP_START_INIT;
int SFC_STEP_CRANKING;
int HYD_STRT_LSLL1601AL;//START SKID HYD RESERVOIR OIL LEVEL LO
int HYD_STRT_AUXCNTFLT;//START SKID MOTOR STARTER AUX CONTACT ALM
int HYD_STRT_AUXCONTDLY;
int out_HYD_STRT_AUXCONTDLY[5];
double TP_HYD_STRT_AUXCONTDLY=5;
int HYD_STRT_PDSHH1600D;
int out_HYD_STRT_PDSHH1600D[5];
double TP_HYD_STRT_PDSHH1600D=5;
int HYD_STRT_MOT1615DLY;
int out_HYD_STRT_MOT1615DLY[5];
double TP_HYD_STRT_MOT1615DLY=13;
int HYD_STRT_STRTORCRNK;

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////DISPARO_ALARMAS//////////////////////////////////////

int FALSE_SPRINT_PDSH62233;
int SPRINT_MOT62226;
int NFALSE_SPRINT_PDSH62233;
int SPRINT_PMPDLYON;
int out_SPRINT_PMPDLYON[5];
double TP_SPRINT_PMPDLYON=5;
int SPRINT_ALARM_IN_1;
int FALSE_SPRINT_PSL62227;
int SPRINT_PSL62227_AND;
int SPRINT_ALARM_IN_2;
int FALSE_SPRINT_PT62234VST;
int SPRINT_IO_FLT_ALM_IN_9;
int FALSE_SPRINT_PT62270VST;
int SPRINT_IO_FLT_ALM_IN_8;
int FALSE_SPRINT_PT62250VST;
int SPRINT_IO_FLT_ALM_IN_7;
int FALSE_SPRINT_PT62269VST;
int SPRINT_IO_FLT_ALM_IN_6;
int FALSE_SPRINT_PT62243VST;
int SPRINT_IO_FLT_ALM_IN_5;
int FALSE_SPRINT_PT62235VST;
int SPRINT_IO_FLT_ALM_IN_4;
int FALSE_SPRINT_PT62241VST;
int SPRINT_IO_FLT_ALM_IN_3;
int FALSE_SPRINT_PT62239VST;
int SPRINT_IO_FLT_ALM_IN_2;
int FALSE_SPRINT_PT62231VST;
int SPRINT_IO_FLT_ALM_IN_1;
int SPRINT_LP_ON_3;
int SPRINT_HP_ON_3;
int SPRINT_FTENA_MASK_IN_1;
int TRUE_SPRINT_FTENA_MASK;
int SPRINT_FT62231CMP; 
int SPRINT_FT62270CMP;
int SPRINTDLY62270AL;
int out_SPRINTDLY62270AL[5];
double TP_SPRINTDLY62270AL=5;
int SPRINTDLY62270SD;
int out_SPRINTDLY62270SD[5];
double TP_SPRINTDLY62270SD=10;
int SPRINTDLY6231ALM;
int out_SPRINTDLY6231ALM[5];
double TP_SPRINTDLY6231ALM=5;
int SPRINTDLY6231SD;
int out_SPRINTDLY6231SD[5];
double TP_SPRINTDLY6231SD=10;
int SPRINT_FT62234LOG;
int SPRINT_FLOW_DLY1;
int out_SPRINT_FLOW_DLY1[5];
double TP_SPRINT_FLOW_DLY1=5;
int SPRINT_FLOW_DLY2;
int out_SPRINT_FLOW_DLY2[5];
double TP_SPRINT_FLOW_DLY2=5;

////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////DISPAROS////////////////////////////////////////////

int SPRINT_HP_ON_1;
int SPRINT_HP_ON_2;
int SPRINT_OFF_1_SF_SEL_2;
int SPRINT_HP_OFF_2;
int OUT_EVACUATE_LP_SPRINT_MANIFOLD;
int EVACUATE_LP_SPRINT_MANIFOLD;
int CAGATE;
int SPRINT_SEL_SPRINT;
int SPRINT_SEL_SPRAY;
int SPRINT_EVAC_SW1;
int OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE;
int WAIT_FOR_XFER_DONE_BEFORE_PURGE;
int SPRINT_GAS_OR_LIQ;
int OUT_PURGE_LP_SPRINT_MANIFOLD;
int PURGE_LP_SPRINT_MANIFOLD;
int SPRINT_LP_OFF_5;
int SPRINT_LP_PRG_TMR;
int PURGE_FROM_SUPPLY_TO_THE_DRAINS;
int OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS;
int SPRINT_DN_PRG_TMR;
int PURGE_HP_SPRINT_MANIFOLD;
int OUT_PURGE_HP_SPRINT_MANIFOLD;
int SPRINT_HP_PRG_TMR;
int FALSE_SPRINT_TRAN_4_OR;
int SPRINT_OFF_4_T_COND_3;
int SPRINT_SPRT_READY;
int OUT_SPRINT_SYSTEM_NOT_READY;
int SPRINT_SYSTEM_NOT_READY;
int FALSE_SPRINT_NOTOFF;
int NFALSE_SPRINT_NOTOFF;
int SPRINT_HP_2_LP_1;
int SPRINT_HP_2_LP_2;
int SPRINT_HP_2_LP_3;
int SPRINT_LP_ON_1;
int SPRINT_LP_ON_2;
int SPRINT_LP_ON_3;
int SPRINT_LP_OFF_1_SF_SEL_1;
int OUT_HOLD_FOR_SPRAY_RAMP_DOWN;
int HOLD_FOR_SPRAY_RAMP_DOWN;
int SPRINT_RAMP_DOWN;
int OUT_HOLD_PRIOR_TO_LP_EVACUATION;
int HOLD_PRIOR_TO_LP_EVACUATION;
int SPRINT_DLY_LPEHLD;
int WAIT_FOR_FUEL_XFER;
int OUT_WAIT_FOR_FUEL_XFER;
int TRUE_WAIT_FOR_FUEL_XFER;
int FUEL_SYS_GAS100;
int CORE_DIGITAL_FUELOFF;
int SPRINT_LP_XFR_WT_T_COND_1;
int OUT_HOLD_PRIOR_TO_LP_PURGE;
int HOLD_PRIOR_TO_LP_PURGE;
int SPRINT_DLY_LPPHLD;
int SPRINT_LP_2_HP_1;
int SPRINT_LP_2_HP_2;
int SPRINT_LP_2_HP_3;
int SPRINT_LP_2_HP_4;
int SPRINT_LP_2_HP_5;
int SPRINT_HP_ON_3;
int SPRINT_HP_OFF_1_SF_SEL_1;
int HOLD_FOR_SPRINT_RAMP_DOWN;
int OUT_HOLD_FOR_SPRINT_RAMP_DOWN;
int DRAIN_HP_SPRINT_PATH;
int OUT_DRAIN_HP_SPRINT_PATH;
int SPRINT_DRAINHP_TM;
int FALSE_SPRINT_NOT_RUNNIN;
int NFALSE_SPRINT_NOT_RUNNIN;
int SPRINT_OFF_4;
int SPRINT_JIMMY_SW2_NO;
int SPRINT_LP_OFF_3;
int SPRINT_OFF_1;
int SPRINT_OFF_2;
int SPRINT_OFF_3;
int SPRINT_MASK_PURGE;
int SPRINT_NOTREADY;
int SPRINT_SPRINT_OUT;
int SPRINT_LP_XFR_WT;
int SPRINT_OFF_WT_XFR;
int OUT_SPRINT_OK_TO_XFR;

////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////ALARMAS/////////////////////////////////////////////

int N1N10_RTD_TE64030_LATCH_OR;
float N1N10_RTD_TE64030_AI_RTD_L;
float OUT_A_SW_VENT_TE64030LOG_A_IN_1;
int N1N10_RTD_TE64031_LATCH_OR;
float N1N10_RTD_TE64031_AI_RTD_L; 
float OUT_A_SW_VENT_TE64031LOG_A_IN_1;
int N1N10_RTD_TE64032_LATCH_OR;
float N1N10_RTD_TE64032_AI_RTD_L; 
float OUT_A_SW_VENT_TE64032LOG_A_IN_1;
int N1N10_RTD_TE64033_LATCH_OR;
float N1N10_RTD_TE64033_AI_RTD_L;
float OUT_A_SW_VENT_TE64033LOG_A_IN_1;
int N1N10_RTD_TE6450_LATCH_OR;
float N1N10_RTD_TE6450_AI_RTD_L; 
float OUT_A_SW_VENT_TE6450LOG_A_IN_1;
int N1N10_RTD_TE6499_LATCH_OR;
float N1N10_RTD_TE6499_AI_RTD_L;
float OUT_A_SW_VENT_TE6499LOG_A_IN_1;
double OUT_SUB_VENT_AIRTMP_DF_IN=0.0;
float OUT_ABS_VENT_AIRTMPCMPR_IN_1;
int OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2;
int FALSE_VENT_AIRTMPDIFM;
int OUT_AND_VENT_AIRDIFFALM_IN; 
int CORE_DIGITAL_PWR_UP;
int ALARM_RESET;
float VENT_TE64030;
int IO_FLT_TE64030VST;
float VENT_TE64031;
int IO_FLT_TE64031VST;
float VENT_TE64032;
int IO_FLT_TE64032VST;
float VENT_TE64033;
int IO_FLT_TE64033VST;
float VENT_AIRFILTAVG_TC_MON; 
float VENT_AIRAVERAGE_IN; 
float VENT_AIR_AVG_C_IN; 
int OUT_A_CMPR_VENT_T0_GT_10;
int OUT_A_CMPR_VENT_T0_LT_32_IN;
double DIVISOR;
double CONTADOR;
float OUT_A_SW_VENT_INLETT2LSS_IN_1;
float OUT_A_SW_VENT_INLETT2LSS_IN_2;
float OUT_A_SW_VENT_INLETT2LSS_IN_3;
float OUT_A_SW_VENT_INLETT2LSS_IN_4;
float CORE_ANALOG_T2SEL; 
float OUT_LSS_BUS_VENT_INLETT2LSS;
int OUT_A_CMPR_VENT_ICEALM_SW_NO;
int OUT_A_CMPR_VENT_INLET_LT43_IN;
int GENERATOR_GEN_BKRCLS;
int VENT_ANTI_ICE;
int OUT_AND_VENT_ICE_DLY_TRIGGER;
int OUT_A_CMPR_VENT_MOT68330OR_IN_1;
int OUT_OR_VENT_MOT68330_IN;
int DLY_VENT_DAMPER_SW_CTRL;
int out_DLY_VENT_DAMPER_SW_CTRL[5];
double TP_DLY_VENT_DAMPER_SW_CTRL=5;
float OUT_A_SW_VENT_DMPR_RATE_IN;
float VENT_DAMPER_SW_NO;
float VENT_ZV64181_IN;
float OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2;
float VENT_T2SEL;
float OUT_SUB_VENT_T2_T0_CMP_IN_2;
int VENT_ICEALM_MSK_IN_3;
int out_DLY_VENT_ICEALM_MSK_IN_3[5];
double TP_VENT_ICEALM_MSK_IN_3=5;
int OUT_A_CMPR_VENT_ICEALM_MSK_IN_1;
int OUT_AND_VENT_ICESYS_ALM_IN;
float OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1;
float OUT_LSS_BUS_VENT_CONDAIR_SW_NO;
int FALSE_VENT_CONDAIR_SW;
float OUT_A_SW_VENT_ICINGLOG_A_IN_2;
int TRUE_VENT_ICEALM_SW;
int OUT_B_SW_VENT_ICING_IN;
int VENT_ICEALM_SW_NC;      
int ice1;
int ice2;
float LimXI;
float LimXS;
float LimYI;
float LimYS;
int VENT_G_FNA_TMR; 
int VENT_G_FNB_TMR; 
int VENT_T_FNA_TMR; 
int VENT_T_FNB_TMR;
int VENT_ENCLPRG; 
int VENT_PRGFLDLY;
int VENT_PSTCLDNTMR;
int SHUTDOWN_COOLAIRTMR;
int SFC_STEP_SYNC_COOL;
int VENT_G_POSTDLY;
float VENT_G_FAN_ATM_IN;
float VENT_G_FAN_BTM_IN;
float VENT_T_FAN_ATM_IN;
float VENT_T_FAN_BTM_IN;
float VENT_ENCL_PRGTM_IN;
float VENT_PRGFLTMR_IN;
float VENT_PSTVNET_T_IN;
float VENT_PSTCLDN_T_IN;
float SFC_TIMER_SYNCCL_T_IN;
float VENT_PSTVNET_G_IN;
int OUT_I_CMPR_VENT_PSTCLDNON_IN;
float VENT_TE6421LAG;
int N2N5_RTD_TE6421;
float VENT_TE6422LAG;
int N2N5_RTD_TE6422;
float VENT_TE6423LAG;
int N2N5_RTD_TE6423;
float VENT_TE6424LAG;
int N2N5_RTD_TE6424;
float VENT_TE6425LAG;
int N2N5_RTD_TE6425;
float VENT_TE6426LAG;
int N2N5_RTD_TE6426;
float OUT_TC_MON_VENT_STATOR_TMP;
int OUT_A_CMPR_VENT_GFANS_OFF_IN_1;
int OUT_A_CMPR_VENT_GFANS_OFF_IN_2;
int OUT_A_CMPR_VENT_STATORGT14;       
int DLY_AUX_SKID_MASKFANON1;
int out_DLY_AUX_SKID_MASKFANON1[5];
double TP_DLY_AUX_SKID_MASKFANON1=5;
int AUX_SKID_TE64028LOG_B_OUT_1;
int OUT_AND_AUX_SKID_MOT64026_IN;
int AUX_SKID_TE64028LOG_B_OUT_2;
int OUT_AND_AUX_SKID_MOT64027_IN;
int AUX_SKID_TE64028LOG_B_OUT_3;
int OUT_OR_AUX_SKID_DLY_OFF_TRIGGER;
int DLY_AUX_SKID_SOV64083_IN;
int out_DLY_AUX_SKID_SOV64083_IN[5];
double TP_DLY_AUX_SKID_SOV64083_IN=60;
int FALSE_AUX_SKID_TE64028VST;
int NFALSE_AUX_SKID_TE64028VST;      
int FALSE_GENERATOR_UTIL_SW;
int TRUE_GENERATOR_UTIL_SW; 
int GENERATOR_UTIL_BKRCL; 
int OUT_GENERATOR_UTIL_SW_B_SW;
int OUT_GENERATOR_PSS_ONENBL_AND;
int N3N42_BI_UTIL_CLSD;
int FALSE_GENERATOR_GSO21_OPIN;
int OUT_GENERATOR_UTILITY_AND;
int A1_A12_BI2_K229;
int FALSE_GENERATOR_CMD_ISOC;
int FALSE_GENERATOR_STP_SYNCIN;
int OUT_GENERATOR_DROOP_AND;
int FALSE_GENERATOR_SEL_DROOP;
int A1_A12_BI1_K67; 
int OUT_GENERATOR_SEL_DROOP_B_SW;
int GENERATOR_DROOP;
int OUT_GENERATOR_NSDROOP_AND; 
int SHUTDOWN_CDLO;
int GENERATOR_ISOCH;
int OUT_GENERATOR_NSISOCH_AND; 
int A1_A12_BI1_BRKR_FAIL; 
int NA1_A12_BI1_BRKR_FAIL; 
int N3N39_BI_RTRGRNDFLT; 
int SPEED_SW_NSDGT3590;
int OUT_GENERATOR_RTRGNDMSK_AND; 
int N3N39_BI_DIODE_FAIL; 
int NN3N39_BI_DIODE_FAIL; 
int N3N39_BI_AVR_FAULT; 
int NN3N39_BI_AVR_FAULT; 
int N3N40_BI_CUST_86T; 
int NN3N40_BI_CUST_86T; 
int N3N42_BI_IGPS52GTRP_BI_L;
int NN3N42_BI_IGPS52GTRP_BI_L;
int N3N42_BI_IGPSFLTALM_BI_L;
int NN3N42_BI_IGPSFLTALM_BI_L;
int TRUE_GENERATOR_IGPSFDLT12;
int TRUE_GENERATOR_IGPSFDLT12_NO;
int N3N42_BI_IGPSFAIL_BI_L;
int OUT_B_SW_GENERATOR_N_IGPSFAIL_IN;
int NOUT_B_SW_GENERATOR_N_IGPSFAIL_IN;
int N3N39_BI_GEN_EX_LIM_BI_L;
int OUT_AND_GENERATOR_GEN_EX_LIM_IN;
int N3N42_BI_GEN_86TRPL_BI_L;
int NN3N42_BI_GEN_86TRPL_BI_L;
int A1_A12_BI1_TRIP_86_BIO_BI;
int NA1_A12_BI1_TRIP_86_BIO_BI;
int N3N39_BI_AVR_SUMALM_BI_L_NOT;
int SPEED_SW_NSDGT3240;
int OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER;
int DLY_GENERATOR_AVR_ALARM_IN;
int out_DLY_GENERATOR_AVR_ALARM_IN[5];
double TP_DLY_GENERATOR_AVR_ALARM_IN=5;
int SFC_STEP_RST_AND_ST;
int OUT_OR_GENERATOR_AVR_NOT_ON;
int OUT_OR_GENERATOR_AVR_SDOFF_RST;
int LATCH_GENERATOR_RESET85PCT_IN_3[5];
int out_LATCH_GENERATOR_RESET85PCT_IN_3[5];
int SHUTDOWN_ANY_SD;
int SPEED_SW_NSDLT3060;
int GENERATOR_GEN_BKROPN;
int OUT_AND_GENERATOR_AVR_OFF_IN_1;
int OUT_AND_GENERATOR_AVR_OFF_IN_2;
int SHUTDOWN_SD_CORE;
int SHUTDOWN_SDN_CORE;
int OUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK;
int LATCH_R_GENERATOR_COND_OR85_IN_1[5];
int out_LATCH_R_GENERATOR_COND_OR85_IN_1[5];
int GENERATOR_AVR_ON_RST;
int GENERATOR_CONDENSING;
int OUT_OR_GENERATOR_EXCTR_ON_IN;
int out_LATCH1_GENERATOR_EAX_ALM_IN; 
int DLY_GENERATOR_MASK_2_IN_1;
int out_DLY_GENERATOR_MASK_2_IN_1[5];
double TP_DLY_GENERATOR_MASK_2_IN_1=5;
int GENERATOR_EXCTR_ON;
int N3N39_BI_EXCIT_ALM_BI_L;
int OUT_AND_GENERATOR_EXCIT_ALM_IN;
float N3N18_AI_EAX_AI_420_L;
int OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2;
int OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER;
int DLY_GENERATOR_EAXALMLAT_IN_1;
int out_DLY_GENERATOR_EAXALMLAT_IN_1[5];
double TP_DLY_GENERATOR_EAXALMLAT_IN_1=2;
int CORE_DIGITAL_FUELOFF;
int SHUTDOWN_STEPIDLE;
int GENERATOR_GEN86TRIPL;
int GENERATOR_GEN86TRIPR;
int SHUTDOWN_DMINTONS;
int SFC_STEP_NORM_3_SFC_STEP;
int ALARM_HMI_STI;
int GENERATOR_STP_2_SYNC;
int SPEED_SW_NSDLT3420; 
int OUT_OR_GENERATOR_BKR_OK_RST;
int SHUTDOWN_NO_SHTDNS;
int OUT_AND_GENERATOR_BKR_OK_TRIGGER;
int LATCH_GENERATOR_K85_IN[5];
int out_LATCH_GENERATOR_K85_IN[5];
int N3N42_BI_AUTO_SYNC_BI_L;
int SFC_TIMER_WARMUP_DN;
int SFC_STEP_READY2SYNC_SFC_STEP;
int OUT_AND_GENERATOR_SYNC_ENABL_IN;
int GENERATOR_EXCIT_ALM;
int GENERATOR_GEN_EX_LIM;
int GENERATOR_DIODE_FAIL;
int GENERATOR_AVR_ALARM;
int GENERATOR_AVR_FAULT;     
int OUT_OR_GENERATOR_EX_SUMMARY_IN;
int TRUE_GENERATOR_NOTLSH6834;
int NTRUE_GENERATOR_NOTLSH6834;
float GENERATOR_TE6432=0.0;
int OUT_A_CMPR_GENERATOR_TE6432_H_IN;
float GENERATOR_TE6433=0.0;  
int OUT_A_CMPR_GENERATOR_TE6433_H_IN;      
int IFACE_SPRINT_C_H2ORAISE;
float OUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN;
int SPRINT_LP_ON_3_SFC_STEP;
int SPRINT_HP_2_LP_1_SFC_STEP;
int SPRINT_HP_2_LP_2_SFC_STEP;
int SPRINT_HP_2_LP_3_SFC_STEP;
int SPRINT_LP_OFF_1_SFC_STEP;
int SPRINT_HP_ON_3_SFC_STEP;
int SPRINT_LP_2_HP_1_SFC_STEP;
int SPRINT_LP_2_HP_2_SFC_STEP;
int SPRINT_LP_2_HP_3_SFC_STEP;
int SPRINT_LP_2_HP_4_SFC_STEP;
int SPRINT_LP_2_HP_5_SFC_STEP;
int SPRINT_HP_OFF_1_SFC_STEP;
int OUT_OR_IFACE_CORE_Z_SPRINTON_IN;
int FALSE_SPRINT_OPTION;
int OUT_ZMINUS1_B_SPRINT_OPTION_IN_2;
int OUT_AND_SPRINT_ENBL_RST;
int OUT_T_FF_SPRINT_SPRINTEN_IN_1;
int OUT_AND_SPRINT_SPRINTEN_IN_2;
int OUT_AND_SPRINT_SPRINTENBL_IN;
int SPRINT_SPRINTENBL;
int NSPRINT_SPRINTENBL;
int CORE_ALM_SPRT1_SPRSDALM1;
int CORE_ALM_SPRT2_SPRSDALM2;
int CORE_ALM_SPRT3_SPRSDALM3;
int OUT_NOR_SPRINT_READY_EN_IN_10;
int IFACE_SPRINT_BRNSPRNTOK;
int IFACE_SPRINT_T2SPRNTOK;
int IFACE_SPRINT_DWBSPRNTOK;
int IFACE_SPRINT_P8THGOOD;
int IFACE_SPRINT_P8THEGOOD;
int IFACE_SPRINT_NSDREFSPRT;
int IFACE_SPRINT_LIQDMDOK;
int TRUE_SPRINT_FUELSYSRDY;
int IFACE_SPRINT_PS3SPROK;
int FALSE_SPRINT_SIM_SPRT;
int SPRINT_ALLOWTEST;
int OUT_AND_SPRINT_SPRT_READY_T_COND_4;
int FALSE_SPRINT_SIM_SPRAY;
int OUT_AND_SPRINT_SPRT_READY_T_COND_5; 
int SPRINT_HP_ON_2_SFC_STEP;
int SPRINT_LP_ON_2SFC_STEP;
int OUT_OR_SPRINT_FILL_DLY_TRIGGER;
int FALSE_SPRINT_TEST_TIMER;
float OUT_A_SW_SPRINT_FILL_DLY_DLY_TIME;
float SPRINT_PT62234;
int OUT_A_CMPR_SPRINT_FILL_DN_IN_2;
int out_DLY_SPRINT_FILL_DN_IN_1;
int OUT_OR_SPRINT_LP_ON_2_T_COND_3;
int SPRINT_HP_OFF_2_SFC_STEP;
int OUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK;
int SPRINT_LP_OFF_2_SFC_STEP;
int OUT_OR_SPRINT_LP_E_Z_FEEDBACK;
int SPRINT_LP_OFF_3_SFC_STEP;
int SPRINT_OFF_1_SFC_STEP;
int OUT_OR_SPRINT_EVAC_Z_FEEDBACK;
int SPRINT_LP_OFF_5_SFC_STEP;
int SPRINT_OFF_2_SFC_STEP;
int OUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK;
int SPRINT_OFF_4_SFC_STEP;
int OUT_OR_SPRINT_JIMMY_SW2_NC;
int FALSE_SPRINT_JIMMY_SPRT;
int OUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK;
int SPRINT_MASK_PURGE;
int SPRINT_LP_OFF_4_SFC_STEP;
int OUT_OR_SPRINT_LP_PRG_Z_FEEDBACK;
float SPRINT_TIMERS_IN_1;
int SPRINT_TMR_CNVT_IN_2;
float SPRINT_TIMERS_IN_2;
int SPRINT_TMR_CNVT_IN_3;
float SPRINT_TIMERS_IN_3;
int SPRINT_TMR_CNVT_IN_4;
float SPRINT_TIMERS_IN_4;
int SPRINT_TMR_CNVT_IN_5;
float SPRINT_TIMERS_IN_5;
int SPRINT_TMR_CNVT_IN_6;
float SPRINT_TIMERS_IN_6;
int SPRINT_TMR_CNVT_IN_7;
float SPRINT_TIMERS_IN_7;
int SPRINT_TMR_CNVT_IN_8;
float SPRINT_TIMERS_IN_8;
int SPRINT_TMR_CNVT_IN_9;
float SPRINT_TIMERS_IN_9;
float SPRINT_TMR_ANGL;
int SPRINT_TMR_ANGL_IN_1;      
int IFACE_SPRINT_C_LPSPRTEN;
int SPRINT_HP_SPRNTOK;
int OUT_AND_SPRINT_SPRT_READY_T_COND_2; 
int SPRINT_C_LPSPRTEN;
int OUT_AND_SPRINT_SPRT_READY_T_COND_3; 
int SPRINT_LP_OFF_2_TRAN_2;
int SPRINT_LP_OFF_3_TRAN_2;
int SPRINT_LP_OFF_4_TRAN_2;
int SPRINT_LP_OFF_5_TRAN_2;
int SPRINT_HP_OFF_2_TRAN_2;
int SPRINT_OFF_1_TRAN_2;
int SPRINT_OFF_2_TRAN_2;
int SPRINT_OFF_3_TRAN_2;
int SPRINT_OFF_4_TRAN_2; 
int OUT_OR_SPRINT_LP_ON_1_SF_SEL_2;
int SPRINT_SDLATCHLP;
int SPRINT_SPRT_OFF;
int SPRINT_OFF_MASK;
int SPRINT_TNK_VACSW;
int OUT_OR_SPRINT_TRANSOFF_IN_1;
int SPRINT_NOTTEST;
int OUT_AND_SPRINT_HP_2_LP_1_T_COND_1; 
int SPRINT_LP_2_HP_1_TRAN_2;
int SPRINT_LP_2_HP_2_TRAN_2;
int SPRINT_LP_2_HP_3_TRAN_2;
int SPRINT_LP_2_HP_4_TRAN_2;
int SPRINT_LP_2_HP_5_TRAN_2;
int SPRINT_HP_ON_3_TRAN_2;
int SPRINT_LP_OFF_1_TRAN_2;
int SPRINT_HP_OFF_1_TRAN_2;
int OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1; 
int SPRINT_NOTREADY_TRAN_1;
int OUT_S1_ET1_SPRINT_ACTIVE_IN_1; 
int SPRINT_TRANSOFF;
int SPRINT_SIM_SPRT;
int SPRINT_SIM_SPRAY;
int SPRINT_SPRT_READY_TRAN_5;
int OUT_S1_ET2_SPRINT_ACTIVE_IN_2; 
int TRUE_SPRINT_PSL_OK;  
int SPRINT_HP_ON_2_TRAN_2;
int OUT_S1_ET3_SPRINT_FILL_OR_IN_2;  
int OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2; 
int SPRINT_N_LPSPRTEN;
int SPRINT_H2OXFRDONE;
int OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3; 
int SPRINT_DLY_HPHLD;
int OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4; 
int SPRINT_FILL_DN;
int SPRINT_DRAINHP_TM;
int OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1; 
int FIN_DE_PROCESO;       
int FALSE_SPRINT_HP_SPRNTOK;
int OUT_AND_SPRINT_TRANS_OFF_IN_4;
int SPRINT_LP_OFF_2_TRAN_1;
int SPRINT_LP_OFF_3_TRAN_1;
int SPRINT_LP_OFF_4_TRAN_1;
int SPRINT_LP_OFF_5_TRAN_1;
int SPRINT_HP_OFF_2_TRAN_1;
int SPRINT_OFF_1_TRAN_1;
int SPRINT_OFF_2_TRAN_1;
int SPRINT_OFF_3_TRAN_1;
int SPRINT_OFF_4_TRAN_1;
int OUT_OR_SPRINT_HP_ON_1_SF_SEL_3;
int SPRINT_LP_ON_3_TRAN_2;
int SPRINT_HP_2_LP_1_TRAN_2;
int SPRINT_HP_2_LP_2_TRAN_2;
int SPRINT_HP_2_LP_3_TRAN_2;
int SPRINT_LP_OFF_1_TRAN_1;
int SPRINT_HP_OFF_1_TRAN_1;
int OUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1;
int SPRINT_JIMMY_SPRT;
int SPRINT_EVAC_TMR;
int TRUE_SPRINT_EVAC_SW1;
int OUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3;
int SPRINT_HP_2_LP_1_TRAN_1;
int SPRINT_HP_2_LP_2_TRAN_1;
int SPRINT_HP_2_LP_3_TRAN_1;
int SPRINT_LP_ON_1_TRAN_1;
int SPRINT_LP_ON_2_TRAN_1;
int SPRINT_LP_ON_3_TRAN_1;
int OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1;
int FUEL_SYS_GAS100;
int OUT_OR_SPRINT_LP_XFR_WT_T_COND_1;
int SPRINT_LP_2_HP_1_TRAN_1;
int SPRINT_LP_2_HP_2_TRAN_1;
int SPRINT_LP_2_HP_3_TRAN_1;
int SPRINT_LP_2_HP_4_TRAN_1;
int SPRINT_LP_2_HP_5_TRAN_1;
int SPRINT_HP_ON_3_TRAN_1;
int OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1;
int SPRINT_HP_ON_1_TRAN_1;
int SPRINT_HP_ON_2_TRAN_1;
int OUT_OR_SPRINT_OFF_1_SF_SEL_2;
int SPRINT_HP_PRG_TMR;
int FALSE_SPRINT_TRAN_4_OR;
int OUT_OR_SPRINT_OFF_4_T_COND_3;
int FALSE_SPRINT_NOT_RUNNIN;
int OUT_AND_SPRINT_JIMMY_SW2_NO;
int SPRINT_OFF_3_SFC_STEP;
int SPRINT_NOTREADY_SFC_STEP;
int OUT_OR_SPRINT_SPRINT_OUT_IN;
int SPRINT_SEL_SPRINT;
int SPRINT_SEL_SPRAY;
int SPRINT_RAMP_DOWN_P_LIM_1;
int SPRINT_DLY_LPEHLD;
int TRUE_EVACUATE_LP_SPRINT_MANIFOLD;
int SPRINT_DLY_LPPHLD;
int SPRINT_LP_PRG_TMR;
int SPRINT_LP_OFF_5_TRAN_3;
int SPRINT_HP_OFF_2_TRAN_3;
int SPRINT_EVAC_SW1;
int SPRINT_GAS_OR_LIQ;
int SPRINT_DN_PRG_TMR;
int SPRINT_SPRT_READY_TRAN_1;
int OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5;
int OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2;
int OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2;
int OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1;
int OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2;
int OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2;
int OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12;
int OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2;
int OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3;
int OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2;
int OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3;
int OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK;
int OUT_S3_ET5_SPRINT_PURGE_HP_IN_2;
int OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3;
int FALSE_SPRINT_TEST_SPRT;
int SFC_STEP_OUTOFOP;
int OUT_SPRINT_ALLOWTEST_AND;
int NOUT_SPRINT_ALLOWTEST_AND;
int SPRINT_SPRT_READY;
int SPRINT_NOTREADY;
int SPRINT_LP_ON_1;
int SPRINT_LP_OFF_1;
int SPRINT_LP_OFF_3;
int SPRINT_LP_OFF_5;
int SPRINT_HP_ON_1;
int SPRINT_HP_OFF_1;
int SPRINT_HP_OFF_2;
int SPRINT_OFF_1;
int SPRINT_OFF_2;
int SPRINT_OFF_3;
int OUT_SPRINT_ACT_OR_INI_NOR;
int HMI_BO_BW_V_125;
int FALSE_SPRINT_DEC_OR;
int OUT_OR_SPRINT_LOWER_AND_IN_2;
int IFACE_CORE_Z_MANMODE;
int OUT_AND_SPRINT_MAN_RAMP_P_SEL_2;
int HMI_BO_BW_V_126;
int FALSE_SPRINT_INC_OR;
int OUT_OR_SPRINT_RAISE_AND_IN_2;
int OUT_AND_SPRINT_MAN_RAMP_P_SEL_3;
int SFC_STEP_OUTOFOP_SFC_STEP;
int FALSE_SPRINT_MAN_STRK;
int OUT_AND_SPRINT_CNTL_SW_CTRL;
int OUT_I_SW_SPRINT_CNTRL_OUT_SEL;
int SPRINT_ACT_OR_INI;
float OUT_A_SW_SPRINT_MINFLOW_IN_1;
float OUT_A_SW_SPRINT_FLOW_LIM_IN_2;
float SPRINT_H2ODMDSW_NC;
float OUT_A_SW_SPRINT_SPRINT_PID_DB_SP;
int OUT_O_SHOT_SPRINT_DOWN_OR_IN_1;
int OUT_OR_SPRINT_SPRT_DOWN_IN;

////////////////////////////////////////////////////////////////////////////////////

//////////////////////////FUEL SYSTEM///////////////////////////////////////////////

int SFC_STEP_START_INIT;
int SFC_STEP_MOTOR_6;
int SHUTDOWN_NO_SHTDNS;
int FUEL_SYS_START_INI;
int FUEL_SYS_HOT_START;
int FUEL_SYS_UNITREADY;
int FUEL_SYS_START_OR;
int FUEL_SYS_GAS_START;
int FUEL_SYS_GAS_STRTOS_ONE_SHOT;//Entrada del timer
int out_FUEL_SYS_GAS_STRTOS_ONE_SHOT[1];//Salida del timer
double TP_FUEL_SYS_GAS_STRTOS_ONE_SHOT=1;//Parametrizacion del timer (seg.)
int FUEL_SYS_HOLD_TRAN_1;
int FUEL_SYS_GASSTRT_06_TRAN_2;
int FUEL_READY_TO_START__AND_XFER;
int FUEL_SYS_CHOPFUEL;
int WAIT_FOR_PURGE_TIMER_DONE;
int SFC_STEP_HI_SPDSEL2;
int ACCEL_TO_LITE_OFF;
int TRUE_ACEL_TO_LITE_OFF;
int VERIFY_FUEL_VALVE_AT_MIN_POSITIN; 
int ACTIVATE_IGNITORS;
int START_PERM_VMIN_STOP;
int FUEL_SYS_IGN_DLY;
int FUEL_SYS_IGNITORS;
int FUEL_SYS_IGNITORDLY_DELAY;//Entrada del timer
int out_FUEL_SYS_IGNITORDLY_DELAY[5];//Salida del timer
double TP_FUEL_SYS_IGNITORDLY_DELAY=5;//Parametrizacion del timer (seg.)
int FUEL_SYS_ZS6204OPEN;
int FUEL_SYS_ZS6249OPEN;
int FUEL_SYS_BLKS_OPN;
int OPN_VNT_SOV6208;
int WAIT_FOR_LITE_OFF;
int CORE_DIGITAL_LITEOFF;
int FUEL_SYS_SOV6249;
int FUEL_SYS_GASNOT_ON;
int FUEL_SYS_N_CHOPFUEL;
int FUEL_SYS_DACTGAS;
int DE_ACTIVATE_GAS_FUEL;
int FUEL_SYS_FUEL_RDY_TRAN_1;
int FUEL_SYS_G_MASKOFF2;

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////TURBINE OIL//////////////////////////////////////////

float N1N1_AI_PT6121A_AI_420_L;//Declaracion de variable global para uso de boton N1N1_AI_PT6121A_AI_420_L TRANSMISOR PT6121A
int TLO_PT6121A_A_NAME;
int TLO_PLUBLT15A_A_COMPARE;
int CORE_ANALOG_N25SEL;
int TLO_N25LT7800_A_COMPARE;
int TLO_N25GT4500_A_COMPARE;
int TLO_PLUBLT6A_A_COMPARE;
int IFACE_CNFG_LUBPRS_OPT_B_NAME;//Declaracion de variable global para uso de boton IFACE_CNFG_LUBPRS_OPT_B_NAME
int TLO_USE_2NDRNG_NOT;
float N1N1_AI_PT6121B_AI_420_L;//Declaracion de variable global para uso de boton N1N1_AI_PT6121B_AI_420_L Transmisor PT-6121B
int TLO_PT6121B_A_NAME;
int TLO_PLUBLT15B_A_COMPARE;
int TLO_PLUBLT6B_A_COMPARE;//Declaracion de variable global para uso de boton N1N1_AI_PT6121B_LATCH_OR
float N1N1_AI_PT6121B_LATCH_OR;//Declaracion de variable global para uso de boton N1N1_AI_PT6121A_LATCH_OR
float N1N1_AI_PT6121A_LATCH_OR;
int TLO_PT6121AOK_NOT;
int TLO_N25GT7800_NOT;
int TLO_PT6121BOK_NOT;
int TLO_PLBLT15ENA_AND;
int TLO_PLUBLT6ENA_AND;
int TLO_PLBLT15ENB_AND;
int TLO_PLUBLT6ENB_AND;
int TLO_SD1_A_DLY;//Entrada del timer
int out_TLO_SD1_A_DLY[5];//Salida del timer, para la baja baja presion de aceite cuando N25>7800RPM 
double TP_TLO_SD1_A_DLY=.160;//Parametrizacion del timer (seg.)
int TLO_SD2_A_DLY;//Entrada del timer
int out_TLO_SD2_A_DLY[5];//Salida del timer
double TP_TLO_SD2_A_DLY=.186;//Parametrizacion del timer (seg.)
int TLO_SD1_B_DLY;//Entrada del timer
int out_TLO_SD1_B_DLY[5];//Salida del timer
double TP_TLO_SD1_B_DLY=.186;//Parametrizacion del timer (seg.)
int TLO_SD2_B_DLY;//Entrada del timer
int out_TLO_SD2_B_DLY[5];//Salida del timer
double TP_TLO_SD2_B_DLY=.186;//Parametrizacion del timer (seg.)
int TLO_PT6121ASD1_B_NAME;
int TLO_PT6121ASD2_B_NAME;
int TLO_PT6121BSD1_B_NAME;
int TLO_PT6121BSD2_B_NAME;
int PLUBSEL;//VARIABLE DE PRESION DE ACEITE LUBRICANTE A LA TURBINA PT-6121A_B
int PLUB_AB_SENSORS_HI_DIFFERENCE;
int PLUB_AB_SENSORS_FAILED;//FALLA DE AMBOS SENSORES
int TURB_LUBE_OIL_BOTH_SNSR_FLT;
int N1N6_RTD_TE6128A_AI_RTD_L;//Declaracion de variable global para uso de boton N1N6_RTD_TE6128A_AI_RTD_L
int TLO_TE6128A_A_NAME;
float N1N6_RTD_TE6128A_LATCH_OR;//Declaracion de variable global para uso de boton N1N6_RTD_TE6128A_LATCH_OR
float N1N6_RTD_TE6128B_AI_RTD_L;
float N1N6_RTD_TE6128B_LATCH_OR;
int SPEED_SW_N25GT6050_A_COMPARE;
int N1N31_BI_PSH6117_BI_L;
int TLO_USE_PSCV_B_NAME;
float N1N1_AI_PT6122_AI_420_L;
int TLO_USE_PSCVSW_B_NAME;
int TRUE_USE_CORE;
int FALSE_TLO_PSCVALMOVR;
int TLO_TLUBLT90A_A_COMPARE;
int TLO_TE6128A_OK_NOT;
int TLO_TE6218AMSK_AND;
int TLO_TLUB_GT90_NOR;
int TLO_TLUB_AND2_AND;
int TLO_TLUB_AND1_AND;
int TLO_TLUBLOAL2_B_NAME; //Selector de SALIDA muy bajo nivel de aceite en el Tanque 90. 
int TLO_TLUBLOAL1_B_NAME; //Selector de SALIDA muy bajo nivel de aceite en el Tanque 90. 
int TLO_TE6128B_A_NAME;
int TLO_TLUBLT90B_A_COMPARE;
int TLO_USE_CORE_B_NAME;
int TLO_TE6128B_OK_NOT;
int TLO_TE6218BMSK_AND;
int TLO_USE_SYNC_NOT;
int TLO_XN25DLY;//Entrada del timer
int out_TLO_XN25DLY[5];//Salida del timer
double TP_TLO_XN25DLY=5;//Parametrizacion del timer (seg.)
int TLO_PSH6117NT_NOT; //Variable de salida Alarma por al presion de descarga.
int TLO_PSCVALMOVR_B_SW;
int PSH6117_B_NAME;
int TLO_PSH6117ALM_B_NAME; //SALIDA de descarga de alta presion en la BOMBA
int TLO_PSCVMASK_AND;
int TLO_PSCVALM_SW_A_SW;
int TLO_PSCV_SW1_A_SW;
int TLO_PSCV_SW;
int TLO_PSCV;
int TLO_PSCV_SW_A_SW;
int TLO_PSCV_A_NAME;
int N1N34_BI_TSL6113_BI_L;//Declaracion de variable global TSL-6113
int TLO_TSL6113_B_NAME;
int TLO_TSL6113NT_NOT;
int TLO_TSL6113ALM_B_NAME; 
int TLO_N25GT4600_A_COMPARE;
int TLO_MOT6135_B_NAME; 
int N1N31_BI_PDSH6146_BI_L;//Declaracion de variable global PDSH6146
int TLO_PDSH6146_B_NAME; 
int NTLO_PDSH6146_B_NAME;//Salida del inversor
int TLO_PDSH6146NT_NOT; //Declaracion para el timer TLO_PDSH6146D_DELAY de tipo TOND
int TLO_PDSH6146D_DELAY;//Entrada del timer
int out_TLO_PDSH6146D_DELAY[5];//Salida del timer
double TP_TLO_PDSH6146D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSH6146AL_B_NAME;
int N1N31_BI_PDSH6148_BI_L;
int TLO_PDSH6148B_NAME;
int TLO_PDSH6148NT_NOT;//Declaracion para el timer TLO_PDSH6148D_DELAY de tipo TOND
int TLO_PDSH6148D_DELAY;//Entrada del timer
int out_TLO_PDSH6148D_DELAY[5];//Salida del timer
double TP_TLO_PDSH6148D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSH6148AL_B_NAME;//Declaracion de variable global para uso de boton N1N34_BI_LSL6102_BI_L
int N1N34_BI_LSL6102_BI_L;
int TLO_LSL6102_B_NAME;
int TLO_LSL6102NT_NOT;
int TLO_LSL6102ALM_B_NAME;
int TLO_HE6104_B_NAME;//Declaracion de variable global para uso de boton N1N34_BI_PDSH6120_BI_L
int N1N34_BI_PDSH6120_BI_L;
int TLO_PDSH6120_B_NAME;
int TLO_PDSH6120NT_NOT;
int TLO_PDSH6120D_DELAY;//Entrada del timer
int out_TLO_PDSH6120D_DELAY[5];//Salida del timer
double TP_TLO_PDSH6120D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSH6120AL_B_NAME;//Declaracion de variable global para uso de boton N1N34_BI_PDSHH6144_BI_L
int N1N34_BI_PDSHH6144_BI_L;
int TLO_PDSHH6144_B_NAME;//Declaracion de variable global para uso de boton TRUE_PDSHH_6144
int TRUE_PDSHH_6144;
int TRUE1_PDSHH_6144;
int TLO_PDSHH_6144_B_SW;
int TLO_PDSHH6144N_NOT;
int TLO_PDSHH6144D_DELAY;//Entrada del timer
int out_TLO_PDSHH6144D_DELAY[5];//Salida del timer
double TP_TLO_PDSHH6144D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSHH6144S_B_NAME;
int N1N34_BI_PDSH6118_BI_L;//Declaracion de variable global para uso de boton N1N34_BI_PDSH6118_BI_L
int TLO_PDSH6118_B_NAME;
int TLO_PDSH6118NT_NOT;
int TLO_PDSH6118D_DELAY;//Entrada del timer
int out_TLO_PDSH6118D_DELAY[5];//Salida del timer
double TP_TLO_PDSH6118D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSH6118AL_B_NAME;
int N1N34_BI_PDSHH6119_BI_L;
int TLO_PDSHH6119_B_NAME;
int TLO_PDSHH_6119_B_SW;
int TRUE_PDSHH_6119;//Declaracion de variable global para uso de boton TRUE_PDSHH_6119
int TRUE1_PDSHH_6119;
int TLO_PDSHH6119N_NOT;//Declaracion para el timer TLO_PDSHH6119D_DELAY de tipo TOND
int TLO_PDSHH6119D_DELAY;//Entrada del timer
int out_TLO_PDSHH6119D_DELAY[5];//Salida del timer
double TP_TLO_PDSHH6119D_DELAY=10;//Parametrizacion del timer (seg.)
int TLO_PDSHH6119S_B_NAME;
int CORE_ANALOG_TLUBSEL;
int TLO_TLUBSEL_A_NAME;
int TLO_TLUB_GT100_B_NAME;
int TLO_TLUBGT100_A_COMPARE;

////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////PERMISIVOS////////////////////////////////////////////

int VENT_TE6421LALM;
int VENT_TE6422LALM;
int VENT_TE6423LALM;
int VENT_TE6424LALM;
int VENT_TE6425LALM;
int VENT_TE6426LALM;
int TLO_TSL6113;
int GLUB_LT6045_OK;
int GLUB_TNKSTRTPRM;
int GLUB_PSH6089ALM;
int START_PERM_PSH6089_OK;
int START_PERM_STATOR_OK;
int START_PERM_STATOR_PRM;//STATOR TEMP GT 68 SALIDA A IFIX (SHEET 208,175,177,33)
int FIN_FAN_FANS_OK;
int VENT_STOPFANS;
int START_PERM_FANS_MSK;
int START_PERM_FANS_OK;//ALL FANS OK TO START SALIDA A IFIX(SHEET 208,175,177,33)
int N3N40_BI_LOC_REM;//ENTRADA AL PLC SELECTOR LOCAL O REMOTO
int FALSE_FAST_START;
int OUT_FAST_START;
int FALSE_FST_ST_OR;
int OUT_FST_ST_OR;
int SPEED_SW_N25LT1000;
int OUT_FASTSTRENB;
int XNSD_REF_NPTSTPT_MOVING;
int IFACE_CORE_Z_SWGRID;
int OUT_MVGDNRST;
int XNSD_REF_NPTMAXPOS;
int SHUTDOWN_ANY_SD;
int OUT_FASTSTRDIS;
int FASTSTRTL[5];
int out_FASTSTRTL[5];
int START_PERM_FASTSTART;//REMOTE FAST START SELECTED(SHEET 251,175,177,33)SALIDA A IFIX
int N3N40_BI_VIB_SYSMAL;
int START_PERM_VIB_SYSMAL;
int A1_A06_AIO_BE6822;//ENTRADA PLC TURB UV FLAME DETECTOR NO.1
int A1_A06_AIO_BE6823;//ENTRADA PLC TURB UV FLAME DETECTOR NO.2
int START_PERM_FLMDTHLTHY;
int START_PERM_FLMDT_OK;//SALIDA A IFIX FLAME DETECTORS HEALTHY(SHEET 208,175,177,33)
int A2_A12_GR1_FLT;
int A2_A12_GR2_FLT;
int A2_A12_GR3_FLT;
int OUT_GH_HDWR_OK;
int FALSE_B_SW_REV;
int TRUE_B_SW_REV;
int START_PERM_B_SW_REV;
int START_PERM_LH_OK;//SALIDA A IFIX LINKNET HARDWARE OK(SHEET 208,175,177,33)
int A1_A04_MPU_FLT;//ENTRADA FALLA DE TARJETA 
int A1_A06_AIO_FLT;//ENTRADA FALLA DE TARJETA 
int A1_A07_AIO_FLT;//ENTRADA FALLA DE TARJETA
int A1_A08_D0_FLT; //ENTRADA FALLA DE TARJETA
int A1_A09_ACT_FLT;//ENTRADA FALLA DE TARJETA
int A1_A10_ACT_FLT;//ENTRADA FALLA DE TARJETA
int A1_A12_BI1_FLT;//ENTRADA FALLA DE TARJETA
int A1_A12_BI2_FLT;//ENTRADA FALLA DE TARJETA
int A1_A12_BI3_FLT;//ENTRADA FALLA DE TARJETA
int A1_A12_BO1_FLT;//ENTRADA FALLA DE TARJETA
int A1_A12_BO2_FLT;//ENTRADA FALLA DE TARJETA
int A2_A03_ACT_FLT;//ENTRADA FALLA DE TARJETA
int TIMERS_TEST_TRUE;
int A2_A04_PI_FLT;//ENTRADA FALLA DE TARJETA A2_A04_PI
int FALSE_PI_PERMSW1;
int OUT_PI_PERMSW1;
int A2_A05_PI_FLT;//ENTRADA FALLA DE TARJETA A2_A05_PI
int FALSE_PI_PERMSW2;
int OUT_PI_PERMSW2;
int A2_A06_DVR_FLT;
int START_PERM_M_HDWR_OK;
int START_PERM_MNET_OK;//SALIDA A IFIX MICRONET HARDWARE OK(SHEET 208,175,177,33)
int SFC_STEP_RUNNING;
int GLUB_HICNKACTIV;
int SFC_STEP_LOSPD_OR;
int GLUB_WW_ACTIVE;
int OUT_OFFRUN_EN;
int OP_INTRFC_OFF_RUN;
int OUT_OFFRUNMASK;
int FALSE_OFFRUN_FF;
int B,C,E,F,G;
int START_PERM_OFF_RUN;//(SHEET 208,215,175,177,33)
int HYD_STRT_TSL1603;//ENTRADA HYD STRT OIL TANK TEMP LO(SHEET 204,175,177,33)
int TRUE_N_TMPOFF2;
int START_PERM_N_TMPOFF2;//SALID A IFIX HYD STRT OIL TANK TEMP HI HI(SHEET 205,175,177,33)
int START_PERM_HYTEMP_L;
int HYD_STRT_LSLL1601;
int N3N40_BI_CUST_PERM; 
int WTR_WASH_WW_ACTIVE;
int ENGMODE_CRANKING;
int TEMP_SW_T48LT200;
int TEMP_SW_T3LT200;
int START_PERM_T48LT200;
int START_PERM_T3LT200;
int START_PERM_HYDTNKLVL;
int START_PERM_HYD_ST_OK;//SALIDA A IFIX HYD-STARTER OK
float CORE_ANALOG_T48SEL;
int START_PERM_T48_LT400;//SALIDA A IFIX T5-T48 LESS THAN 400
int TRUE_START_PERM_G_STATUSOK;
int TRUE_START_PERM_SFTY_ST_OK;
int FUEL_SYS_FUEL_RDY;
int CORE_DIGITAL_CALMODE;
int A_B_FORCE_FRC_ST_PRM;
int SPEED_SW_N25LT300;
int SHUTDOWN_NO_SHTDNS;
int TLO_LSL6102;
int WTR_WASH_WW_NTACTIV;
int START_PERM_SFTY_ST_OK;
int FUEL_SYS_TGS_GT_275;
int CORE_ALARM_ALMCORE154;
int START_PERM_TE6232_SW;//SALIDA A IFIX T13-GAS SUPPLY TEMP OK
int FALSE_START_PERM_TE6232_SW;
int TRUE_START_PERM_TE6232_SW;
int START_PERM_TE6232_OK;
int IFACE_HDWR_GMVPDRFLT;
int IFACE_HDWR_GMVIDRFLT;
int IFACE_HDWR_GMVODRFLT;
int START_PERM_DRVRS_OKOR;
int START_PERM_FUELDVR_OK;//SALIDA A IFIX FUEL DRIVER OK 
int FUEL_SYS_GAS100;
int START_PERM_FUEL_SEL;
int GLUB_TE6021PERM;
int GLUB_TE6023PERM;
int START_PERM_GLUBTMP_OK;//SALIDA A IFIX GEN BEARING TEMPS OK
int SHUTDOWN_SDN_CORE;
int SFC_STEP_NOT_NS;
int START_PERM_SDNNS_OK;//SALIDA A IFIX (CRANK PERM) SDNs AND NS CLEARED 
int CORE_DIGITAL_GMVIVLVSD;
int CORE_DIGITAL_GMVPVLVSD;
int CORE_DIGITAL_GMVOVLVSD;
int START_PERM_GAS_OK_IN_1;
int A2_A06_DVR_FCV62107MN;
int A2_A06_DVR_FCV62108MN;
int A2_A06_DVR_FCV62109MN;
int START_PERM_GAS_OK_IN_2;
int START_PERM_VMIN_STOP;//SALIDA A IFIX T10-FUEL VLV ON MIN STOP
int FUEL_SYS_PGS_GT_200;
int FUEL_SYS_PGS_LT_700;
int START_PERM_FUELPRSOK;//SALIDA A IFIX FUEL GAS PRESSURE OK
int FUEL_SYS_ZS6204;//ENTRADA ANALOGICA GAS FUEL SHUTOFF VLV POS SW (DWNSTRM)
int FUEL_SYS_ZS6249;//ENTRADA ANALOGICA GAS FUEL SHUTOFF VLV POS SW (UPSTREAM)
int START_PERM_SOV_CLSD;//SALIDA A IFIX GAS FUEL SUPPLY SOV CLOSED   
int SHUTDOWN_FOURHRLOK;	
int TRUE_START_PERM_GC_OK;
int IFACE_OK2START_OK2START01;
int IFACE_OK2START_OK2START02;
int IFACE_OK2START_OK2START03;
int IFACE_OK2START_OK2START04;
int IFACE_OK2START_OK2START05;
int IFACE_OK2START_OK2START06;
int IFACE_OK2START_OK2START07;
int IFACE_OK2START_OK2START08;
int IFACE_OK2START_OK2START09;
int IFACE_OK2START_OK2START10;
int IFACE_OK2START_OK2START11;
int IFACE_OK2START_OK2START12;
int IFACE_OK2START_OK2START13;
int IFACE_OK2START_OK2START14;
int IFACE_OK2START_OK2START15;
int IFACE_OK2START_OK2START;
int START_PERM_OK2START01;
int START_PERM_OK2START02;
int START_PERM_OK2START03;
int START_PERM_OK2START04;
int START_PERM_OK2START05;
int START_PERM_OK2START06;
int START_PERM_OK2START07;
int START_PERM_OK2START08;
int START_PERM_OK2START09;
int START_PERM_OK2START10;
int START_PERM_OK2START11;
int START_PERM_OK2START12;
int START_PERM_OK2START13;
int START_PERM_OK2START14;
int START_PERM_OK2START15;
int XN25_REF_XN25MINPOS;
int XNSD_REF_NPTSYNCPOS;
int SFC_STEP_MOTOR_5;
int START_PERM_N25LT300;
int GLUB_DC_OFF;
int START_PERM_NO_SHTDNS;
int OUT_REFSATMIN;
int OUT_N25LT300SW;
int START_PERM_LOK_4HROFF;
int START_PERM_CAL_MODE;
int START_PERM_TLUB_OK;
int START_PERM_G_STATUSOK;
int START_PERM_FUELSYSOK;
int START_PERM_GLUBTNKTMP;
int START_PERM_FORCE_MODE;
int START_PERM_TLO_TNKLVL;
int START_PERM_CUSTPRM;
int START_PERM_GC_OK;
int START_PERM_VIB_SYS_OK;
int START_PERM_WWNOTACTIV;
int START_PERM_OK2START;
int START_PERM_GLUBTNKLVL;
int START_PERM_T_READY;//SALIDA A IFIX TURBINE READY TO START
int START_PERM_WW_OFF;
int START_PERM_CRANK_OFF;
int START_PERM_C_READY;
int WTR_WASH_LS6543;
int START_PERM_WW_PERM;

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////RECONOCIMIENTO_DISPAROS//////////////////////////////

int LOC_REM_LOCAL;
int FALSE_RESETACKN_LOCAL;
int OP_INTRFC_ACKN_H;
int OP_INTRFC_ACKN;
int FALSE_RESET_ACKN;
int OUT_ORACKN_OR;
int TRUE_RESET_ACKN;
int RESET_ACKN_RESET_Z;
int OUT_OR_RESETACKN;
int NOUT_OR_RESETACKN;
int DLYALMACK;
int out_DLYALMACK[5];
double TP_DLYALMACK=5;
int IFACE_CORE_ACKN_OR;
int SHUTDOWN_CDLO_LAT;
int SHUTDOWN_CDLO_GEN;
int SHUTDOWN_SDN_CORE;
int SHUTDOWN_SD_CORE;
int LCKOUTMSK1_OR;
int FALSE_RESET_LCKOUTMSK1;
int LCKOUTMSK1_AND;
int OP_INTRFC_RESET;
int FALSE_RESET_HMI_SW;
int FALSE_RESET_SW;
int N3N40_BI_RESET;
int FALSE_LOC_RESET_OR;
int IFACE_CORE_MASK_Z;
int FALSE_IN9_ALARM_HORN;
int CORE_DIGITAL_SD_RESET;
int CORE_DIGITAL_MIN_RESET;
int CORE_DIGITAL_IDLE_RESET;
int CORE_DIGITAL_RESET;
int CORE_DIGITAL_ACKN;
int ALARM_ALM_LAT;
int NEVADA_ALARMS;
int CORE_DIGITAL_ALARM;
int DATA_IO_LCR_BR_V_1908;
int CORE_DIGITAL_DM_HORN;
int CORE_DIGITAL_ALM_HORN;
int CORE_DIGITAL_SI_HORN;
int CORE_DIGITAL_SD_HORN;
int SHUTDOWN_NS_LAT;
int FALSE_IN11_ALARM_HORN;
int FALSE_IN12_ALARM_HORN;
int B_FORCE_HORN;
int DATA_IO_LL2_BW_V_32;
int DATA_IO_RL2_BW_V_32;
int ALARM_HMISTI_OR;
int DATA_IO_LL2_BW_V_27;
int DATA_IO_RL2_BW_V_27;
int ALARM_HMISTIRST_OR;
int GENERATOR_TRIP_IN_9;
int DATA_IO_LL2_BW_V_9;
int DATA_IO_RL2_BW_V_9;
int ALARM_HMIDM_OR;
int DATA_IO_LL2_BW_V_8;
int DATA_IO_RL2_BW_V_8;
int ALARM_HMIDMRST_OR;
int XNSD_REF_DMREFSEL2;
int CORE_DIGITAL_N25CTRL;
int out_CORE_DIGITAL_N25CTRL[5];
double TP_CORE_DIGITAL_N25CTRL=5;
int GENERATOR_ISOCH;
int SHUTDOWN_ONLINE_RST;
int IFACE_CORE_Z_SWGRID;
int SHUTDOWN_DMTIMEADJ_CTRL;
int FALSE_SHUTDOWN_DIS_CONDEN_IN1;
int FALSE_SHUTDOWN_DIS_CONDEN_IN2;
int FALSE_SHUTDOWN_DIS_CONDEN_IN3;
int FALSE_SHUTDOWN_DIS_CONDEN_IN4;
int OUT_SHUTDOWN_DIS_CONDEN;
int SHUTDOWN_STEPIDLE;
int SHUTDOWN_NOT_ESSTI;
int SHUTDOWN_CHOP_FUEL;
int SFC_STEP_CORE_1250;
int SPEED_SW_NSDGT3590;
int GENERATOR_GEN_BKRCLS;
int SHUTDOWN_ABORT_SDN_OVRD;
int START_PERM_T_NOTREADY;
int GENERATOR_ANY_SD;
int DATA_IO_LCR_BR_V_1909;
int SHUTDOWN_CDLO;
int SHUTDOWN_DECELMIN;
int ENGMODE_CLR_LAT;
int B_FORCE_SUM_SD;
int CORE_DIGITAL_Z_ESN;
int CORE_DIGITAL_Z_ES;
int CORE_DIGITAL_STEPIDLE;
int COND_MON_LESD_EN;
int COND_MON_GESD_EN;
int ENGMODE_MODE_SEL_20;
int SHUTDOWN_ABORT_SDN;
int SHUTDOWN_SDN;
int SHUTDOWN_SDN_GEN;
int IFACE_CORE_Z_SDN;
int FALSE_SHUTDOWN_SD_OR;
int SHUTDOWN_SD;
int SHUTDOWN_SD_GEN;
int IFACE_CORE_Z_SHUTDOWN;
int SHUTDOWN_SI;
int SHUTDOWN_SISD;
int FALSE_SHUTDOWN_STI_OR;
int IFACE_CORE_STEPIDLOR;
int SHUTDOWN_STNKYS_MSK_OUT_OR;
int ENGMODE_ENGMODE21_TRIGGER;
int SHUTDOWN_DM;
int SHUTDOWN_DM_GEN;
int IFACE_CORE_DECEL_OR;
int SHUTDOWN_CDLO_OR;
int CORE_DIGITAL_DECELMIN;
int B_FORCE_VAR_SHED;
int ENGMODE_MODE_SEL_19;
int ALARM_HMI_STI;
int SHUTDOWN_FRLCKOVRDE;
int TRUE_SHUTDOWN_FRLCKOVRDE;
int SHUTDOWN_T48GT1150L_TRIGGER;
float CORE_ANALOG_T48SEL;
int SHUTDOWN_DLY1150_TRIGGER;
int SHUTDOWNDLY1150;
int out_SHUTDOWNDLY1150[5];
double TP_SHUTDOWNDLY1150=6;
int SPEED_SW_N25GT4600;
int SHUTDOWN_RUN_AGAIN;
int out_SHUTDOWN_RUN_AGAIN[5];
double TP_SHUTDOWN_RUN_AGAIN=6;
int CORE_DIGITAL_FUEL_ON;
int SHUTDOWN_RST_4HRLK_IN_1;
int SHUTDOWN_LOCKLOOP;
int SFC_TIMER_CDC_DN;
int SHUTDOWN_T48GT1150L_RST;
int SFC_TIMER_HOT_COOLDN_CTRL;
int NSFC_TIMER_HOT_COOLDN_CTRL;
int SPEED_SW_N25LT300;
int SHUTDOWN_TRPFRMPWR_TRIGGER;
int HYD_STRT_SOV1619RMP;
int SPEED_SW_N25GT1700;
int SHUTDOWN_TMRRSTOR_IN1;
int NSHUTDOWN_LOCKLOOP;
int SHUTDOWN_FRLKTMRDN;
int SHUTDOWN_SD_RESET;
int SHUTDOWN_TMRRSTOR_IN2;
int SHUTDOWN_TRPFRMPWR_RST;
int SHUTDOWN_EIGHTMNCLR_CTRL;
int SHUTDOWN_TENMINCLR;
int out_SHUTDOWN_TENMINCLR[5];
double TP_SHUTDOWN_TENMINCLR=5;
int SHUTDOWN_FOURHRLOK; 
int SHUTDOWN_TENMNTMRON;
int NSHUTDOWN_FOURHRLOK;
int FALSE_SHUTDOWN_R64_EARTH;
int FALSE_SHUTDOWN_TEST_R64;
int SHUTDOWN_R64_EARTHB;
int SHUTDOWN_R64_LAT_TRIGGER;
int TIMERS_TEST_TRUE;
float SHUTDOWN_R64_TIME;
float SHUTDOWN_R64TM_SW;
float SHUTDOWN_R64_NSTIME_IN2;
int ALARM_RESET;
int SHUTDOWN_R64_ALM_IN_140;
float SHUTDOWN_R64_NSTIME;
float SHUTDOWN_R64_DLY_DLY_TIME;
int SFC_STEP_CNFG_CLDWN;
int XN25_REF_XN25MINPOS;
int TRUE_SHUTDOWN_N25MIN_SW;
int SHUTDOWN_CLDNTMR;
int SHUTDOWN_FUELCHOPOR_IN_7;
int SHUTDOWN_TMR_RST_FEEDBACK;
int SFC_STEP_STI_3;
int SFC_STEP_ESN;
int SFC_STEP_ES_1;
int SFC_STEP_FUELOFF;
int SHUTDOWN_FUELCHPLAT_TRIGGER;
int ALARM_RESET_LATCH;
int SHUTDOWN_CHOP_FUEL_IN;
int NSHUTDOWN_CHOP_FUEL_IN;
int GENERATOR_UTIL_BKROP;
int SFC_STEP_NORM_1;
int SHUTDOWN_GENCLSD;
int SHUTDOWN_COREREACHD;
int SHUTDOWN_STPIDLORNS_IN_2;
int XN25_REF_SI_NOT_IN;
int XN25_REF_XN25STEPEN_TRIGGER;
int SHUTDOWN_LTMINLD;
int SHUTDOWN_MINLDOS_TRIGGER;
int NSHUTDOWN_LTMINLD;
int SHUTDOWN_MINLDOS;
int out_SHUTDOWN_MINLDOS[5];
double TP_SHUTDOWN_MINLDOS=2;
int SFC_STEP_RST_AND_ST;
int SHUTDOWN_MINLDLAT_RST;
int XNSD_REF_MINREFOR_IN_1;
float CORE_ANALOG_N25SEL;
float XN25_REF_N25PLUS;
float OUT_XN25_REF_N25PLUS;
float XN25_REF_XN25REF;
int XN25_REF_XN25RTMSK2_IN_2;
int SFC_STEP_NORM_4;
int FALSE_XN25_REF_XN25RTMSK2;
int SHUTDOWN_N25_LWR_OR;
int SFC_STEP_NORM_5;
int XN25_REF_XN25LWROR_IN_1;
int SHUTDOWN_CLDN_DONE;
int SHUTDOWN_STRT_TMR_RST;
int SHUTDOWN_STRTCLDNTM_IN_2;
int XNSD_REF_NPTSYNCPOS;
int SHUTDOWN_CLDNTMR_TRIGGER;
int out_SHUTDOWN_CLDNTMR[5];
double TP_SHUTDOWN_CLDNTMR=5;
int SHUTDOWN_RSTONLINE;
int SHUTDOWN_MINLDSTTMR_IN_1;
int SHUTDOWN_STI_ES_ESN;
int SHUTDOWN_DMINTIMER_TRIGGER;
int SHUTDOWN_DMINTIMER;
int out_SHUTDOWN_DMINTIMER[5];
double TP_SHUTDOWN_DMINTIMER=5;
float DATA_IO_AW_V_6;
float SHUTDOWN_SML_MIN;
float SHUTDOWN_DMTIMEADJ_NO;
int SHUTDOWN_ONLINE;
float SHUTDOWN_SMTIMEADJ;
float SHUTDOWN_DMINTIMER_DLY_TIME;
int A1_A12_BI1_CRIT_PATH;
int A1_A12_BI1_SD_FUEL;
int NA1_A12_BI1_CRIT_PATH;
int NA1_A12_BI1_SD_FUEL;
int SHUTDOWN_SDN_IN_13;
int SHUTDOWN_SDN_IN_11;
int TRUE_SHUTDOWN_MUYFM_PLSE;
int FALSE_SHUTDOWN_VIB_SD_FUEL;
int N3N40_BI_VIB_SUM_SD;
int SHUTDOWN_SDN_IN_5;
int SHUTDOWN_SISD_IN_1;
int N3N40_BI_VIB_GB_SD;
int FALSE_SHUTDOWN_GENGBDLT12;
int A1_A01_CPU_VIB_SD_SEL;
int FALSE_A1_A01_CPU_VIB_SD_SEL;
int SHUTDOWN_SDN_GEN_IN_29;
int SHUTDOWN_SISD_IN_2;
int CORE_DIGITAL_FUELOFF;
int SFC_STEP_NOTSTARTIN;
int B_FORCE_SOV6185_IN;
int SHUTDOWN_COOLAIRTMR;
int out_SHUTDOWN_COOLAIRTMR[5];
double TP_SHUTDOWN_COOLAIRTMR=5;
int SHUTDOWN_CLTMR_DONE_IN;
int SPEED_SW_GENCSTDOWN;
int NSHUTDOWN_CLTMR_DONE_IN;
int SHUTDOWN_EXOVRSPDSD;
int CORE_SHTDN_SD_CORE005;
int CORE_SHTDN_SD_CORE006;
int CORE_SHTDN_SD_CORE007;
int CORE_SHTDN_SD_CORE008;
int CORE_SHTDN_SD_CORE009;
int CORE_SHTDN_SD_CORE010;
int B_FORCE_CRITPATHSD_IN;
int NB_FORCE_CRITPATHSD_IN;
int FALSE_SHUTDOWN_STOP_SW;
int N3N41_BI_LOC_STOP;
int OP_INTRFC_STOP;
int SHUTDOWN_NS_LAT_IN_1;
float CORE_ANALOG_N25DOT;
float SHUTDOWN_N25DLT10;
int SHUTDOWN_ACC_AND_1_IN_1;
float SHUTDOWN_N25LT6050;
int SHUTDOWN_ACC_AND_1_IN_2;
float SHUTDOWN_N25LT1700;
int SHUTDOWN_BP_AND_1_IN_1;
float SHUTDOWN_N25LT4600;
int SHUTDOWN_ACC_AND_3_IN_2;
float CORE_ANALOG_N25R;
float SHUTDOWN_N25RLT6407;
int SHUTDOWN_ACC_AND_2_IN_1;
int HYD_STRT_CRANK_HI;
int FUEL_SYS_PRGDN;
int CORE_DIGITAL_LITEOFF;
int FALSE_SHUTDOWN_ACC_AND_1;
int SHUTDOWN_SDN_IN_7;
int CORE_DIGITAL_FUELON;
int SHUTDOWN_ACC_2_DLY_TRIGGER;
int SHUTDOWN_ACC_2_DLY;
int out_SHUTDOWN_ACC_2_DLY[5];
double TP_SHUTDOWN_ACC_2_DLY=120;
int SHUTDOWN_STRDLY_TRIGGER;
int SHUTDOWN_ACC_AND_1;
int out_SHUTDOWN_ACC_AND_1[5];
double TP_SHUTDOWN_ACC_AND_1=60;
int FALSE_SHUTDOWN_BP_AND_1;
int SHUTDOWN_BPDLY_TRIGGER;
int SHUTDOWN_BP_AND_1;
int out_SHUTDOWN_BP_AND_1[5];
double TP_SHUTDOWN_BP_AND_1=10;
int SHUTDOWN_N25LT46DLY_TRIGGER;
int SHUTDOWN_ACC_AND_3;
int out_SHUTDOWN_ACC_AND_3[5];
double TP_SHUTDOWN_ACC_AND_3=90;
int SHUTDOWN_N256050DLY_TRIGGER;
int SHUTDOWN_ACC_AND_4;
int out_SHUTDOWN_ACC_AND_4[5];
double TP_SHUTDOWN_ACC_AND_4=120;
int NSHUTDOWN_COREREACHD;
int SHUTDOWN_ACC_5_DLY_TRIGGER;
int SHUTDOWN_ACC_AND_5;
int out_SHUTDOWN_ACC_AND_5[5];
double TP_SHUTDOWN_ACC_AND_5=120;
int SPEED_SW_NSDLT1250;
int SHUTDOWN_ACC_6_DLY_TRIGGER;
int SHUTDOWN_ACC_AND_6;
int out_SHUTDOWN_ACC_AND_6[5];
double TP_SHUTDOWN_ACC_AND_6=60;
float CORE_ANALOG_TLUBLEL;
float SHUTDOWN_TLUBLT90C;
int SHUTDOWN_LTMP_AND_IN_3;
int FALSE_SHUTDOWN_LTMP;
int SHUTDOWN_LTMP_DLY_TRIGGER;
int SHUTDOWN_SD_IN_9;
int out_SHUTDOWN_SD_IN_9[5];
double TP_SHUTDOWN_SD_IN_9=60;
int TLO_USE_SYNC;
int ALARM_ALM_LAT_IN_86;

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////SECUENCIA DE ARRANQUE////////////////////////////////

int SFC_STEP_LOCRANK_4_TRAN_2;
int SFC_STEP_HICRANK_4_TRAN_2;
int SFC_STEP_ESN_TRAN_1;
int SFC_STEP_HOLD_OFF_TRAN_1;
int SFC_STEP_OUTOFOP; 
int FALSE_SD_COND_OR;
int SHUTDOWN_SDN_CORE;
int SFC_STEP_OUTOFOP_T_COND_1;
int START_PERM_WW_PERM;
int OP_INTRFC_WW_ENABLE;
int SFC_STEP_WW_ENBL_TRIGGER; 
int SFC_STEP_WW_ABORT;
int WTR_WASH_SOAK_DONE;
int SFC_STEP_WW_ENBL_RST; 
int SFC_STEP_NOTOFFLINE[5];
int out_SFC_STEP_NOTOFFLINE[5];
int Nout_SFC_STEP_NOTOFFLINE[1]; 
int WTR_WASH_HS6505_SW; 
int SFC_STEP_OUTOFOP_T_COND_2; 
int OP_INTRFC_HISPD_CRNK;
int FALSE_HI_CNK_OR;
int SFC_STEP_HCSEL_NOSD; 
int START_PERM_C_READY;
int SFC_STEP_OUTOFOP_T_COND_3;
int OP_INTRFC_LO_SPDCRNK;
int FALSE_LO_CNK_OR;
int SFC_STEP_LCSEL_NOSD; 
int SFC_STEP_OUTOFOP_T_COND_4;
int LOC_REM_LOCAL;//ENTRADA NEGADA DEL SELECTOR LOCAL O REMOTO N3N40_BI_LOC_REM
int FALSE_START_SW; 
int N3N41_BI_LOC_START_BI_L;//ENTRADA DEL PLC INICIO NORMAL LOCAL 
int SFC_STEP_START_OR; 
int OP_INTRFC_START;
int FALSE_START_OR;
int SFC_STEP_NSEL_NOSD; 
int START_PERM_T_READY; 
int SFC_STEP_OUTOFOP_T_COND_5; 
int SFC_STEP_SFC_S_INIT; 
int SFC_STEP_START_INIT;
int SFC_STEP_HICRANK_1_SFC_STEP; 
int SFC_STEP_HICRANK_2_SFC_STEP;
int SFC_STEP_HICRANK_3_SFC_STEP;
int SFC_STEP_HICRANK_4_SFC_STEP;
int GLUB_HICNKACTIV; 
int SFC_STEP_LOCRANK_1_SFC_STEP;
int SFC_STEP_LOCRANK_2_SFC_STEP;
int SFC_STEP_LOCRANK_3_SFC_STEP;
int SFC_STEP_LOCRANK_4_SFC_STEP;
int ENGMODE_CRANKING; 
int SHUTDOWN_FOURHRLOK;
int SFC_STEP_STARTINITL;
int SFC_STEP_RUN_OR_IN_1[5];
int out_SFC_STEP_RUN_OR_IN_1[5];//SALIDA A IFIX EN LA PANTALLA SECUENCIA DE ARRANQUE "START INITIALIZATION"
int CORE_DIGITAL_FUELON;
int SPEED_SW_N25GT4600;//ENTRADA DE CORE.ANALOG.N25SEL
int SFC_STEP_RUN_OR_IN_2;       
int SFC_STEP_RUNNINGLP; //SALIDA A IFIX EN LA PANTALLA SECUENCIA DE ARRANQUE "UNIT RUNNING"
int SFC_STEP_RUNNING;  
int SFC_STEP_OUTOFOP_TRAN_2;
int SFC_STEP_OUTOFOP_TRAN_3;
int SFC_STEP_OUTOFOP_TRAN_4;
int SFC_STEP_OUTOFOP_TRAN_5; 
int SFC_STEP_ST_SRNKLT; 
int SFC_STEP_SDRESETDLY; 
int SFC_STEP_STRTFL_RST;
int out_SFC_STEP_STRTFL_RST[5];
double TP_SFC_STEP_STRTFL_RST=1;
int SFC_STEP_LOSPD_OR; 
float SFC_STEP_TMR_RESET; 
double CORE_ANALOG_N25SEL=1200; 
int SFC_STEP_STRTFL_RST_IN_2; 
int SFC_STEP_ST_CRNKLT_RST; 
int SFC_STEP_SRTFL_DLY[5];
int out_SFC_STEP_SRTFL_DLY[5];
int TIMERS_SYS_TIMER=5; 
int SFC_STEP_STR_FAIL;
int out_SFC_STEP_STR_FAIL[5];
double TP_SFC_STEP_STR_FAIL=5;
int SFC_STEP_STARTINILP;//Entrada del timer
int out_SFC_STEP_STARTINILP[5];//Salida del timer
double TP_SFC_STEP_STARTINILP=1;//Parametrizacion del timer (seg.)
int Z_MINUS_RUNNINGLP;//Entrada del timer
int out_Z_MINUS_RUNNINGLP[5];//Salida del timer
double TP_Z_MINUS_RUNNINGLP=1;//Parametrizacion del timer (seg.)
int out_SFC_STEP_SDRESETDLY[5];//Salida del timer
double TP_SFC_STEP_SDRESETDLY=1;//Parametrizacion del timer (seg.)
int SFC_STEP_VENT;//WAIT UNITL VENT SYSTEM PURGE COMPLETE
int SHUTDOWN_ANY_SD;
int VENT_PRG_FAIL;
int VENT_PRG_DN;
int SFC_STEP_GLUB;//GLUB SYS VERIFICATION & JACK PUMP ACTIVATION
int GLUB_ABORT;
int GLUB_AC60VERLTC;
int GLUB_JCKPMP_ON;
int OUT_ACVER_JACK;
int SFC_STEP_HYD_STRT;//ACTIVATE HYDRAULIC STARTER PUMP
int HYD_STRT_CNK_SEQPRM;
int OUT_SD_STPCNK1;
int HYD_STRT_PUMPONDLY;
int SFC_STEP_HI_SPDSEL1;//HI SPEED SELECT(TURBINE PURGE)
int HYD_STRT_SOV1619RMP;
int SFC_STEP_NGGGT1700;//XN25 SPEED GT 1700 RPM
int SPEED_SW_N25GT1700;
int SFC_STEP_TURB_PRG;//ACTIVATE TURBINE PURGE TIMER
int FUEL_SYS_PRGDN;
int SFC_STEP_MOTOR_6;
int SFC_STEP_HI_SPDSEL2;//HIGH SPEED ACTIVATED WITH IGNITORS
int SFC_STEP_STPMOTOR;
int SFC_STEP_SD_EXCPTNM;
int CORE_DIGITAL_LITEOFF;
int SFC_STEP_HI_SPDSEL3;//SELECT 100% OF STARTER
int SFC_STEP_ATCORE;//HOLD CORE UNTIL NSD GT 1250 AND TLUB GT 90
int SPEED_SW_NSDGT1250;
int SHUTDOWN_COREREACHD;
int TLO_TLUB_GT90;
int OUT_CORE_1250;
int SFC_STEP_STRT_AGAIN;
int SFC_STEP_ACCTOSYNC;//ACCEL TO SYNC IDLE
int SHUTDOWN_SD_CORE;
int SHUTDOWN_STEPIDLE;
int SHUTDOWN_CDLO;
int SPEED_SW_NSDGT3590;
int SFC_STEP_WARMUP;//START WARM UP TIMER(4 MIN NORM 2 MIN FAST)
int SFC_TIMER_SYNC_RDY;
int SFC_STEP_WARMUP_TRAN_5;
int SFC_STEP_UNITONLINE_TRAN_6;
int SFC_STEP_WATER_INJ_TRAN_7;
int FALSE_SFC_STEP_READY2SYNC;
int SFC_STEP_READY2SYNC_TRAN_5;
int SFC_STEP_FSNL;//FULL SPEED NO LOAD
int GENERATOR_GEN_BKRCLS;
int XN25_REF_XN25MAXPOS;
int SFC_STEP_READY2SYNC;//READY TO SYNCHRONIZE
int SFC_STEP_NORM_1_TRAN_4;
int SFC_STEP_FSNL_TRAN_5;
int SFC_STEP_WATER_INJ_TRAN_6;
int SFC_STEP_UNITONLINE;//UNIT ACCEPTING LOAD
int GENERATOR_NS_DROOP;
int GENERATOR_NS_ISOCH;
int GENERATOR_GEN_BKROPN;
int FALSE_MASK_WI;
int SFC_TIMER_WARMUP_DN;
double CORE_ANALOG_MWSEL=5.0;
int OUT_MW_ENBWTR;
int OUT_MASK_WI;
int SFC_STEP_WATER_INJ;//ACTIVATE WATER INJECTION
int TRUE_SFC_STEP_WATER_INJ;

////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////SECUENCIA DE PARO NORMAL///////////////////////////////

int OUT_CORE_COOLDOWN_TIMER_ACTIVE;
int CORE_COOLDOWN_TIMER_ACTIVE;
int OUT_CORE_COOLDOWN;
int AND_SFC_STEP_NORM_1_SFC_STEP;
int SFC_STEP_UNITONLINE;//Declaracion de variable global para uso de boton SFC_STEP_UNITONLINE
int SFC_STEP_WATER_INJ;//Declaracion de variable global para uso de boton SFC_STEP_WATER_INJ
int OUT_RAMP_TO_NPT_MIN_LOAD;
int RAMP_TO_NPT_MIN_LOAD;
int SHUTDOWN_SDN_CORE;//Declaracion de variable global para uso de boton SHUTDOWN_SDN_CORE
int SHUTDOWN_SD_CORE;//Declaracion de variable global para uso de boton SHUTDOWN_SD_CORE
int SHUTDOWN_STEPIDLE;//Declaracion de variable global para uso de boton SHUTDOWN_STEPIDLE
int SFC_STEP_RST_AND_ST;//Declaracion de variable global para uso de boton SFC_STEP_RST_AND_ST
int OUT_AND_SFC_STEP_RDYTOOPN; //Declaracion de variable global para uso de boton OUT_AND_SFC_STEP_RDYTOOPN
int DEACTIVE_WATER_SYSTEM;
int OUT_DEACTIVE_WATER_SYSTEM;
int SFC_STEP_NS_OR;//Declaracion de variable global para uso de boton SFC_STEP_NS_OR
int TRUE_SFC_STEP_NORM_3;//Declaracion de variable global para uso de boton TRUE_SFC_STEP_NORM_3
int OPEN_BREAKERS;
int OUT_OPEN_BREAKERS;
int AND_SFC_STEP_NORM_4;//SYNC_COOLDOWN_TIMER_ACTIVE
int OUT_SYNC_COOLDOWN_TIMER_ACTIVE;
int SYNC_COOLDOWN_TIMER_ACTIVE;//CORE_COOLDOWN_TIMER_ACTIVE
int SFC_STEP_SYNC_COOL;//Declaracion de variable global para uso de boton SFC_STEP_SYNC_COOL
int SHUTDOWN_CHOP_FUEL;//Declaracion de variable global para uso de boton SHUTDOWN_CHOP_FUEL
int SFC_STEP_NORM_5;//Declaracion de variable global para uso de boton SFC_STEP_NORM_5
int SFC_STEP_STI_3;//Declaracion de variable global para uso de boton SFC_STEP_STI_3
int SFC_STEP_ES_2;//Declaracion de variable global para uso de boton SFC_STEP_ES_2
int WAIT_UNTIL_N25_LT_4600;
int OUT_WAIT_UNTIL_N25_LT_4600;
int SHUTDOWN_SISDESN;
int SPEED_SW_N25LT4600;
int SFC_STEP_STPMOTOR;//Declaracion de variable global para uso de boton SFC_STEP_STPMOTOR
int ACTIVATE_HYDRAULIC_STARTER_PUMP;
int OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP;
int SFC_STEP_FUELOFF;//Declaracion de variable global para uso de boton SFC_STEP_FUELOFF
int AND_SFC_STEP_MOTOR_3;//Declaracion de variable global para uso de boton AND_SFC_STEP_MOTOR_3
int OUT_HIGH_SPEED_SELECT;
int HIGH_SPEED_SELECT;
int HYD_STRT_SOV1619RMP;  //Declaracion de variable global para uso de boton HYD_STRT_SOV1619RMP                         
int WAIT_FOR_SPEED_TO_GO_ABOVE_1700;                                 
int OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700;
int SPEED_SW_N25GT1700;
int SFC_STEP_MOTOR_6;
int OUT_START_COOLDOWN_CRANK_TIMER;
int START_COOLDOWN_CRANK_TIMER;
int SFC_TIMER_CDC_DN;
int LATCH_SFC_STEP_MOTOR_5;
int OUT_HOLD_UNTIL_PURGE_DONE;
int HOLD_UNTIL_PURGE_DONE;
int FUEL_SYS_PRGDN;
int SFC_STEP_ANY_SD_OR;
int SFC_STEP_STAR_OR;
int SHUTDOWN_NO_SHTDNS;
int GLUB_DC_OFF;
int SFC_STEP_MTR_OR;
int SFC_STEP_RESET_STRT_TRIGGER;
int FALSE_SFC_STEP_HISPD_OR;
int SFC_STEP_HICRANK_3;
int SFC_STEP_HICRANK_4;
int SFC_STEP_MOTOR_1;
int SFC_STEP_MOTOR_2;
int SFC_STEP_MOTOR_3;
int SFC_STEP_MOTOR_4;
int SFC_STEP_MOTOR_5;
int ENGMODE_CRANKING_IN_1;
int SFC_STEP_STI_2;
int SFC_STEP_NORM_2;
int SFC_STEP_NORM_3;
int SFC_STEP_NORM_4;
int SFC_STEP_ACCTOSYNC_SF_SEL_2;
int SHUTDOWN_CDLO;
int SHUTDOWN_DM;
int SFC_STEP_ATCORE_T_COND_2;
int SFC_STEP_ACCTOSYNC;
int SFC_STEP_WARMUP;
int FALSE_SFC_STEP_NS_OR;
int SFC_STEP_FSNL;
int SFC_STEP_READY2SYNC;
int SFC_STEP_NORM_3_SF_SEL_2;
int SFC_STEP_MOTOR_5_TRAN_3;
int SFC_STEP_CNK_STPOR2_IN_2;
int SFC_STEP_MOTOR_1_SFC_STEP;
int SFC_STEP_MOTOR_2_SFC_STEP;
int SFC_STEP_MOTOR_3_SFC_STEP;
int SFC_STEP_MOTOR_4_SFC_STEP;
int SFC_STEP_MOTOR_5_SFC_STEP;
int SFC_STEP_RST_START_IN_2;
int SHUTDOWN_FOURHRLOK;
int SFC_STEP_FUELOFF_T_COND_1;
int SHUTDOWN_DECELMIN;
int SFC_STEP_MOTOR_6_T_COND_4;
int SFC_STEP_BKRS_OPN;
int SFC_STEP_ST_NS_TMR_RST;
int SFC_STEP_NORM_1;
int SFC_STEP_NSTOESTMR_TRIGGER;
int SHUTDOWN_SI_IN_1;//Entrada del timer, declaracion para el timer SHUTDOWN_SI_IN_1 de tipo TOND
int out_SHUTDOWN_SI_IN_1[5];//Salida del timer
double TP_SHUTDOWN_SI_IN_1=60;//Parametrizacion del timer (seg.)
int out_SFC_STEP_SYNC_COOL[5];//Salida del timer
double TP_SFC_STEP_SYNC_COOL=60;//Parametrizacion del timer (seg.)

////////////////////////////////////////////////////////////////////////////////////





//funcion de entrada de ejecucion  
 int main0(int pars) 
{ 
//ejemplo de ejecucion...genera la raiz cuadrada
int i=0;
for (i=5000;i<10000;i++)
{

	NEVADA_COMM_BR_V_10_6=0;
	DATA_IO_LCR_BR_V_1595=0;
	NEVADA_COMM_BR_V_1_1=0;
	NEVADA_COMM_BR_V_10_1=0;
	FALSE_NEVADA_SYSMAL_OR=0;
	ALARM_ALM_LAT_IN_163=0;
	NEVADA_SYS_ALM=0;
	NEVADA_COMM_BR_V_1_1=0;
	FALSE_NEVADA_SYSMAL_OR=0;
	NEVADA_COMM_BR_V_1_9=0;
	ALARM_ALM_LAT_IN_164=0;
	NEVADA_COMM_BR_V_1_15=0;
	ALARM_ALM_LAT_IN_165=0;
	NEVADA_COMM_BR_V_1_21=0;
	ALARM_ALM_LAT_IN_166=0;
	NEVADA_COMM_BR_V_3_1=0;
	ALARM_ALM_LAT_IN_167=0;
	NEVADA_COMM_BR_V_3_9=0;
	ALARM_ALM_LAT_IN_168=0;
	NEVADA_COMM_BR_V_3_17=0;
	ALARM_ALM_LAT_IN_169=0;
	NEVADA_COMM_BR_V_3_25=0;
	ALARM_ALM_LAT_IN_170=0;
	NEVADA_CH_FAIL_AL_IN=0;
	NEVADA_COMM_BR_V_3_1=0;
	NEVADA_COMM_BR_V_3_9=0;
	NEVADA_COMM_BR_V_3_17=0;
	NEVADA_COMM_BR_V_3_25=0;
	SHUTDOWN_DM_IN_1=0;
	NEVADA_COMM_BR_V_1_27=0;
	ALARM_ALM_LAT_IN_172=0;
	CORE_ANALOG_N2ROTOR=0;
	NEVADA_XNSDENBL=0;
	NEVADA_NEWOLD_1_NO=0;
	CORE_ANALOG_N25SEL=0;
	NEVADA_XN25ENBL=0;
	NEVADA_NEWOLD_2_NO=0;
	TRUE_NEVADA_KP_NEW_OLD=0;
	NEVADA_KEYMASK1_IN_2=0;
	TRUE_NEVADA_KP_NEW_OLD=0;
	NEVADA_KEYMASK2_IN_2=0;
	NEVADA_COMM_BR_V_4_1=0;
	ALARM_ALM_LAT_IN_173=0;
	NEVADA_COMM_BR_V_4_1=0;
	NEVADA_COMM_BR_V_4_9=0;
	ALARM_ALM_LAT_IN_174=0;
	NEVADA_COMM_BR_V_4_9=0;
	TRUE_NEVADA_NEWOLD_1=0;
	TRUE_NEVADA_NEWOLD_2=0;
	NEVADA_COMM_V_1_33=0;
	ALARM_ALM_LAT_IN_175=0;
	NEVADA_COMM_V_5_1=0;
	ALARM_ALM_LAT_IN_176=0;
	NEVADA_COMM_V_5_9=0;
	ALARM_ALM_LAT_IN_177=0;
	NEVADA_COMM_V_1_17=0;
	ALARM_ALM_LAT_IN_178=0;
	NEVADA_COMM_V_5_25=0;
	ALARM_ALM_LAT_IN_179=0;
	NEVADA_COMM_V_1_63=0;
	ALARM_ALM_LAT_IN_180=0;
	NEVADA_COMM_V_9_1=0;
	ALARM_ALM_LAT_IN_181=0;
	NEVADA_COMM_V_9_9=0;
	ALARM_ALM_LAT_IN_182=0;
	NEVADA_COMM_V_9_17=0;
	FALSE_NEVADA_CD42FL3MSK=0;
	ALARM_ALM_LAT_IN_183=0;
	NEVADA_COMM_V_9_17=0;
	FALSE_NEVADA_CD42FL3MSK=0;
	NEVADA_COMM_V_9_25=0;
	FALSE_NEVADA_CD42FL4MSK=0;
	ALARM_ALM_LAT_IN_184=0;
	NEVADA_COMM_V_9_25=0;
	FALSE_NEVADA_CD42FL4MSK=0;
	NEVADA_COMM_BR_V_1_45=0;
	ALARM_ALM_LAT_IN_185=0;
	NEVADA_COMM_BR_V_1_45=0;
	SHUTDOWN_DM_GEN_IN_13=0;
	NEVADA_COMM_BR_V_1_49=0;
	ALARM_ALM_LAT_IN_186=0;
	CORE_ANALOG_N2ROTOR=0;
	BENTLY_N2LT3000=0;
	BENTLY_CRF_LO_VAL_IN_1=0;
	CORE_ANALOG_N2ROTOR=0;
	BENTLY_N2GT3590=0;
	BENTLY_CRF_LO_VAL_IN_2=0;
	CORE_ANALOG_N2ROTOR=0;
	BENTLY_N2LT3590=0;
	BENTLY_CRF_HI_VAL_IN_2=0;
	CORE_ANALOG_N2ROTOR=0;
	BENTLY_N2GT3000=0;
	BENTLY_CRF_HI_VAL_IN_3=0;
	CORE_ANALOG_N25SEL=0;
    CORE_ANALOG_N25MAX=0;
	BENTLY_M25MXVSN25_GT=0;
	BENTLY_M25MXVSN25_EQ=0;
	BENTLY_M25MXVSN25_LT=0;
	OUT_BENTLY_CRF_LO_VAL=0;
	B_FORCE_SAR_82_IN=0;
	InicializaArrI(out_SHUTDOWN_DM_IN_1, 5);
	TP_SHUTDOWN_DM_IN_1=6;
	InicializaArrI(out_SHUTDOWN_DM_GEN_IN_13, 5);
    TP_SHUTDOWN_DM_GEN_IN_13=6;

	FALSE_CLUTCH_Y= 0;
	CORE_DIGITAL_FUELON= 0;
	SFC_STEP_RST_AND_ST= 0;
	OUT_RESTRTMASK= 0;
	SFC_STEP_AUXFAN_DLY= 0;
	OUT_CLRPMPOR= 0;
	SPEED_SW_COASTDOWN= 0;
	HYD_STRT_NOT_PMPON= 0;
	OUT_CLUTCHOFF= 0;
	FALSE_SEL_OFF= 0;
	OUT_MASK_ON= 0;
	LATCH_DE1364LAT= 0;
	ALARM_RESET= 0;
	HYD_STRT_LSLL1601SD= 0;
	FALSE_PROB_LAT= 0;
	LATCH1_PROB_LAT= 0;
	OUT_PMP_OFF= 0;
	HYD_STRT_DE1364A= 0;
	HYD_STRT_TRIPPED= 0;
	SFC_STEP_CRNKTMRDN= 0;
	SPEED_SW_N25GT4600= 0;
	SHUTDOWN_FOURHRLOK= 0;
	SHUTDOWN_SDN_CORE= 0;
	SFC_STEP_CRANKSTOP= 0;
	SFC_STEP_ES_1= 0;
	SFC_STEP_WWCRANK_11= 0;
	OUT_KILL_PUMP= 0;
	HYD_STRT_CNK_SEQPRM= 0;
	LATCH_STRT_LATCH= 0;
	TRUE_MASK_PMP= 0;
	OUT_MASK_PMP= 0;
	Nout_AND_STRT_MASK_PMP= 0;
	Nout_out_AND_STRT_MASK_PMP= 0;
	HYD_STRT_DLY_SD= 0;
	HYD_STRT_MOT1615= 0;
	CORE_DIGITAL_RESET= 0;
	HYD_STRT_PSLL1605SD= 0;
	HYD_STRT_PDSH1600SD= 0;
	LATCH1_TRIPPED= 0;
	HYD_STRT_NOTSTART= 0;
	OUT_ST_A_OFFOR= 0;
	SFC_STEP_STRTR_SPD= 0;
	NC_OFFSPDSEL= 0;
	NO_OFFSPDSEL= 0;
	OUT_OFFSPDSEL= 0;
	SFC_STEP_LO_SPD_OR= 0;
	HYD_STRT_PUMPONDLY= 0;
	OUT_MASK_1= 0;
	SFC_STEP_HI_SPD_OR= 0;
	OUT_MASK_2= 0;
	FUEL_SYS_GAS100= 0;
	NC_CSTSPD_SW= 0;
	NO_CSTSPD_SW= 0;
	OUT_CSTSPD_SW= 0;
	SFC_STEP_HIEST_SEL= 0;
	OUT_MASK_3= 0;
	CORE_ANALOG_N25SEL= 0;
	TRUE_LIQ_GAS_2= 0;
	NO_LIQ_GAS_2= 0;
	NC_LIQ_GAS_2= 0;
	OUT_LIQ_GAS_2= 0;
	OUT_N25COMP1= 0;
	OUT_N25COMP2= 0;
	HYD_STRT_MOV_UP_Z= 0;
	LT_N25COMP1= 0;
	GT_N25COMP1= 0;
	LT_N25COMP2= 0;
	GT_N25COMP2= 0;
	OUT_RATE_SEL1= 0;
	OUT_RATE_SEL2= 0;
	OUT_RATE_SEL3= 0;
	HYD_STRT_MASK1= 0;
	HYD_STRT_MASK3= 0;
	OUT_FAIL_OR= 0;
	SPEED_SW_N25LT1200= 0;
	SPEED_SW_N25LT1700= 0;
	OUT_FLSPD_SW= 0;
	HYD_STRT_STRT_LATCH= 0;
	A1_A04_MPU_N25_MAX= 0;
	OUT_N25LT200= 0;
	FALSE_N25LO_MASK= 0;
	OUT_N25LO_MASK= 0;
	OUT_N25LT_DEL= 0;
	SHUTDOWN_SD_RESET= 0;
	OUT_FAILTOACC= 0;
	FL_DEL_TMR= 0;
	CRANK_TMR= 0;
	HYD_STRT_STRT_FAIL1= 0;
	N1N34_BI_LSLL1601= 0;
	N3N41_BI_HYD_ST_AUX= 0;
	N1N34_BI_TSH1602= 0;
	N1N34_BI_TSH1603= 0;
	N1N34_BI_PDSHH1600= 0;
	N1N34_BI_PSLL1605= 0; 
	SFC_STEP_START_INIT= 0;
	SFC_STEP_CRANKING= 0;
	HYD_STRT_LSLL1601AL= 0;
	HYD_STRT_AUXCNTFLT= 0;
	HYD_STRT_AUXCONTDLY= 0;
	HYD_STRT_PDSHH1600D= 0;
	HYD_STRT_MOT1615DLY= 0;
	HYD_STRT_STRTORCRNK= 0;
	InicializaArrI(OUT_OUT_AND_STRT_MASK_PMP, 5);
	TP_out_AND_STRT_MASK_PMP=10;   
	InicializaArrI(out_SFC_STEP_AUXFAN_DLY, 5);
	TP_SFC_STEP_AUXFAN_DLY=10;
	InicializaArrI(out_HYD_STRT_DLY_SD, 5);
	TP_HYD_STRT_DLY_SD=10;
	InicializaArrI(out_HYD_STRT_MOT1615, 5);
	TP_HYD_STRT_MOT1615=12;
	InicializaArrI(out_FL_DEL_TMR, 5);
	TP_FL_DEL_TMR=20;
	InicializaArrI(out_CRANK_TMR, 5);
	TP_CRANK_TMR=30;
	InicializaArrI(out_HYD_STRT_AUXCONTDLY, 5);
	TP_HYD_STRT_AUXCONTDLY=5;
	InicializaArrI(out_HYD_STRT_PDSHH1600D, 5);
	TP_HYD_STRT_PDSHH1600D=5;
	InicializaArrI(out_HYD_STRT_MOT1615DLY, 5);
	TP_HYD_STRT_MOT1615DLY=13;

	FALSE_SPRINT_PDSH62233=0;
	SPRINT_MOT62226=0;
	FALSE_SPRINT_PDSH62233=0;
	NFALSE_SPRINT_PDSH62233=0;
	FALSE_SPRINT_PDSH62233=0;
	SPRINT_MOT62226=0;
	SPRINT_PMPDLYON=0;
	SPRINT_ALARM_IN_1=0;
	FALSE_SPRINT_PSL62227=0;
	SPRINT_PSL62227_AND=0;
	SPRINT_ALARM_IN_2=0;
	FALSE_SPRINT_PSL62227=0;
	SPRINT_PSL62227_AND=0;
	FALSE_SPRINT_PT62234VST=0;
	SPRINT_IO_FLT_ALM_IN_9=0;
	FALSE_SPRINT_PT62270VST=0;
	SPRINT_IO_FLT_ALM_IN_8=0;
	FALSE_SPRINT_PT62250VST=0;
	SPRINT_IO_FLT_ALM_IN_7=0;
	FALSE_SPRINT_PT62269VST=0;
	SPRINT_IO_FLT_ALM_IN_6=0;
	FALSE_SPRINT_PT62243VST=0;
	SPRINT_IO_FLT_ALM_IN_5=0;
	FALSE_SPRINT_PT62235VST=0;
	SPRINT_IO_FLT_ALM_IN_4=0;
	FALSE_SPRINT_PT62241VST=0;
	SPRINT_IO_FLT_ALM_IN_3=0;
	FALSE_SPRINT_PT62239VST=0;
	SPRINT_IO_FLT_ALM_IN_2=0;
	FALSE_SPRINT_PT62231VST=0;
	SPRINT_IO_FLT_ALM_IN_1=0;
	SPRINT_LP_ON_3=0;
	SPRINT_HP_ON_3=0;
	SPRINT_FTENA_MASK_IN_1=0;
	SPRINT_LP_ON_3=0;
	SPRINT_HP_ON_3=0;
	TRUE_SPRINT_FTENA_MASK=0;
	SPRINT_FT62231CMP=0; 
	TRUE_SPRINT_FTENA_MASK=0;
	SPRINT_FT62270CMP=0;
	SPRINT_FT62270CMP=0;
	SPRINTDLY62270AL;
	SPRINTDLY62270SD=0;
	SPRINT_FT62231CMP=0;
	SPRINT_FT62231CMP=0;
	SPRINTDLY6231ALM=0;
	SPRINTDLY6231SD=0;
	SPRINT_FT62234LOG=0;
	SPRINT_FT62234LOG=0;
	SPRINT_FLOW_DLY1=0;
	SPRINT_FLOW_DLY2=0;
    InicializaArrI(out_SPRINT_PMPDLYON,5);
	TP_SPRINT_PMPDLYON=5;
	InicializaArrI(out_SPRINTDLY62270AL,5);
	TP_SPRINTDLY62270AL=5;
	InicializaArrI(out_SPRINTDLY62270SD,5);
	TP_SPRINTDLY62270SD=10;
	InicializaArrI(out_SPRINTDLY6231ALM,5);
	TP_SPRINTDLY6231ALM=5;
	InicializaArrI(out_SPRINTDLY6231SD,5);
	TP_SPRINTDLY6231SD=10;
	InicializaArrI(out_SPRINT_FLOW_DLY1,5);
	TP_SPRINT_FLOW_DLY1=5;
	InicializaArrI(out_SPRINT_FLOW_DLY2,5);
	TP_SPRINT_FLOW_DLY2=5;

	SPRINT_HP_ON_1 = 0;
	SPRINT_HP_ON_2 = 0;
	SPRINT_OFF_1_SF_SEL_2 = 0;
	SPRINT_HP_OFF_2 = 0;
	OUT_EVACUATE_LP_SPRINT_MANIFOLD = 0;
	EVACUATE_LP_SPRINT_MANIFOLD = 0;
	CAGATE = 0;
	SPRINT_SEL_SPRINT = 0;
	SPRINT_SEL_SPRAY = 0;
	SPRINT_EVAC_SW1 = 0;
	OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE = 0;
	WAIT_FOR_XFER_DONE_BEFORE_PURGE = 0;
	SPRINT_GAS_OR_LIQ = 0;
	OUT_PURGE_LP_SPRINT_MANIFOLD = 0;
	PURGE_LP_SPRINT_MANIFOLD = 0;
	SPRINT_LP_OFF_5 = 0;
	SPRINT_LP_PRG_TMR = 0;
	PURGE_FROM_SUPPLY_TO_THE_DRAINS = 0;
	OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS = 0;
	SPRINT_DN_PRG_TMR = 0;
	PURGE_HP_SPRINT_MANIFOLD = 0;
	OUT_PURGE_HP_SPRINT_MANIFOLD = 0;
	SPRINT_HP_PRG_TMR = 0;
	FALSE_SPRINT_TRAN_4_OR = 0;
	SPRINT_OFF_4_T_COND_3 = 0;
	SPRINT_SPRT_READY = 0;
	OUT_SPRINT_SYSTEM_NOT_READY = 0;
	SPRINT_SYSTEM_NOT_READY = 0;
	FALSE_SPRINT_NOTOFF = 0;
	NFALSE_SPRINT_NOTOFF = 0;
	SPRINT_HP_2_LP_1 = 0;
	SPRINT_HP_2_LP_2 = 0;
	SPRINT_HP_2_LP_3 = 0;
	SPRINT_LP_ON_1 = 0;
	SPRINT_LP_ON_2 = 0;
	SPRINT_LP_ON_3 = 0;
	SPRINT_LP_OFF_1_SF_SEL_1 = 0;
	OUT_HOLD_FOR_SPRAY_RAMP_DOWN = 0;
	HOLD_FOR_SPRAY_RAMP_DOWN = 0;
	SPRINT_RAMP_DOWN = 0;
	OUT_HOLD_PRIOR_TO_LP_EVACUATION = 0;
	HOLD_PRIOR_TO_LP_EVACUATION = 0;
	SPRINT_DLY_LPEHLD = 0;
	WAIT_FOR_FUEL_XFER = 0;
	OUT_WAIT_FOR_FUEL_XFER = 0;
	TRUE_WAIT_FOR_FUEL_XFER = 0;
	FUEL_SYS_GAS100 = 0;
	CORE_DIGITAL_FUELOFF = 0;
	SPRINT_LP_XFR_WT_T_COND_1 = 0;
	OUT_HOLD_PRIOR_TO_LP_PURGE = 0;
	HOLD_PRIOR_TO_LP_PURGE = 0;
	SPRINT_DLY_LPPHLD = 0;
	SPRINT_LP_2_HP_1 = 0;
	SPRINT_LP_2_HP_2 = 0;
	SPRINT_LP_2_HP_3 = 0;
	SPRINT_LP_2_HP_4 = 0;
	SPRINT_LP_2_HP_5 = 0;
	SPRINT_HP_ON_3 = 0;
	SPRINT_HP_OFF_1_SF_SEL_1 = 0;
	HOLD_FOR_SPRINT_RAMP_DOWN = 0;
	OUT_HOLD_FOR_SPRINT_RAMP_DOWN = 0;
	DRAIN_HP_SPRINT_PATH = 0;
	OUT_DRAIN_HP_SPRINT_PATH = 0;
	SPRINT_DRAINHP_TM = 0;
	FALSE_SPRINT_NOT_RUNNIN = 0;
	NFALSE_SPRINT_NOT_RUNNIN = 0;
	SPRINT_OFF_4 = 0;
	SPRINT_JIMMY_SW2_NO = 0;
	SPRINT_LP_OFF_3 = 0;
	SPRINT_OFF_1 = 0;
	SPRINT_OFF_2 = 0;
	SPRINT_OFF_3 = 0;
	SPRINT_MASK_PURGE = 0;
	SPRINT_NOTREADY = 0;
	SPRINT_SPRINT_OUT = 0;
	SPRINT_LP_XFR_WT = 0;
	SPRINT_OFF_WT_XFR = 0;
	OUT_SPRINT_OK_TO_XFR = 0;

	N1N10_RTD_TE64030_LATCH_OR= 0;
	N1N10_RTD_TE64030_AI_RTD_L= 0; 
	OUT_A_SW_VENT_TE64030LOG_A_IN_1= 0;
	N1N10_RTD_TE64031_LATCH_OR= 0;
	N1N10_RTD_TE64031_AI_RTD_L= 0; 
	OUT_A_SW_VENT_TE64031LOG_A_IN_1= 0;
	N1N10_RTD_TE64032_LATCH_OR= 0;
	N1N10_RTD_TE64032_AI_RTD_L= 0; 
	OUT_A_SW_VENT_TE64032LOG_A_IN_1= 0;
	N1N10_RTD_TE64033_LATCH_OR= 0;
	N1N10_RTD_TE64033_AI_RTD_L= 0; 
	OUT_A_SW_VENT_TE64033LOG_A_IN_1= 0;
	N1N10_RTD_TE6450_LATCH_OR= 0;
	N1N10_RTD_TE6450_AI_RTD_L= 0;   
	OUT_A_SW_VENT_TE6450LOG_A_IN_1= 0;
	N1N10_RTD_TE6499_LATCH_OR= 0;
	N1N10_RTD_TE6499_AI_RTD_L= 0;  
	OUT_A_SW_VENT_TE6499LOG_A_IN_1= 0;
	OUT_SUB_VENT_AIRTMP_DF_IN=0.0;
	OUT_ABS_VENT_AIRTMPCMPR_IN_1= 0;
	OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2= 0;
	FALSE_VENT_AIRTMPDIFM= 0;
	OUT_AND_VENT_AIRDIFFALM_IN= 0;  
	CORE_DIGITAL_PWR_UP= 0;
	ALARM_RESET= 0;
	VENT_TE64030= 0;
	IO_FLT_TE64030VST= 0;
	VENT_TE64031= 0;
	IO_FLT_TE64031VST= 0;
	VENT_TE64032= 0;
	IO_FLT_TE64032VST= 0;
	VENT_TE64033= 0;
	IO_FLT_TE64033VST= 0;
	VENT_AIRFILTAVG_TC_MON= 0; 
	VENT_AIRAVERAGE_IN= 0; 
	VENT_AIR_AVG_C_IN= 0; 
	OUT_A_CMPR_VENT_T0_GT_10= 0;
	OUT_A_CMPR_VENT_T0_LT_32_IN= 0;
	IO_FLT_TE64030VST= 0;
	VENT_TE64030= 0;
	OUT_A_SW_VENT_INLETT2LSS_IN_1= 0;
	IO_FLT_TE64031VST= 0;
	VENT_TE64031= 0; 
	OUT_A_SW_VENT_INLETT2LSS_IN_2= 0;
	IO_FLT_TE64032VST= 0;
	VENT_TE64032= 0; 
	OUT_A_SW_VENT_INLETT2LSS_IN_3= 0;
	IO_FLT_TE64033VST= 0;
	VENT_TE64033= 0; 
	OUT_A_SW_VENT_INLETT2LSS_IN_4= 0;
	CORE_ANALOG_T2SEL= 0; 
	OUT_LSS_BUS_VENT_INLETT2LSS= 0;
	OUT_A_CMPR_VENT_ICEALM_SW_NO= 0;
	OUT_A_CMPR_VENT_INLET_LT43_IN= 0;
	GENERATOR_GEN_BKRCLS= 0;
	VENT_ANTI_ICE= 0;
	OUT_AND_VENT_ICE_DLY_TRIGGER= 0;
	OUT_A_CMPR_VENT_MOT68330OR_IN_1= 0;
	OUT_OR_VENT_MOT68330_IN= 0;
	DLY_VENT_DAMPER_SW_CTRL= 0;
	OUT_A_SW_VENT_DMPR_RATE_IN= 0;
	VENT_DAMPER_SW_NO= 0;
	VENT_ZV64181_IN= 0;
	OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2= 0;
	VENT_T2SEL= 0;
	OUT_SUB_VENT_T2_T0_CMP_IN_2= 0;
	VENT_ICEALM_MSK_IN_3= 0;
	OUT_A_CMPR_VENT_ICEALM_MSK_IN_1= 0;
	OUT_AND_VENT_ICESYS_ALM_IN= 0;
	OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1= 0;
	OUT_LSS_BUS_VENT_CONDAIR_SW_NO= 0;
	FALSE_VENT_CONDAIR_SW= 0;
	OUT_A_SW_VENT_ICINGLOG_A_IN_2= 0;
	TRUE_VENT_ICEALM_SW= 0;
	OUT_B_SW_VENT_ICING_IN= 0;
	VENT_ICEALM_SW_NC= 0;      
	VENT_G_FNA_TMR= 0; 
	VENT_G_FNB_TMR= 0; 
	VENT_T_FNA_TMR= 0; 
	VENT_T_FNB_TMR= 0; 
	VENT_ENCLPRG= 0; 
	VENT_PRGFLDLY= 0; 
	VENT_PSTCLDNTMR= 0; 
	SHUTDOWN_COOLAIRTMR= 0; 
	SFC_STEP_SYNC_COOL= 0; 
	VENT_G_POSTDLY= 0; 
	VENT_G_FAN_ATM_IN= 0;
	VENT_G_FAN_BTM_IN= 0;
	VENT_T_FAN_ATM_IN= 0;
	VENT_T_FAN_BTM_IN= 0;
	VENT_ENCL_PRGTM_IN= 0;
	VENT_PRGFLTMR_IN= 0;
	VENT_PSTVNET_T_IN= 0;
	VENT_PSTCLDN_T_IN= 0;
	SFC_TIMER_SYNCCL_T_IN= 0;
	VENT_PSTVNET_G_IN= 0;
	OUT_I_CMPR_VENT_PSTCLDNON_IN= 0;
	CORE_DIGITAL_PWR_UP= 0;
	ALARM_RESET= 0;
	VENT_TE6421LAG= 0;
	N2N5_RTD_TE6421= 0;
	VENT_TE6422LAG= 0;
	N2N5_RTD_TE6422= 0;
	VENT_TE6423LAG= 0;
	N2N5_RTD_TE6423= 0;
	VENT_TE6424LAG= 0;
	N2N5_RTD_TE6424= 0;
	VENT_TE6425LAG= 0;
	N2N5_RTD_TE6425= 0;
	VENT_TE6426LAG= 0;
	N2N5_RTD_TE6426= 0;
	OUT_TC_MON_VENT_STATOR_TMP= 0;
	OUT_A_CMPR_VENT_GFANS_OFF_IN_1= 0;
	OUT_A_CMPR_VENT_GFANS_OFF_IN_2= 0;
	OUT_A_CMPR_VENT_STATORGT14= 0;       
	DLY_AUX_SKID_MASKFANON1= 0;
	AUX_SKID_TE64028LOG_B_OUT_1= 0;
	OUT_AND_AUX_SKID_MOT64026_IN= 0;
	AUX_SKID_TE64028LOG_B_OUT_2= 0;
	OUT_AND_AUX_SKID_MOT64027_IN= 0;
	AUX_SKID_TE64028LOG_B_OUT_3= 0;
	OUT_OR_AUX_SKID_DLY_OFF_TRIGGER= 0;
	DLY_AUX_SKID_SOV64083_IN= 0;
	FALSE_AUX_SKID_TE64028VST= 0;
	NFALSE_AUX_SKID_TE64028VST= 0;
	FALSE_GENERATOR_UTIL_SW= 0;
	TRUE_GENERATOR_UTIL_SW= 0; 
	GENERATOR_UTIL_BKRCL= 0;
	OUT_GENERATOR_UTIL_SW_B_SW= 0;
	GENERATOR_GEN_BKRCLS= 0;
	OUT_GENERATOR_PSS_ONENBL_AND= 0; 
	N3N42_BI_UTIL_CLSD= 0; 
	FALSE_GENERATOR_GSO21_OPIN= 0; 
	OUT_GENERATOR_UTILITY_AND= 0;
	A1_A12_BI2_K229= 0; 
	FALSE_GENERATOR_CMD_ISOC= 0; 
	FALSE_GENERATOR_STP_SYNCIN= 0; 
	OUT_GENERATOR_DROOP_AND= 0;
	FALSE_GENERATOR_SEL_DROOP= 0;
	A1_A12_BI1_K67= 0; 
	OUT_GENERATOR_SEL_DROOP_B_SW= 0; 
	GENERATOR_DROOP= 0;
	OUT_GENERATOR_NSDROOP_AND= 0; 
	SHUTDOWN_CDLO= 0;
	GENERATOR_ISOCH= 0;
	OUT_GENERATOR_NSISOCH_AND= 0; 
	A1_A12_BI1_BRKR_FAIL= 0; 
	NA1_A12_BI1_BRKR_FAIL= 0; 
	N3N39_BI_RTRGRNDFLT= 0; 
	SPEED_SW_NSDGT3590= 0;
	OUT_GENERATOR_RTRGNDMSK_AND= 0; 
	N3N39_BI_DIODE_FAIL= 0; 
	NN3N39_BI_DIODE_FAIL= 0; 
	N3N39_BI_AVR_FAULT= 0; 
	NN3N39_BI_AVR_FAULT= 0; 
	N3N40_BI_CUST_86T= 0; 
	NN3N40_BI_CUST_86T= 0; 
	N3N42_BI_IGPS52GTRP_BI_L= 0;
	NN3N42_BI_IGPS52GTRP_BI_L= 0;
	N3N42_BI_IGPSFLTALM_BI_L= 0;
	NN3N42_BI_IGPSFLTALM_BI_L= 0;
	TRUE_GENERATOR_IGPSFDLT12= 0;
	TRUE_GENERATOR_IGPSFDLT12_NO= 0;
	N3N42_BI_IGPSFAIL_BI_L= 0;
	OUT_B_SW_GENERATOR_N_IGPSFAIL_IN= 0;
	NOUT_B_SW_GENERATOR_N_IGPSFAIL_IN= 0;
	SPEED_SW_NSDGT3590= 0;
	N3N39_BI_GEN_EX_LIM_BI_L= 0;
	OUT_AND_GENERATOR_GEN_EX_LIM_IN= 0;
	N3N42_BI_GEN_86TRPL_BI_L= 0;
	NN3N42_BI_GEN_86TRPL_BI_L= 0;
	A1_A12_BI1_TRIP_86_BIO_BI= 0;
	NA1_A12_BI1_TRIP_86_BIO_BI= 0;
	N3N39_BI_AVR_SUMALM_BI_L_NOT= 0;
	SPEED_SW_NSDGT3240= 0;
	OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER= 0;
	DLY_GENERATOR_AVR_ALARM_IN= 0;
	SFC_STEP_RST_AND_ST= 0;
	OUT_OR_GENERATOR_AVR_NOT_ON= 0;
	OUT_OR_GENERATOR_AVR_SDOFF_RST= 0;
	SHUTDOWN_ANY_SD= 0;
	SPEED_SW_NSDLT3060= 0;
	GENERATOR_GEN_BKROPN= 0;
	OUT_AND_GENERATOR_AVR_OFF_IN_1= 0;
	OUT_AND_GENERATOR_AVR_OFF_IN_2= 0;
	SHUTDOWN_SD_CORE= 0;
	SHUTDOWN_SDN_CORE= 0;
	OUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK= 0;
	GENERATOR_AVR_ON_RST= 0;
	GENERATOR_CONDENSING= 0;
	OUT_OR_GENERATOR_EXCTR_ON_IN= 0;
	out_LATCH1_GENERATOR_EAX_ALM_IN= 0;
	DLY_GENERATOR_MASK_2_IN_1= 0;
	GENERATOR_EXCTR_ON= 0;
	N3N39_BI_EXCIT_ALM_BI_L= 0;
	OUT_AND_GENERATOR_EXCIT_ALM_IN= 0;
	N3N18_AI_EAX_AI_420_L= 0;
	OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2= 0;
	OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER= 0;
	DLY_GENERATOR_EAXALMLAT_IN_1= 0;
	CORE_DIGITAL_FUELOFF= 0;
	SHUTDOWN_SD_CORE= 0;
	SHUTDOWN_SDN_CORE= 0;
	SHUTDOWN_STEPIDLE= 0;
	GENERATOR_GEN86TRIPL= 0;
	GENERATOR_GEN86TRIPR= 0;
	SHUTDOWN_DMINTONS= 0;
	SFC_STEP_NORM_3_SFC_STEP= 0;
	ALARM_HMI_STI= 0;
	GENERATOR_STP_2_SYNC= 0;
	SPEED_SW_NSDLT3420= 0; 
	OUT_OR_GENERATOR_BKR_OK_RST= 0;
	SHUTDOWN_NO_SHTDNS= 0;
	SPEED_SW_NSDGT3590= 0;
	N3N42_BI_AUTO_SYNC_BI_L= 0;
	SFC_TIMER_WARMUP_DN= 0;
	SFC_STEP_READY2SYNC_SFC_STEP= 0;
	OUT_AND_GENERATOR_SYNC_ENABL_IN= 0;
	GENERATOR_EXCIT_ALM= 0;
	GENERATOR_GEN_EX_LIM= 0;
	GENERATOR_DIODE_FAIL= 0;
	GENERATOR_AVR_ALARM= 0;
	GENERATOR_AVR_FAULT= 0;     
	OUT_OR_GENERATOR_EX_SUMMARY_IN= 0;
	TRUE_GENERATOR_NOTLSH6834= 0;
	NTRUE_GENERATOR_NOTLSH6834= 0;
	GENERATOR_TE6432=0.0; 
	OUT_A_CMPR_GENERATOR_TE6432_H_IN= 0;
	GENERATOR_TE6433=0.0; 
	OUT_A_CMPR_GENERATOR_TE6433_H_IN= 0;     
	IFACE_SPRINT_C_H2ORAISE= 0;
	OUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN= 0;
	SPRINT_LP_ON_3_SFC_STEP= 0;
	SPRINT_HP_2_LP_1_SFC_STEP= 0;
	SPRINT_HP_2_LP_2_SFC_STEP= 0;
	SPRINT_HP_2_LP_3_SFC_STEP= 0;
	SPRINT_LP_OFF_1_SFC_STEP= 0;
	SPRINT_HP_ON_3_SFC_STEP= 0;
	SPRINT_LP_2_HP_1_SFC_STEP= 0;
	SPRINT_LP_2_HP_2_SFC_STEP= 0;
	SPRINT_LP_2_HP_3_SFC_STEP= 0;
	SPRINT_LP_2_HP_4_SFC_STEP= 0;
	SPRINT_LP_2_HP_5_SFC_STEP= 0;
	SPRINT_HP_OFF_1_SFC_STEP= 0;
	OUT_OR_IFACE_CORE_Z_SPRINTON_IN= 0;
	FALSE_SPRINT_OPTION= 0;
	OUT_ZMINUS1_B_SPRINT_OPTION_IN_2= 0;
	OUT_AND_SPRINT_ENBL_RST= 0;
	OUT_T_FF_SPRINT_SPRINTEN_IN_1= 0;
	OUT_AND_SPRINT_SPRINTEN_IN_2= 0;
	OUT_AND_SPRINT_SPRINTENBL_IN= 0;
	SPRINT_SPRINTENBL= 0;
	NSPRINT_SPRINTENBL= 0;
	CORE_ALM_SPRT1_SPRSDALM1= 0;
	CORE_ALM_SPRT2_SPRSDALM2= 0;
	CORE_ALM_SPRT3_SPRSDALM3= 0;
	OUT_NOR_SPRINT_READY_EN_IN_10= 0;
	IFACE_SPRINT_BRNSPRNTOK= 0;
	IFACE_SPRINT_T2SPRNTOK= 0;
	IFACE_SPRINT_DWBSPRNTOK= 0;
	IFACE_SPRINT_P8THGOOD= 0;
	IFACE_SPRINT_P8THEGOOD= 0;
	IFACE_SPRINT_NSDREFSPRT= 0;
	IFACE_SPRINT_LIQDMDOK= 0;
	TRUE_SPRINT_FUELSYSRDY= 0;
	IFACE_SPRINT_PS3SPROK= 0;
	OUT_AND_SPRINT_SPRINTEN_IN_2= 0;
	FALSE_SPRINT_SIM_SPRT= 0;
	SPRINT_ALLOWTEST= 0;
	OUT_AND_SPRINT_SPRT_READY_T_COND_4= 0;
	FALSE_SPRINT_SIM_SPRAY= 0;
	OUT_AND_SPRINT_SPRT_READY_T_COND_5= 0; 
	SPRINT_HP_ON_2_SFC_STEP= 0;
	SPRINT_LP_ON_2SFC_STEP= 0;
	OUT_OR_SPRINT_FILL_DLY_TRIGGER= 0;
	FALSE_SPRINT_TEST_TIMER= 0;
	OUT_A_SW_SPRINT_FILL_DLY_DLY_TIME= 0;
	SPRINT_PT62234= 0;
	OUT_A_CMPR_SPRINT_FILL_DN_IN_2= 0;
	out_DLY_SPRINT_FILL_DN_IN_1= 0;
	OUT_OR_SPRINT_LP_ON_2_T_COND_3= 0;
	SPRINT_HP_2_LP_3_SFC_STEP= 0;
	SPRINT_HP_OFF_2_SFC_STEP= 0;
	OUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK= 0;
	SPRINT_LP_2_HP_2_SFC_STEP= 0;
	SPRINT_LP_OFF_2_SFC_STEP= 0;
	OUT_OR_SPRINT_LP_E_Z_FEEDBACK= 0;
	SPRINT_LP_2_HP_3_SFC_STEP= 0;
	SPRINT_LP_OFF_3_SFC_STEP= 0;
	SPRINT_OFF_1_SFC_STEP= 0;
	OUT_OR_SPRINT_EVAC_Z_FEEDBACK= 0;
	SPRINT_LP_2_HP_5_SFC_STEP= 0;
	SPRINT_LP_OFF_5_SFC_STEP= 0;
	SPRINT_OFF_2_SFC_STEP= 0;
	OUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK= 0;
	SPRINT_OFF_4_SFC_STEP= 0;
	OUT_OR_SPRINT_JIMMY_SW2_NC= 0;
	FALSE_SPRINT_JIMMY_SPRT= 0;
	OUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK= 0;
	SPRINT_MASK_PURGE= 0;
	SPRINT_LP_2_HP_4_SFC_STEP= 0;
	SPRINT_LP_OFF_4_SFC_STEP= 0;
	OUT_OR_SPRINT_LP_PRG_Z_FEEDBACK= 0;
	SPRINT_TIMERS_IN_1= 0;
	SPRINT_TMR_CNVT_IN_2= 0;
	SPRINT_TIMERS_IN_2= 0;
	SPRINT_TMR_CNVT_IN_3= 0;
	SPRINT_TIMERS_IN_3= 0;
	SPRINT_TMR_CNVT_IN_4= 0;
	SPRINT_TIMERS_IN_4= 0;
	SPRINT_TMR_CNVT_IN_5= 0;
	SPRINT_TIMERS_IN_5= 0;
	SPRINT_TMR_CNVT_IN_6= 0;
	SPRINT_TIMERS_IN_6= 0;
	SPRINT_TMR_CNVT_IN_7= 0;
	SPRINT_TIMERS_IN_7= 0;
	SPRINT_TMR_CNVT_IN_8= 0;
	SPRINT_TIMERS_IN_8= 0;
	SPRINT_TMR_CNVT_IN_9= 0;
	SPRINT_TIMERS_IN_9= 0;
	SPRINT_TMR_ANGL= 0;
	SPRINT_TMR_ANGL_IN_1= 0;      
	IFACE_SPRINT_C_LPSPRTEN= 0;
	SPRINT_SPRINTENBL= 0;
	SPRINT_HP_SPRNTOK= 0;
	OUT_AND_SPRINT_SPRT_READY_T_COND_2= 0;
	SPRINT_C_LPSPRTEN= 0;
	OUT_AND_SPRINT_SPRT_READY_T_COND_3= 0;
	SPRINT_LP_OFF_2_TRAN_2= 0;
	SPRINT_LP_OFF_3_TRAN_2= 0;
	SPRINT_LP_OFF_4_TRAN_2= 0;
	SPRINT_LP_OFF_5_TRAN_2= 0;
	SPRINT_HP_OFF_2_TRAN_2= 0;
	SPRINT_OFF_1_TRAN_2= 0;
	SPRINT_OFF_2_TRAN_2= 0;
	SPRINT_OFF_3_TRAN_2= 0;
	SPRINT_OFF_4_TRAN_2= 0; 
	OUT_OR_SPRINT_LP_ON_1_SF_SEL_2= 0; 
	SPRINT_SDLATCHLP= 0;
	CORE_DIGITAL_FUELOFF= 0;
	SPRINT_SPRT_OFF= 0;
	SPRINT_OFF_MASK= 0;
	SPRINT_TNK_VACSW= 0;
	CORE_ALM_SPRT1_SPRSDALM1= 0;
	CORE_ALM_SPRT2_SPRSDALM2= 0;
	CORE_ALM_SPRT3_SPRSDALM3= 0;
	OUT_OR_SPRINT_TRANSOFF_IN_1= 0;
	SPRINT_NOTTEST= 0;
	OUT_AND_SPRINT_HP_2_LP_1_T_COND_1= 0;
	SPRINT_LP_2_HP_1_TRAN_2= 0;
	SPRINT_LP_2_HP_2_TRAN_2= 0;
	SPRINT_LP_2_HP_3_TRAN_2= 0;
	SPRINT_LP_2_HP_4_TRAN_2= 0;
	SPRINT_LP_2_HP_5_TRAN_2= 0;
	SPRINT_HP_ON_3_TRAN_2= 0;
	SPRINT_LP_OFF_1_TRAN_2= 0;
	SPRINT_HP_OFF_1_TRAN_2= 0;
	OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1= 0;
	SPRINT_NOTREADY_TRAN_1= 0;
	OUT_S1_ET1_SPRINT_ACTIVE_IN_1= 0;
	SPRINT_TRANSOFF= 0;
	SPRINT_SIM_SPRT= 0;
	SPRINT_SIM_SPRAY= 0;
	SPRINT_SPRT_READY_TRAN_5= 0;
	OUT_S1_ET2_SPRINT_ACTIVE_IN_2= 0; 
	TRUE_SPRINT_PSL_OK= 0;  
	SPRINT_HP_ON_2_TRAN_2= 0;
	OUT_S1_ET3_SPRINT_FILL_OR_IN_2= 0; 
	OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2= 0;
	SPRINT_N_LPSPRTEN= 0;
	SPRINT_H2OXFRDONE= 0;
	OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3= 0; 
	SPRINT_DLY_HPHLD= 0;
	OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4= 0; 
	SPRINT_FILL_DN= 0;
	SPRINT_DRAINHP_TM= 0;
	OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1= 0; 
	FIN_DE_PROCESO= 0;       
	SPRINT_N_LPSPRTEN= 0;
	FALSE_SPRINT_HP_SPRNTOK= 0;
	OUT_AND_SPRINT_TRANS_OFF_IN_4= 0;
	SPRINT_LP_OFF_2_TRAN_1= 0;
	SPRINT_LP_OFF_3_TRAN_1= 0;
	SPRINT_LP_OFF_4_TRAN_1= 0;
	SPRINT_LP_OFF_5_TRAN_1= 0;
	SPRINT_HP_OFF_2_TRAN_1= 0;
	SPRINT_OFF_1_TRAN_1= 0;
	SPRINT_OFF_2_TRAN_1= 0;
	SPRINT_OFF_3_TRAN_1= 0;
	SPRINT_OFF_4_TRAN_1= 0;
	OUT_OR_SPRINT_HP_ON_1_SF_SEL_3= 0;
	SPRINT_LP_ON_3_TRAN_2= 0;
	SPRINT_HP_2_LP_1_TRAN_2= 0;
	SPRINT_HP_2_LP_2_TRAN_2= 0;
	SPRINT_HP_2_LP_3_TRAN_2= 0;
	SPRINT_LP_OFF_1_TRAN_1= 0;
	SPRINT_HP_OFF_1_TRAN_1= 0;
	OUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1= 0;
	SPRINT_JIMMY_SPRT= 0;
	SPRINT_EVAC_TMR= 0;
	TRUE_SPRINT_EVAC_SW1= 0;
	OUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3= 0;
	SPRINT_HP_2_LP_1_TRAN_1= 0;
	SPRINT_HP_2_LP_2_TRAN_1= 0;
	SPRINT_HP_2_LP_3_TRAN_1= 0;
	SPRINT_LP_ON_1_TRAN_1= 0;
	SPRINT_LP_ON_2_TRAN_1= 0;
	SPRINT_LP_ON_3_TRAN_1= 0;
	OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1= 0;
	FUEL_SYS_GAS100= 0;
	CORE_DIGITAL_FUELOFF= 0;
	OUT_OR_SPRINT_LP_XFR_WT_T_COND_1= 0;
	SPRINT_LP_2_HP_1_TRAN_1= 0;
	SPRINT_LP_2_HP_2_TRAN_1= 0;
	SPRINT_LP_2_HP_3_TRAN_1= 0;
	SPRINT_LP_2_HP_4_TRAN_1= 0;
	SPRINT_LP_2_HP_5_TRAN_1= 0;
	SPRINT_HP_ON_3_TRAN_1= 0;
	OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1= 0;
	SPRINT_HP_ON_1_TRAN_1= 0;
	SPRINT_HP_ON_2_TRAN_1= 0;
	OUT_OR_SPRINT_OFF_1_SF_SEL_2= 0;
	SPRINT_HP_PRG_TMR= 0;
	FALSE_SPRINT_TRAN_4_OR= 0;
	OUT_OR_SPRINT_OFF_4_T_COND_3= 0;
	SPRINT_OFF_4_SFC_STEP= 0;
	FALSE_SPRINT_NOT_RUNNIN= 0;
	OUT_AND_SPRINT_JIMMY_SW2_NO= 0;
	SPRINT_HP_OFF_2_SFC_STEP= 0;
	SPRINT_LP_OFF_3_SFC_STEP= 0;
	SPRINT_LP_OFF_5_SFC_STEP= 0;
	SPRINT_OFF_1_SFC_STEP= 0;
	SPRINT_OFF_2_SFC_STEP= 0;
	SPRINT_OFF_3_SFC_STEP= 0;
	SPRINT_MASK_PURGE= 0;
	SPRINT_NOTREADY_SFC_STEP= 0;
	OUT_OR_SPRINT_SPRINT_OUT_IN= 0;
	SPRINT_SEL_SPRINT= 0;
	SPRINT_SEL_SPRAY= 0;
	SPRINT_RAMP_DOWN_P_LIM_1= 0;
	SPRINT_DLY_LPEHLD= 0;
	TRUE_EVACUATE_LP_SPRINT_MANIFOLD= 0;
	SPRINT_DLY_LPPHLD= 0;
	SPRINT_LP_PRG_TMR= 0;
	SPRINT_LP_OFF_5_TRAN_3= 0;
	SPRINT_DRAINHP_TM= 0;
	SPRINT_HP_OFF_2_TRAN_3= 0;
	SPRINT_EVAC_SW1= 0;
	SPRINT_GAS_OR_LIQ= 0;
	SPRINT_DN_PRG_TMR= 0;
	SPRINT_SPRT_READY_TRAN_1= 0;
	SPRINT_TRANSOFF= 0;
	OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5= 0;
	OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2= 0;
	OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2= 0;
	OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1= 0;
	OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2= 0;
	OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2= 0;
	OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12= 0;
	OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2= 0;
	OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3= 0;
	OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2= 0;
	OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3= 0;
	OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK= 0;
	OUT_S3_ET5_SPRINT_PURGE_HP_IN_2= 0;
	OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3= 0;
	FALSE_SPRINT_TEST_SPRT= 0;
	SFC_STEP_OUTOFOP= 0;
	OUT_SPRINT_ALLOWTEST_AND= 0; 
	NOUT_SPRINT_ALLOWTEST_AND= 0; 
	SPRINT_SPRT_READY= 0;
	SPRINT_NOTREADY= 0;
	SPRINT_LP_ON_1= 0;
	SPRINT_LP_OFF_1= 0;
	SPRINT_LP_OFF_3= 0;
	SPRINT_LP_OFF_5= 0;
	SPRINT_HP_ON_1= 0;
	SPRINT_HP_OFF_1= 0;
	SPRINT_HP_OFF_2= 0;
	SPRINT_OFF_1= 0;
	SPRINT_OFF_2= 0;
	SPRINT_OFF_3= 0;
	SPRINT_MASK_PURGE= 0;
	OUT_SPRINT_ACT_OR_INI_NOR= 0;
	HMI_BO_BW_V_125= 0;
	FALSE_SPRINT_DEC_OR= 0;
	OUT_OR_SPRINT_LOWER_AND_IN_2= 0;
	IFACE_CORE_Z_MANMODE= 0;
	OUT_AND_SPRINT_MAN_RAMP_P_SEL_2= 0;
	HMI_BO_BW_V_126= 0;
	FALSE_SPRINT_INC_OR= 0;
	OUT_OR_SPRINT_RAISE_AND_IN_2= 0;
	OUT_AND_SPRINT_MAN_RAMP_P_SEL_3= 0;
	SFC_STEP_OUTOFOP_SFC_STEP= 0;
	FALSE_SPRINT_MAN_STRK= 0;
	OUT_AND_SPRINT_CNTL_SW_CTRL= 0;
	OUT_I_SW_SPRINT_CNTRL_OUT_SEL= 0;
	SPRINT_ACT_OR_INI= 0;
	OUT_A_SW_SPRINT_MINFLOW_IN_1= 0;
	SPRINT_HP_ON_3_SFC_STEP= 0;
	OUT_A_SW_SPRINT_FLOW_LIM_IN_2= 0;
	SPRINT_ALLOWTEST= 0;
	SPRINT_H2ODMDSW_NC= 0;
	OUT_A_SW_SPRINT_SPRINT_PID_DB_SP= 0;
	OUT_O_SHOT_SPRINT_DOWN_OR_IN_1= 0;
	SPRINT_NOTREADY_SFC_STEP= 0;
	OUT_OR_SPRINT_SPRT_DOWN_IN= 0;
	ice1= 0;
	ice2= 0;
	LimXI= 0;
	LimXS= 0;
	LimYI= 0;
	LimYS= 0;
	InicializaArrI(out_DLY_VENT_DAMPER_SW_CTRL, 5);
	TP_DLY_VENT_DAMPER_SW_CTRL=5;
	InicializaArrI(out_DLY_VENT_ICEALM_MSK_IN_3, 5);
	TP_VENT_ICEALM_MSK_IN_3=5;
	InicializaArrI(out_DLY_AUX_SKID_MASKFANON1, 5);
	TP_DLY_AUX_SKID_MASKFANON1=5;
	InicializaArrI(out_DLY_AUX_SKID_SOV64083_IN, 5);
	TP_DLY_AUX_SKID_SOV64083_IN=60;
	InicializaArrI(out_DLY_GENERATOR_AVR_ALARM_IN, 5);
	TP_DLY_GENERATOR_AVR_ALARM_IN=5;
	InicializaArrI(LATCH_GENERATOR_RESET85PCT_IN_3, 5);
    InicializaArrI(out_LATCH_GENERATOR_RESET85PCT_IN_3, 5);
	InicializaArrI(LATCH_R_GENERATOR_COND_OR85_IN_1, 5);
	InicializaArrI(out_LATCH_R_GENERATOR_COND_OR85_IN_1, 5);
	InicializaArrI(out_DLY_GENERATOR_MASK_2_IN_1, 5);
	TP_DLY_GENERATOR_MASK_2_IN_1=5;
	InicializaArrI(out_DLY_GENERATOR_EAXALMLAT_IN_1, 5);
	TP_DLY_GENERATOR_EAXALMLAT_IN_1=2;
	InicializaArrI(LATCH_GENERATOR_K85_IN, 5);
	InicializaArrI(out_LATCH_GENERATOR_K85_IN, 5);

	SFC_STEP_START_INIT= 0;
	SFC_STEP_MOTOR_6= 0;
	SHUTDOWN_NO_SHTDNS= 0;
	FUEL_SYS_START_INI= 0;
	FUEL_SYS_HOT_START= 0;
	FUEL_SYS_UNITREADY= 0;
	FUEL_SYS_START_OR= 0;
	FUEL_SYS_GAS_START= 0;
	FUEL_SYS_GAS_STRTOS_ONE_SHOT= 0;
	FUEL_SYS_HOLD_TRAN_1= 0;
	FUEL_SYS_GASSTRT_06_TRAN_2= 0;        
	FUEL_READY_TO_START__AND_XFER= 0;
	FUEL_SYS_CHOPFUEL= 0;
	WAIT_FOR_PURGE_TIMER_DONE= 0;
	SFC_STEP_HI_SPDSEL2= 0;
	ACCEL_TO_LITE_OFF= 0;
	TRUE_ACEL_TO_LITE_OFF= 0;
	VERIFY_FUEL_VALVE_AT_MIN_POSITIN= 0;
	ACTIVATE_IGNITORS= 0;
	START_PERM_VMIN_STOP= 0;
	FUEL_SYS_IGN_DLY= 0;
	FUEL_SYS_IGNITORS= 0;
	FUEL_SYS_IGNITORDLY_DELAY= 0;
	out_FUEL_SYS_IGNITORDLY_DELAY[5];
	TP_FUEL_SYS_IGNITORDLY_DELAY=5;
	FUEL_SYS_ZS6204OPEN= 0;
	FUEL_SYS_ZS6249OPEN= 0;
	FUEL_SYS_BLKS_OPN= 0;
	OPN_VNT_SOV6208= 0;
	WAIT_FOR_LITE_OFF= 0;
	CORE_DIGITAL_LITEOFF= 0;
	FUEL_SYS_SOV6249= 0;
	FUEL_SYS_GASNOT_ON= 0;
	FUEL_SYS_N_CHOPFUEL= 0;
	FUEL_SYS_DACTGAS= 0;
	DE_ACTIVATE_GAS_FUEL= 0;
	FUEL_SYS_FUEL_RDY_TRAN_1= 0;
	FUEL_SYS_G_MASKOFF2= 0;
	InicializaArrI(out_FUEL_SYS_GAS_STRTOS_ONE_SHOT, 1);//Salida del timer
	TP_FUEL_SYS_GAS_STRTOS_ONE_SHOT=1;//Parametrizacion del timer (seg.)
	InicializaArrI(out_FUEL_SYS_IGNITORDLY_DELAY, 5);
	TP_FUEL_SYS_IGNITORDLY_DELAY=5;
	N1N1_AI_PT6121A_AI_420_L=0;
	TLO_PT6121A_A_NAME=0;
	TLO_PLUBLT15A_A_COMPARE=0;
	CORE_ANALOG_N25SEL=0;
	TLO_N25LT7800_A_COMPARE=0;
	TLO_N25GT4500_A_COMPARE=0;
	TLO_PLUBLT6A_A_COMPARE=0;
	IFACE_CNFG_LUBPRS_OPT_B_NAME=0;
	TLO_USE_2NDRNG_NOT=0;
	N1N1_AI_PT6121B_AI_420_L=0;
	TLO_PT6121B_A_NAME=0;
	TLO_PLUBLT15B_A_COMPARE=0;
	TLO_PLUBLT6B_A_COMPARE=0;
	N1N1_AI_PT6121B_LATCH_OR=0;
	N1N1_AI_PT6121A_LATCH_OR=0;
	TLO_PT6121AOK_NOT=0;
	TLO_N25GT7800_NOT=0;
	TLO_PT6121BOK_NOT=0;
	TLO_PLBLT15ENA_AND=0;
	TLO_PLUBLT6ENA_AND=0;
	TLO_PLBLT15ENB_AND=0;
	TLO_PLUBLT6ENB_AND=0;
	TLO_SD1_A_DLY=0;
	TLO_SD2_A_DLY=0;
	TLO_SD1_B_DLY=0;
	TLO_SD2_B_DLY=0;
	TLO_PT6121ASD1_B_NAME=0;
	TLO_PT6121ASD2_B_NAME=0;
	TLO_PT6121BSD1_B_NAME=0;
	TLO_PT6121BSD2_B_NAME=0;
	PLUBSEL=0;
	PLUB_AB_SENSORS_HI_DIFFERENCE=0;
	PLUB_AB_SENSORS_FAILED=0;
	TURB_LUBE_OIL_BOTH_SNSR_FLT=0;
	N1N6_RTD_TE6128A_AI_RTD_L=0;
	TLO_TE6128A_A_NAME=0;
	N1N6_RTD_TE6128A_LATCH_OR=0;
	N1N6_RTD_TE6128B_AI_RTD_L=0;
	N1N6_RTD_TE6128B_LATCH_OR=0;
	SPEED_SW_N25GT6050_A_COMPARE=0;
	N1N31_BI_PSH6117_BI_L=0;
	TLO_USE_PSCV_B_NAME=0;
	N1N1_AI_PT6122_AI_420_L=0;
	TLO_USE_PSCVSW_B_NAME=0;
	TRUE_USE_CORE=0;
	FALSE_TLO_PSCVALMOVR=0;
	TLO_TLUBLT90A_A_COMPARE=0;
	TLO_TE6128A_OK_NOT=0;
	TLO_TE6218AMSK_AND=0;
	TLO_TLUB_GT90_NOR=0;
	TLO_TLUB_AND2_AND=0;
	TLO_TLUB_AND1_AND=0;
	TLO_TLUBLOAL2_B_NAME=0;
	TLO_TLUBLOAL1_B_NAME=0;
	TLO_TE6128B_A_NAME=0;
	TLO_TLUBLT90B_A_COMPARE=0;
	TLO_USE_CORE_B_NAME=0;
	TLO_TE6128B_OK_NOT=0;
	TLO_TE6218BMSK_AND=0;
	TLO_USE_SYNC_NOT=0;
	TLO_XN25DLY=0;
	TLO_PSH6117NT_NOT=0;
	TLO_PSCVALMOVR_B_SW=0;
	PSH6117_B_NAME=0;
	TLO_PSH6117ALM_B_NAME=0;
	TLO_PSCVMASK_AND=0;
	TLO_PSCVALM_SW_A_SW=0;
	TLO_PSCV_SW1_A_SW=0;
	TLO_PSCV_SW=0;
	TLO_PSCV=0;
	TLO_PSCV_SW_A_SW=0;
	TLO_PSCV_A_NAME=0;
	N1N34_BI_TSL6113_BI_L=0;
	TLO_TSL6113_B_NAME=0;
	TLO_TSL6113NT_NOT=0;
	TLO_TSL6113ALM_B_NAME=0;
	CORE_ANALOG_N25SEL=0;
	TLO_N25GT4600_A_COMPARE=0;
	TLO_MOT6135_B_NAME=0; 
	N1N31_BI_PDSH6146_BI_L=0;
	TLO_PDSH6146_B_NAME=0; 
	NTLO_PDSH6146_B_NAME=0;
	TLO_PDSH6146NT_NOT=0;
	TLO_PDSH6146D_DELAY=0;//Entrada del timer
	TLO_PDSH6146AL_B_NAME=0;
	N1N31_BI_PDSH6148_BI_L=0;
	TLO_PDSH6148B_NAME=0;
	TLO_PDSH6148NT_NOT=0;//Declaracion para el timer TLO_PDSH6148D_DELAY de tipo TOND
    TLO_PDSH6148D_DELAY=0;//Entrada del timer
	TLO_PDSH6148AL_B_NAME=0;//Declaracion de variable global para uso de boton N1N34_BI_LSL6102_BI_L
	N1N34_BI_LSL6102_BI_L=0;
	TLO_LSL6102_B_NAME=0;
	TLO_LSL6102NT_NOT=0;
	TLO_LSL6102ALM_B_NAME=0;
	TLO_HE6104_B_NAME=0;//Declaracion de variable global para uso de boton N1N34_BI_PDSH6120_BI_L
    N1N34_BI_PDSH6120_BI_L=0;
	TLO_PDSH6120_B_NAME=0;
	TLO_PDSH6120NT_NOT=0;
	TLO_PDSH6120D_DELAY=0;//Entrada del timer
	TLO_PDSH6120AL_B_NAME=0;//Declaracion de variable global para uso de boton N1N34_BI_PDSHH6144_BI_L
	N1N34_BI_PDSHH6144_BI_L=0;
	TLO_PDSHH6144_B_NAME=0;//Declaracion de variable global para uso de boton TRUE_PDSHH_6144
	TRUE_PDSHH_6144=0;
	TRUE1_PDSHH_6144=0;
	TLO_PDSHH_6144_B_SW=0;
	TLO_PDSHH6144N_NOT=0;
	TLO_PDSHH6144D_DELAY=0;//Entrada del timer
	TLO_PDSHH6144S_B_NAME;
	N1N34_BI_PDSH6118_BI_L=0;//Declaracion de variable global para uso de boton N1N34_BI_PDSH6118_BI_L
	TLO_PDSH6118_B_NAME=0;
	TLO_PDSH6118NT_NOT=0;
	TLO_PDSH6118D_DELAY=0;//Entrada del timer
	TLO_PDSH6118AL_B_NAME=0;
	N1N34_BI_PDSHH6119_BI_L=0;
	TLO_PDSHH6119_B_NAME=0;
	TLO_PDSHH_6119_B_SW=0;
	TRUE_PDSHH_6119=0;//Declaracion de variable global para uso de boton TRUE_PDSHH_6119
	TRUE1_PDSHH_6119=0;
	TLO_PDSHH6119N_NOT=0;//Declaracion para el timer TLO_PDSHH6119D_DELAY de tipo TOND
	TLO_PDSHH6119D_DELAY=0;//Entrada del timer
	TLO_PDSHH6119S_B_NAME=0;
	CORE_ANALOG_TLUBSEL=0;
	TLO_TLUBSEL_A_NAME=0;
	TLO_TLUB_GT100_B_NAME=0;
	TLO_TLUBGT100_A_COMPARE=0;
	InicializaArrI(out_TLO_SD1_A_DLY, 5);//Salida del timer
	TP_TLO_SD1_A_DLY=.160;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_SD2_A_DLY, 5);//Salida del timer
	TP_TLO_SD2_A_DLY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_SD1_B_DLY, 5);//Salida del timer
	TP_TLO_SD1_B_DLY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_SD2_B_DLY, 5);//Salida del timer
	TP_TLO_SD2_B_DLY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_XN25DLY, 5);//Salida del timer
	TP_TLO_XN25DLY=5;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_PDSH6146D_DELAY, 5);//Salida del timer
	TP_TLO_PDSH6146D_DELAY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_PDSH6148D_DELAY, 5); //Salida del timer
	TP_TLO_PDSH6148D_DELAY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_PDSH6120D_DELAY, 5);//Salida del timer
	TP_TLO_PDSH6120D_DELAY=10;//Parametrizacion del timer (seg.)X
	InicializaArrI(out_TLO_PDSHH6144D_DELAY, 5);//Salida del timer
	TP_TLO_PDSHH6144D_DELAY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_PDSH6118D_DELAY, 5);//Salida del timer
	TP_TLO_PDSH6118D_DELAY=10;//Parametrizacion del timer (seg.)
	InicializaArrI(out_TLO_PDSHH6119D_DELAY, 5);//Salida del timer
	TP_TLO_PDSHH6119D_DELAY=10;//Parametrizacion del timer (seg.)

	VENT_TE6421LALM = 0;
	VENT_TE6422LALM = 0;
	VENT_TE6423LALM = 0;
	VENT_TE6424LALM = 0;
	VENT_TE6425LALM = 0;
	VENT_TE6426LALM = 0;
	TLO_TSL6113 = 0;
    GLUB_LT6045_OK = 0;
    GLUB_TNKSTRTPRM = 0;
	GLUB_PSH6089ALM = 0;
	START_PERM_PSH6089_OK = 0;
	START_PERM_STATOR_OK = 0;
	START_PERM_STATOR_PRM = 0;
	FIN_FAN_FANS_OK = 0;
	VENT_STOPFANS = 0;
	START_PERM_FANS_MSK = 0;
	START_PERM_FANS_OK = 0;
	N3N40_BI_LOC_REM = 0;
	FALSE_FAST_START = 0;
	OUT_FAST_START = 0;
	FALSE_FST_ST_OR = 0;
	OUT_FST_ST_OR = 0;
	SPEED_SW_N25LT1000 = 0;
	OUT_FASTSTRENB = 0;
	XNSD_REF_NPTSTPT_MOVING = 0;
	IFACE_CORE_Z_SWGRID = 0;
	OUT_MVGDNRST = 0;
	XNSD_REF_NPTMAXPOS = 0;
	SHUTDOWN_ANY_SD = 0;
	OUT_FASTSTRDIS = 0;
    N3N40_BI_VIB_SYSMAL = 0;
    START_PERM_VIB_SYSMAL = 0;
	START_PERM_FASTSTART = 0;
	A1_A06_AIO_BE6822 = 0;
	A1_A06_AIO_BE6823 = 0;
	START_PERM_FLMDTHLTHY = 0;
	START_PERM_FLMDT_OK = 0;
	A2_A12_GR1_FLT = 0;
	A2_A12_GR2_FLT = 0;
	A2_A12_GR3_FLT = 0;
	OUT_GH_HDWR_OK = 0;
	FALSE_B_SW_REV = 0;
	TRUE_B_SW_REV = 0;
	START_PERM_B_SW_REV = 0;
	START_PERM_LH_OK = 0;
	A1_A04_MPU_FLT = 0;
	A1_A06_AIO_FLT = 0;
	A1_A07_AIO_FLT = 0;
	A1_A08_D0_FLT = 0;
	A1_A09_ACT_FLT = 0;
	A1_A10_ACT_FLT = 0;
	A1_A12_BI1_FLT = 0;
	A1_A12_BI2_FLT = 0;
	A1_A12_BI3_FLT = 0;
	A1_A12_BO1_FLT = 0;
	A1_A12_BO2_FLT = 0;
	A2_A03_ACT_FLT = 0;
	TIMERS_TEST_TRUE = 0;
    HYD_STRT_LSLL1601 = 0;
    N3N40_BI_CUST_PERM = 0;
	A2_A04_PI_FLT = 0;
	FALSE_PI_PERMSW1 = 0;
	OUT_PI_PERMSW1 = 0;
	A2_A05_PI_FLT = 0;
	FALSE_PI_PERMSW2 = 0;
	OUT_PI_PERMSW2 = 0;
	A2_A06_DVR_FLT = 0;
	A2_A12_GR1_FLT = 0;
	START_PERM_M_HDWR_OK = 0;
	START_PERM_MNET_OK = 0;
	SFC_STEP_RUNNING = 0;
	GLUB_HICNKACTIV = 0;
	SFC_STEP_LOSPD_OR = 0;
	GLUB_WW_ACTIVE = 0;
	OUT_OFFRUN_EN = 0;
	OP_INTRFC_OFF_RUN = 0;
	OUT_OFFRUNMASK = 0;
	FALSE_OFFRUN_FF = 0;
	B,C,E,F,G = 0;
	START_PERM_T48LT200 = 0;
    START_PERM_T3LT200 = 0;
	START_PERM_OFF_RUN = 0;
	WTR_WASH_WW_ACTIVE = 0;
    ENGMODE_CRANKING = 0;
    TEMP_SW_T48LT200 = 0;
    TEMP_SW_T3LT200 = 0;
	HYD_STRT_TSL1603 = 0;
	TRUE_N_TMPOFF2 = 0;
	START_PERM_N_TMPOFF2 = 0;
	START_PERM_HYTEMP_L = 0;
	START_PERM_HYDTNKLVL = 0;
	START_PERM_HYD_ST_OK = 0;
	CORE_ANALOG_T48SEL = 0;
	START_PERM_T48_LT400 = 0;   
	FUEL_SYS_TGS_GT_275 = 0;
	CORE_ALARM_ALMCORE154 = 0;
	START_PERM_TE6232_SW = 0;
	FALSE_START_PERM_TE6232_SW = 0;
	TRUE_START_PERM_TE6232_SW=0;
	START_PERM_TE6232_OK = 0;
	IFACE_HDWR_GMVPDRFLT = 0;
	IFACE_HDWR_GMVIDRFLT = 0;
	IFACE_HDWR_GMVODRFLT = 0;
	START_PERM_DRVRS_OKOR = 0;
	START_PERM_FUELDVR_OK = 0;
	GLUB_TE6021PERM = 0;
	GLUB_TE6023PERM = 0;
	START_PERM_GLUBTMP_OK = 0;
	SHUTDOWN_SDN_CORE = 0;
	SFC_STEP_NOT_NS = 0;
	START_PERM_SDNNS_OK = 0;
	CORE_DIGITAL_GMVIVLVSD = 0;
	CORE_DIGITAL_GMVPVLVSD = 0;
	CORE_DIGITAL_GMVOVLVSD = 0;
	START_PERM_GAS_OK_IN_1 = 0;
	A2_A06_DVR_FCV62107MN = 0;
	A2_A06_DVR_FCV62108MN = 0;
	A2_A06_DVR_FCV62109MN = 0;
	START_PERM_GAS_OK_IN_2 = 0;
	START_PERM_VMIN_STOP = 0;
	FUEL_SYS_PGS_GT_200 = 0;
	FUEL_SYS_PGS_LT_700 = 0;
	START_PERM_FUELPRSOK = 0;
	FUEL_SYS_ZS6204 = 0;
	FUEL_SYS_ZS6249 = 0;
	START_PERM_SOV_CLSD = 0;  
	XN25_REF_XN25MINPOS = 0;
	XNSD_REF_NPTSYNCPOS = 0;
	SFC_STEP_MOTOR_5 = 0;
	START_PERM_N25LT300 = 0;
	GLUB_DC_OFF = 0;
	START_PERM_NO_SHTDNS = 0;
	START_PERM_VMIN_STOP = 0;
	OUT_REFSATMIN = 0;
	OUT_N25LT300SW = 0;
	START_PERM_FUELPRSOK = 0;
	START_PERM_LOK_4HROFF = 0;
	START_PERM_CAL_MODE = 0;
	START_PERM_TLUB_OK = 0;
	START_PERM_G_STATUSOK = 0;
	START_PERM_STATOR_PRM = 0;
	START_PERM_HYD_ST_OK = 0;
	START_PERM_FUELSYSOK = 0;
	START_PERM_GLUBTNKTMP = 0;
	START_PERM_SOV_CLSD = 0;
	START_PERM_FORCE_MODE = 0;
	START_PERM_FUELDVR_OK = 0;
	START_PERM_TLO_TNKLVL = 0;
	START_PERM_T48_LT400 = 0;
	START_PERM_CUSTPRM = 0;
	START_PERM_MNET_OK = 0;
	START_PERM_LH_OK = 0;
	START_PERM_GC_OK = 0;
	START_PERM_FANS_OK = 0;
	START_PERM_VIB_SYS_OK = 0;
	START_PERM_WWNOTACTIV = 0;
	START_PERM_OK2START = 0;
	SFC_STEP_RUNNING = 0;
	START_PERM_GLUBTNKLVL = 0;
	START_PERM_FLMDT_OK = 0;
	START_PERM_OFF_RUN = 0;
	START_PERM_T_READY = 0;
	START_PERM_MNET_OK = 0;
	START_PERM_LH_OK = 0;
	START_PERM_HYD_ST_OK = 0;
	START_PERM_WW_OFF = 0;
	START_PERM_CRANK_OFF = 0;
	START_PERM_FORCE_MODE = 0;
	START_PERM_N25LT300 = 0;
	START_PERM_SDNNS_OK = 0;
	START_PERM_TLO_TNKLVL = 0;
	START_PERM_LOK_4HROFF = 0;
	START_PERM_WWNOTACTIV = 0;
	START_PERM_STATOR_PRM = 0;
	START_PERM_TLUB_OK = 0;
	START_PERM_SOV_CLSD = 0;
	START_PERM_VMIN_STOP = 0;
	START_PERM_GLUBTNKLVL = 0;
	START_PERM_GLUBTNKTMP = 0;
	START_PERM_OFF_RUN = 0;
	START_PERM_C_READY = 0;
    WTR_WASH_LS6543 = 0;
    START_PERM_WW_PERM = 0;
	TRUE_START_PERM_G_STATUSOK = 0;
	TRUE_START_PERM_SFTY_ST_OK = 0;
	FUEL_SYS_FUEL_RDY = 0;
	CORE_DIGITAL_CALMODE = 0;
	A_B_FORCE_FRC_ST_PRM = 0;
	SPEED_SW_N25LT300 = 0;
	SHUTDOWN_NO_SHTDNS = 0;
	TLO_LSL6102 = 0;
	WTR_WASH_WW_NTACTIV = 0;
	START_PERM_SFTY_ST_OK = 0;
	FUEL_SYS_GAS100 = 0;
	START_PERM_FUEL_SEL = 0;
    SHUTDOWN_FOURHRLOK = 0;	
	TRUE_START_PERM_GC_OK = 0;
	IFACE_OK2START_OK2START01 = 0;
	IFACE_OK2START_OK2START02 = 0;
	IFACE_OK2START_OK2START03 = 0;
	IFACE_OK2START_OK2START04 = 0;
	IFACE_OK2START_OK2START05 = 0;
	IFACE_OK2START_OK2START06 = 0;
	IFACE_OK2START_OK2START07 = 0;
	IFACE_OK2START_OK2START08 = 0;
	IFACE_OK2START_OK2START09 = 0;
	IFACE_OK2START_OK2START10 = 0;
	IFACE_OK2START_OK2START11 = 0;
	IFACE_OK2START_OK2START12 = 0;
	IFACE_OK2START_OK2START13 = 0;
	IFACE_OK2START_OK2START14 = 0;
	IFACE_OK2START_OK2START15 = 0;
	IFACE_OK2START_OK2START = 0;
	START_PERM_OK2START01 = 0;
	START_PERM_OK2START02 = 0;
	START_PERM_OK2START03 = 0;
	START_PERM_OK2START04 = 0;
	START_PERM_OK2START05 = 0;
	START_PERM_OK2START06 = 0;
	START_PERM_OK2START07 = 0;
	START_PERM_OK2START08 = 0;
	START_PERM_OK2START09 = 0;
	START_PERM_OK2START10 = 0;
	START_PERM_OK2START11 = 0;
	START_PERM_OK2START12 = 0;
	START_PERM_OK2START13 = 0;
	START_PERM_OK2START14 = 0;
	START_PERM_OK2START15 = 0;
	InicializaArrI(FASTSTRTL, 5);
	InicializaArrI(out_FASTSTRTL, 5);

	LOC_REM_LOCAL = 0;
	FALSE_RESETACKN_LOCAL = 0;
	OP_INTRFC_ACKN_H = 0;
	OP_INTRFC_ACKN = 0;
	FALSE_RESET_ACKN = 0;
	OUT_ORACKN_OR = 0;
	TRUE_RESET_ACKN = 0;
	RESET_ACKN_RESET_Z = 0;
	OUT_OR_RESETACKN = 0;
	NOUT_OR_RESETACKN = 0;
	DLYALMACK = 0;
	out_DLYALMACK[5];
	TP_DLYALMACK=5;
	IFACE_CORE_ACKN_OR = 0;
	SHUTDOWN_CDLO_LAT = 0;
	SHUTDOWN_CDLO_GEN = 0;
	SHUTDOWN_SDN_CORE = 0;
	SHUTDOWN_SD_CORE = 0;
	LCKOUTMSK1_OR = 0;
	FALSE_RESET_LCKOUTMSK1 = 0;
	LCKOUTMSK1_AND = 0;
	OP_INTRFC_RESET = 0;
	FALSE_RESET_HMI_SW = 0;
	FALSE_RESET_SW = 0;
	N3N40_BI_RESET = 0;
	FALSE_LOC_RESET_OR = 0;
	IFACE_CORE_MASK_Z = 0;
	CORE_DIGITAL_SD_RESET = 0;
	CORE_DIGITAL_MIN_RESET = 0;
	CORE_DIGITAL_IDLE_RESET = 0;
	CORE_DIGITAL_RESET = 0;
	CORE_DIGITAL_ACKN = 0;
	ALARM_ALM_LAT = 0;
	NEVADA_ALARMS = 0;
	CORE_DIGITAL_ALARM = 0;
	DATA_IO_LCR_BR_V_1908 = 0;
	CORE_DIGITAL_DM_HORN = 0;
	CORE_DIGITAL_ALM_HORN = 0;
	CORE_DIGITAL_SI_HORN = 0;
	CORE_DIGITAL_SD_HORN = 0;
	SHUTDOWN_NS_LAT = 0;
	FALSE_IN11_ALARM_HORN = 0;
	FALSE_IN12_ALARM_HORN = 0;
	B_FORCE_HORN = 0;
	DATA_IO_LL2_BW_V_32 = 0;
	DATA_IO_RL2_BW_V_32 = 0;
	ALARM_HMISTI_OR = 0;
	DATA_IO_LL2_BW_V_27 = 0;
	DATA_IO_RL2_BW_V_27 = 0;
	ALARM_HMISTIRST_OR = 0;
	GENERATOR_TRIP_IN_9 = 0;
	DATA_IO_LL2_BW_V_9 = 0;
	DATA_IO_RL2_BW_V_9 = 0;
	ALARM_HMIDM_OR = 0;
	DATA_IO_LL2_BW_V_8 = 0;
	DATA_IO_RL2_BW_V_8 = 0;
	ALARM_HMIDMRST_OR = 0;
	XNSD_REF_DMREFSEL2 = 0;
	CORE_DIGITAL_N25CTRL = 0;
	GENERATOR_ISOCH = 0;
	SHUTDOWN_ONLINE_RST = 0;
	IFACE_CORE_Z_SWGRID = 0;
	SHUTDOWN_DMTIMEADJ_CTRL = 0;
	FALSE_SHUTDOWN_DIS_CONDEN_IN1 = 0;
	FALSE_SHUTDOWN_DIS_CONDEN_IN2 = 0;
	FALSE_SHUTDOWN_DIS_CONDEN_IN3 = 0;
	FALSE_SHUTDOWN_DIS_CONDEN_IN4 = 0;
	OUT_SHUTDOWN_DIS_CONDEN = 0;
	SHUTDOWN_STEPIDLE = 0;
	SHUTDOWN_NOT_ESSTI = 0;
	SHUTDOWN_CHOP_FUEL = 0;
	SFC_STEP_CORE_1250 = 0;
	SPEED_SW_NSDGT3590 = 0;
	GENERATOR_GEN_BKRCLS = 0;
	SHUTDOWN_ABORT_SDN_OVRD = 0;
	START_PERM_T_NOTREADY = 0;
	GENERATOR_ANY_SD = 0;
	DATA_IO_LCR_BR_V_1909 = 0;
	SHUTDOWN_CDLO = 0;
	SHUTDOWN_DECELMIN = 0;
	ENGMODE_CLR_LAT = 0;
	B_FORCE_SUM_SD = 0;
	CORE_DIGITAL_Z_ESN = 0;
	CORE_DIGITAL_Z_ES = 0;
	CORE_DIGITAL_STEPIDLE = 0;
	COND_MON_LESD_EN = 0;
	COND_MON_GESD_EN = 0;
	ENGMODE_MODE_SEL_20 = 0;
	SHUTDOWN_ABORT_SDN = 0;
	SHUTDOWN_SDN = 0;
	SHUTDOWN_SDN_GEN = 0;
	IFACE_CORE_Z_SDN = 0;
	FALSE_SHUTDOWN_SD_OR = 0;
	SHUTDOWN_SD = 0;
	SHUTDOWN_SD_GEN = 0;
	IFACE_CORE_Z_SHUTDOWN = 0;
	SHUTDOWN_SI = 0;
	SHUTDOWN_SISD = 0;
	FALSE_SHUTDOWN_STI_OR = 0;
	IFACE_CORE_STEPIDLOR = 0;
	SHUTDOWN_STNKYS_MSK_OUT_OR = 0;
	ENGMODE_ENGMODE21_TRIGGER = 0;
	SHUTDOWN_DM = 0;
	SHUTDOWN_DM_GEN = 0;
	IFACE_CORE_DECEL_OR = 0;
	SHUTDOWN_CDLO_OR = 0;
	CORE_DIGITAL_DECELMIN = 0;
	B_FORCE_VAR_SHED = 0;
	ENGMODE_MODE_SEL_19 = 0;
	ALARM_HMI_STI = 0;
	SHUTDOWN_FRLCKOVRDE = 0;
	TRUE_SHUTDOWN_FRLCKOVRDE = 0;
	SHUTDOWN_T48GT1150L_TRIGGER = 0;
	CORE_ANALOG_T48SEL = 0;
	SHUTDOWN_DLY1150_TRIGGER = 0;
	SHUTDOWNDLY1150 = 0;
	SPEED_SW_N25GT4600 = 0;
	SHUTDOWN_RUN_AGAIN = 0;
	CORE_DIGITAL_FUEL_ON = 0;
	SHUTDOWN_RST_4HRLK_IN_1 = 0;
	SHUTDOWN_LOCKLOOP = 0;
	SFC_TIMER_CDC_DN = 0;
	SHUTDOWN_T48GT1150L_RST = 0;
	SFC_TIMER_HOT_COOLDN_CTRL = 0;
	NSFC_TIMER_HOT_COOLDN_CTRL = 0;
	SPEED_SW_N25LT300 = 0;
	SHUTDOWN_TRPFRMPWR_TRIGGER = 0;
	HYD_STRT_SOV1619RMP = 0;
	SPEED_SW_N25GT1700 = 0;
	SHUTDOWN_TMRRSTOR_IN1 = 0;
	NSHUTDOWN_LOCKLOOP = 0;
	SHUTDOWN_FRLKTMRDN = 0;
	SHUTDOWN_SD_RESET = 0;
	SHUTDOWN_TMRRSTOR_IN2 = 0;
	SHUTDOWN_TRPFRMPWR_RST = 0;
	SHUTDOWN_EIGHTMNCLR_CTRL = 0;
	SHUTDOWN_TENMINCLR = 0;
	SHUTDOWN_FOURHRLOK = 0; 
	SHUTDOWN_TENMNTMRON = 0;
	NSHUTDOWN_FOURHRLOK = 0;
	FALSE_SHUTDOWN_R64_EARTH = 0;
	FALSE_SHUTDOWN_TEST_R64 = 0;
	SHUTDOWN_R64_EARTHB = 0;
	SHUTDOWN_R64_LAT_TRIGGER = 0;
	TIMERS_TEST_TRUE = 0;
	SHUTDOWN_R64_TIME = 0;
	SHUTDOWN_R64TM_SW = 0;
	SHUTDOWN_R64_NSTIME_IN2 = 0;
	ALARM_RESET = 0;
	SHUTDOWN_R64_ALM_IN_140 = 0;
	SHUTDOWN_R64_NSTIME = 0;
	SHUTDOWN_R64_DLY_DLY_TIME = 0;
	SFC_STEP_CNFG_CLDWN = 0;
	XN25_REF_XN25MINPOS = 0;
	TRUE_SHUTDOWN_N25MIN_SW = 0;
	SHUTDOWN_CLDNTMR = 0;
	SHUTDOWN_FUELCHOPOR_IN_7 = 0;
	SHUTDOWN_TMR_RST_FEEDBACK = 0;
	SFC_STEP_STI_3 = 0;
	SFC_STEP_ESN = 0;
	SFC_STEP_ES_1 = 0;
	SFC_STEP_FUELOFF = 0;
	SHUTDOWN_FUELCHPLAT_TRIGGER = 0;
	ALARM_RESET_LATCH = 0;
	SHUTDOWN_CHOP_FUEL_IN = 0;
	NSHUTDOWN_CHOP_FUEL_IN = 0;
	GENERATOR_UTIL_BKROP = 0;
	SFC_STEP_NORM_1 = 0;
	SHUTDOWN_GENCLSD = 0;
	SHUTDOWN_COREREACHD = 0;
	SHUTDOWN_STPIDLORNS_IN_2 = 0;
	XN25_REF_SI_NOT_IN = 0;
	XN25_REF_XN25STEPEN_TRIGGER = 0;
	SHUTDOWN_LTMINLD = 0;
	SHUTDOWN_MINLDOS_TRIGGER = 0;
	NSHUTDOWN_LTMINLD = 0;
	SHUTDOWN_MINLDOS = 0;
	SFC_STEP_RST_AND_ST = 0;
	SHUTDOWN_MINLDLAT_RST = 0;
	XNSD_REF_MINREFOR_IN_1 = 0;
	CORE_ANALOG_N25SEL = 0;
	XN25_REF_N25PLUS = 0;
	OUT_XN25_REF_N25PLUS = 0;
	XN25_REF_XN25REF = 0;
	XN25_REF_XN25RTMSK2_IN_2 = 0;
	SFC_STEP_NORM_4 = 0;
	FALSE_XN25_REF_XN25RTMSK2 = 0;
	SHUTDOWN_N25_LWR_OR = 0;
	SFC_STEP_NORM_5 = 0;
	XN25_REF_XN25LWROR_IN_1 = 0;
	SHUTDOWN_CLDN_DONE = 0;
	SHUTDOWN_STRT_TMR_RST = 0;
	SHUTDOWN_STRTCLDNTM_IN_2 = 0;
	XNSD_REF_NPTSYNCPOS = 0;
	SHUTDOWN_CLDNTMR_TRIGGER = 0;
	SHUTDOWN_RSTONLINE = 0;
	SHUTDOWN_MINLDSTTMR_IN_1 = 0;
	SHUTDOWN_STI_ES_ESN = 0;
	SHUTDOWN_DMINTIMER_TRIGGER = 0;
	SHUTDOWN_DMINTIMER = 0;
	DATA_IO_AW_V_6 = 0;
	SHUTDOWN_SML_MIN = 0;
	SHUTDOWN_DMTIMEADJ_NO = 0;
	SHUTDOWN_ONLINE = 0;
	SHUTDOWN_SMTIMEADJ = 0;
	SHUTDOWN_DMINTIMER_DLY_TIME = 0;
	A1_A12_BI1_CRIT_PATH = 0;
	A1_A12_BI1_SD_FUEL = 0;
	NA1_A12_BI1_CRIT_PATH = 0;
	NA1_A12_BI1_SD_FUEL = 0;
	SHUTDOWN_SDN_IN_13 = 0;
	SHUTDOWN_SDN_IN_11 = 0;
	TRUE_SHUTDOWN_MUYFM_PLSE = 0;
	FALSE_SHUTDOWN_VIB_SD_FUEL = 0;
	N3N40_BI_VIB_SUM_SD = 0;
	SHUTDOWN_SDN_IN_5 = 0;
	SHUTDOWN_SISD_IN_1 = 0;
	N3N40_BI_VIB_GB_SD = 0;
	FALSE_SHUTDOWN_GENGBDLT12 = 0;
	A1_A01_CPU_VIB_SD_SEL = 0;
	FALSE_A1_A01_CPU_VIB_SD_SEL = 0;
	SHUTDOWN_SDN_GEN_IN_29 = 0;
	SHUTDOWN_SISD_IN_2 = 0;
	CORE_DIGITAL_FUELOFF = 0;
	SFC_STEP_NOTSTARTIN = 0;
	B_FORCE_SOV6185_IN = 0;
	SHUTDOWN_COOLAIRTMR = 0;
	SHUTDOWN_CLTMR_DONE_IN = 0;
	SPEED_SW_GENCSTDOWN = 0;
	NSHUTDOWN_CLTMR_DONE_IN = 0;
	SHUTDOWN_EXOVRSPDSD = 0;
	CORE_SHTDN_SD_CORE005 = 0;
	CORE_SHTDN_SD_CORE006 = 0;
	CORE_SHTDN_SD_CORE007 = 0;
	CORE_SHTDN_SD_CORE008 = 0;
	CORE_SHTDN_SD_CORE009 = 0;
	CORE_SHTDN_SD_CORE010 = 0;
	FALSE_IN9_ALARM_HORN = 0;
	B_FORCE_CRITPATHSD_IN = 0;
	NB_FORCE_CRITPATHSD_IN = 0;
	FALSE_SHUTDOWN_STOP_SW = 0;
	N3N41_BI_LOC_STOP = 0;
	OP_INTRFC_STOP = 0;
	SHUTDOWN_NS_LAT_IN_1 = 0;
	CORE_ANALOG_N25DOT = 0;
	SHUTDOWN_N25DLT10 = 0;
	SHUTDOWN_ACC_AND_1_IN_1 = 0;
	SHUTDOWN_N25LT6050 = 0;
	SHUTDOWN_ACC_AND_1_IN_2 = 0;
	SHUTDOWN_N25LT1700 = 0;
	SHUTDOWN_BP_AND_1_IN_1 = 0;
	SHUTDOWN_N25LT4600 = 0;
	SHUTDOWN_ACC_AND_3_IN_2 = 0;
	CORE_ANALOG_N25R = 0;
	SHUTDOWN_N25RLT6407 = 0;
	SHUTDOWN_ACC_AND_2_IN_1 = 0;
	HYD_STRT_CRANK_HI = 0;
	FUEL_SYS_PRGDN = 0;
	CORE_DIGITAL_LITEOFF = 0;
	FALSE_SHUTDOWN_ACC_AND_1 = 0;
	SHUTDOWN_SDN_IN_7 = 0;
	CORE_DIGITAL_FUELON = 0;
	SHUTDOWN_ACC_2_DLY_TRIGGER = 0;
	SHUTDOWN_ACC_2_DLY = 0;
	FALSE_SHUTDOWN_BP_AND_1 = 0;
	SHUTDOWN_BPDLY_TRIGGER = 0;
	SHUTDOWN_BP_AND_1 = 0;
	SHUTDOWN_N25LT46DLY_TRIGGER = 0;
	SHUTDOWN_ACC_AND_3 = 0;
	NSHUTDOWN_COREREACHD = 0;
	SHUTDOWN_ACC_5_DLY_TRIGGER = 0;
	SHUTDOWN_ACC_AND_5 = 0;
	SPEED_SW_NSDLT1250 = 0;
	SHUTDOWN_ACC_6_DLY_TRIGGER = 0;
	SHUTDOWN_ACC_AND_6 = 0;
	CORE_ANALOG_TLUBLEL = 0;
	SHUTDOWN_TLUBLT90C = 0;
	SHUTDOWN_LTMP_AND_IN_3 = 0;
	FALSE_SHUTDOWN_LTMP = 0;
	SHUTDOWN_LTMP_DLY_TRIGGER = 0;
	SHUTDOWN_SD_IN_9 = 0;
	TLO_USE_SYNC = 0;
	ALARM_ALM_LAT_IN_86 = 0;
    InicializaArrI(out_CORE_DIGITAL_N25CTRL, 5);
	TP_CORE_DIGITAL_N25CTRL=5;
	InicializaArrI(out_SHUTDOWNDLY1150, 5);
	TP_SHUTDOWNDLY1150=6;
	InicializaArrI(out_SHUTDOWN_RUN_AGAIN, 5);
	TP_SHUTDOWN_RUN_AGAIN=6;
	InicializaArrI(out_SHUTDOWN_TENMINCLR, 5);
	TP_SHUTDOWN_TENMINCLR=5;
	InicializaArrI(out_SHUTDOWN_MINLDOS, 5);
	TP_SHUTDOWN_MINLDOS=2;
	InicializaArrI(out_SHUTDOWN_CLDNTMR, 5);
	TP_SHUTDOWN_CLDNTMR=5;
	InicializaArrI(out_SHUTDOWN_DMINTIMER, 5);
	TP_SHUTDOWN_DMINTIMER=5;
	InicializaArrI(out_SHUTDOWN_COOLAIRTMR, 5);
	TP_SHUTDOWN_COOLAIRTMR=5;
	InicializaArrI(out_SHUTDOWN_ACC_2_DLY, 5);
	TP_SHUTDOWN_ACC_2_DLY=120;
	SHUTDOWN_STRDLY_TRIGGER = 0;
	SHUTDOWN_ACC_AND_1 = 0;
	InicializaArrI(out_SHUTDOWN_ACC_AND_1, 5);
	TP_SHUTDOWN_ACC_AND_1=60;
	InicializaArrI(out_SHUTDOWN_BP_AND_1, 5);
	TP_SHUTDOWN_BP_AND_1=10;
	InicializaArrI(out_SHUTDOWN_ACC_AND_3, 5);
	TP_SHUTDOWN_ACC_AND_3=90;
	SHUTDOWN_N256050DLY_TRIGGER = 0;
	SHUTDOWN_ACC_AND_4 = 0;
	InicializaArrI(out_SHUTDOWN_ACC_AND_4, 5);
	TP_SHUTDOWN_ACC_AND_4=120;
	InicializaArrI(out_SHUTDOWN_ACC_AND_5, 5);
	TP_SHUTDOWN_ACC_AND_5=120;
	InicializaArrI(out_SHUTDOWN_ACC_AND_6, 5);
	TP_SHUTDOWN_ACC_AND_6=60;
	InicializaArrI(out_SHUTDOWN_SD_IN_9, 5);
	TP_SHUTDOWN_SD_IN_9=60;

	SFC_STEP_LOCRANK_4_TRAN_2= 0;
	SFC_STEP_HICRANK_4_TRAN_2= 0;
	SFC_STEP_ESN_TRAN_1= 0;
	SFC_STEP_HOLD_OFF_TRAN_1= 0;
	SFC_STEP_OUTOFOP= 0; 
	FALSE_SD_COND_OR= 0;
	SHUTDOWN_SDN_CORE= 0;
	SFC_STEP_OUTOFOP_T_COND_1= 0;
	START_PERM_WW_PERM= 0;
	OP_INTRFC_WW_ENABLE= 0;
	SFC_STEP_WW_ENBL_TRIGGER= 0; 
	SFC_STEP_WW_ABORT= 0;
	WTR_WASH_SOAK_DONE= 0;
	SFC_STEP_WW_ENBL_RST= 0; 
	WTR_WASH_HS6505_SW= 0; 
	SFC_STEP_OUTOFOP_T_COND_2= 0; 
	OP_INTRFC_HISPD_CRNK= 0;
	FALSE_HI_CNK_OR= 0;
	SFC_STEP_HCSEL_NOSD= 0; 
	START_PERM_C_READY= 0;
	SFC_STEP_OUTOFOP_T_COND_3= 0; 
	OP_INTRFC_LO_SPDCRNK= 0;
	FALSE_LO_CNK_OR= 0;
	SFC_STEP_LCSEL_NOSD= 0; 
	SFC_STEP_OUTOFOP_T_COND_4= 0; 
	LOC_REM_LOCAL= 0; 
	FALSE_START_SW= 0; 
	N3N41_BI_LOC_START_BI_L= 0; 
	SFC_STEP_START_OR= 0; 
	OP_INTRFC_START= 0;
	FALSE_START_OR= 0;
	SFC_STEP_NSEL_NOSD= 0; 
	START_PERM_T_READY= 0; 
	SFC_STEP_OUTOFOP_T_COND_5= 0; 
	SFC_STEP_SFC_S_INIT= 0; 
	SFC_STEP_START_INIT= 0;
	SFC_STEP_HICRANK_1_SFC_STEP= 0; 
	SFC_STEP_HICRANK_2_SFC_STEP= 0;
	SFC_STEP_HICRANK_3_SFC_STEP= 0;
	SFC_STEP_HICRANK_4_SFC_STEP= 0;
	GLUB_HICNKACTIV= 0; 
	SFC_STEP_LOCRANK_1_SFC_STEP= 0;
	SFC_STEP_LOCRANK_2_SFC_STEP= 0;
	SFC_STEP_LOCRANK_3_SFC_STEP= 0;
	SFC_STEP_LOCRANK_4_SFC_STEP= 0;
	ENGMODE_CRANKING= 0; 
	SHUTDOWN_FOURHRLOK= 0;
	SFC_STEP_STARTINITL= 0; 
	SFC_STEP_SFC_S_INIT= 0;
	CORE_DIGITAL_FUELON= 0;
	SPEED_SW_N25GT4600= 0;
	SFC_STEP_RUN_OR_IN_2= 0; 
	SFC_STEP_START_INIT= 0; 
	SFC_STEP_RUNNINGLP= 0; 
	SFC_STEP_RUNNING= 0; 
	SFC_STEP_OUTOFOP_TRAN_2= 0;
	SFC_STEP_OUTOFOP_TRAN_3= 0;
	SFC_STEP_OUTOFOP_TRAN_4= 0;
	SFC_STEP_OUTOFOP_TRAN_5= 0; 
	SFC_STEP_ST_SRNKLT= 0; 
	SFC_STEP_SDRESETDLY= 0; 
	SFC_STEP_STRTFL_RST= 0;
	SFC_STEP_LOSPD_OR= 0; 
	SFC_STEP_TMR_RESET= 0; 
	CORE_ANALOG_N25SEL= 0; 
	SFC_STEP_STRTFL_RST_IN_2= 0; 
	SFC_STEP_ST_CRNKLT_RST= 0; 
	SFC_STEP_STR_FAIL= 0;
	SFC_STEP_SFC_S_INIT= 0;
	SFC_STEP_VENT= 0;
	SHUTDOWN_ANY_SD= 0;
	VENT_PRG_FAIL= 0;
	VENT_PRG_DN= 0;
	SFC_STEP_GLUB= 0;
	GLUB_ABORT= 0;
	GLUB_AC60VERLTC= 0;
	GLUB_JCKPMP_ON= 0;
	OUT_ACVER_JACK= 0;
	SFC_STEP_HYD_STRT= 0;
	HYD_STRT_CNK_SEQPRM= 0;
	OUT_SD_STPCNK1= 0;
	HYD_STRT_PUMPONDLY= 0;
	SFC_STEP_HI_SPDSEL1= 0;
	HYD_STRT_SOV1619RMP= 0;
	SFC_STEP_NGGGT1700= 0;
	SPEED_SW_N25GT1700= 0;
	SFC_STEP_TURB_PRG= 0;
	FUEL_SYS_PRGDN= 0;
	SFC_STEP_MOTOR_6= 0;
	SFC_STEP_HI_SPDSEL2= 0;
	SFC_STEP_STPMOTOR= 0;
	SFC_STEP_SD_EXCPTNM= 0;
	CORE_DIGITAL_LITEOFF= 0;
	SFC_STEP_HI_SPDSEL3= 0;
	SHUTDOWN_SDN_CORE= 0;
	SPEED_SW_N25GT4600= 0;
	SFC_STEP_ATCORE= 0;
	SPEED_SW_NSDGT1250= 0;
	SHUTDOWN_COREREACHD= 0;
	TLO_TLUB_GT90= 0;
	OUT_CORE_1250= 0;
	SFC_STEP_STRT_AGAIN= 0;
	SFC_STEP_ACCTOSYNC= 0;
	SHUTDOWN_SD_CORE= 0;
	SHUTDOWN_STEPIDLE= 0;
	SHUTDOWN_CDLO= 0;
	SPEED_SW_NSDGT3590= 0;
	SFC_STEP_WARMUP= 0;
	SFC_TIMER_SYNC_RDY= 0;
	SFC_STEP_WARMUP_TRAN_5= 0;
	SFC_STEP_UNITONLINE_TRAN_6= 0;
	SFC_STEP_WATER_INJ_TRAN_7= 0;
	FALSE_SFC_STEP_READY2SYNC= 0;
	SFC_STEP_READY2SYNC_TRAN_5= 0;
	SFC_STEP_FSNL= 0;
	GENERATOR_GEN_BKRCLS= 0;
	XN25_REF_XN25MAXPOS= 0;
	SFC_STEP_READY2SYNC= 0;
	SFC_STEP_NORM_1_TRAN_4= 0;
	SFC_STEP_FSNL_TRAN_5= 0;
	SFC_STEP_WATER_INJ_TRAN_6= 0;
	SFC_STEP_UNITONLINE= 0;
	GENERATOR_NS_DROOP= 0;
	GENERATOR_NS_ISOCH= 0;
	GENERATOR_GEN_BKROPN= 0;
	FALSE_MASK_WI= 0;
	SFC_TIMER_WARMUP_DN= 0;
	CORE_ANALOG_MWSEL=5.0;
	OUT_MW_ENBWTR= 0;
	OUT_MASK_WI= 0;
	SFC_STEP_WATER_INJ= 0;
	TRUE_SFC_STEP_WATER_INJ= 0;
	SFC_STEP_STARTINILP= 0;
	Z_MINUS_RUNNINGLP= 0;
	SFC_STEP_SDRESETDLY= 0;
	InicializaArrI(SFC_STEP_NOTOFFLINE, 5);
	InicializaArrI(out_SFC_STEP_NOTOFFLINE, 5);
	InicializaArrI(Nout_SFC_STEP_NOTOFFLINE, 1);
	InicializaArrI(SFC_STEP_RUN_OR_IN_1, 5);
	InicializaArrI(out_SFC_STEP_RUN_OR_IN_1, 5);
	InicializaArrI(out_SFC_STEP_STRTFL_RST, 5);
	TP_SFC_STEP_STRTFL_RST= 1;
	InicializaArrI(SFC_STEP_SRTFL_DLY , 5);
	InicializaArrI(out_SFC_STEP_SRTFL_DLY, 5);
	TIMERS_SYS_TIMER=5; 
	InicializaArrI(out_SFC_STEP_STR_FAIL, 5);
	TP_SFC_STEP_STR_FAIL=5;
	//Z_minus
	InicializaArrI(out_SFC_STEP_STARTINILP,5);
	TP_SFC_STEP_STARTINILP=1;
	InicializaArrI(out_Z_MINUS_RUNNINGLP,5);
	TP_Z_MINUS_RUNNINGLP=1;
	InicializaArrI(out_SFC_STEP_SDRESETDLY,5);
	TP_SFC_STEP_SDRESETDLY=1;

	SFC_STEP_UNITONLINE=0;
	SFC_STEP_WATER_INJ=0;
	AND_SFC_STEP_NORM_1_SFC_STEP=0;
	SFC_STEP_UNITONLINE=0;//Declaracion de variable global para uso de boton SFC_STEP_UNITONLINE
	SFC_STEP_WATER_INJ=0;//Declaracion de variable global para uso de boton SFC_STEP_WATER_INJ
	OUT_RAMP_TO_NPT_MIN_LOAD=0;
	RAMP_TO_NPT_MIN_LOAD=0;
	SHUTDOWN_SDN_CORE=0;
	SHUTDOWN_SD_CORE=0;
	SHUTDOWN_STEPIDLE=0;
	SFC_STEP_RST_AND_ST=0;
	OUT_AND_SFC_STEP_RDYTOOPN=0;
	SFC_STEP_RST_AND_ST=0;
	SHUTDOWN_SDN_CORE=0;//Declaracion de variable global para uso de boton SHUTDOWN_SDN_CORE
	SHUTDOWN_SD_CORE=0;//Declaracion de variable global para uso de boton SHUTDOWN_SD_CORE
	SHUTDOWN_STEPIDLE=0;//Declaracion de variable global para uso de boton SHUTDOWN_STEPIDLE
	SFC_STEP_RST_AND_ST=0;//Declaracion de variable global para uso de boton SFC_STEP_RST_AND_ST
	OUT_AND_SFC_STEP_RDYTOOPN=0; //Declaracion de variable global para uso de boton OUT_AND_SFC_STEP_RDYTOOPN
	SFC_STEP_RST_AND_ST=0;//Declaracion de variable global para uso de boton SFC_STEP_RST_AND_ST
	DEACTIVE_WATER_SYSTEM=0;
	OUT_DEACTIVE_WATER_SYSTEM=0;
	SFC_STEP_NS_OR=0;
	TRUE_SFC_STEP_NORM_3=0;
	SFC_STEP_NS_OR=0;//Declaracion de variable global para uso de boton SFC_STEP_NS_OR
	TRUE_SFC_STEP_NORM_3=0;//Declaracion de variable global para uso de boton TRUE_SFC_STEP_NORM_3
	OPEN_BREAKERS=0;
	OUT_OPEN_BREAKERS=0;
	AND_SFC_STEP_NORM_4=0;//SYNC_COOLDOWN_TIMER_ACTIVE
	AND_SFC_STEP_NORM_4=0;//Declaracion de variable global para uso de boton AND_SFC_STEP_NORM_4
	OUT_SYNC_COOLDOWN_TIMER_ACTIVE=0;
	SYNC_COOLDOWN_TIMER_ACTIVE=0;//CORE_COOLDOWN_TIMER_ACTIVE
	SFC_STEP_SYNC_COOL=0;//Declaracion de variable global para uso de boton SFC_STEP_SYNC_COOL
	SFC_STEP_SYNC_COOL=0;
	OUT_CORE_COOLDOWN_TIMER_ACTIVE=0;
	CORE_COOLDOWN_TIMER_ACTIVE=0;
	SHUTDOWN_CHOP_FUEL=0;//Declaracion de variable global para uso de boton SHUTDOWN_CHOP_FUEL
	SHUTDOWN_CHOP_FUEL=0;
	SFC_STEP_NORM_5=0;
	SFC_STEP_STI_3=0;
	SFC_STEP_ES_2=0;
	SFC_STEP_NORM_5=0;//Declaracion de variable global para uso de boton SFC_STEP_NORM_5
	SFC_STEP_STI_3=0;//Declaracion de variable global para uso de boton SFC_STEP_STI_3
	SFC_STEP_ES_2=0;//Declaracion de variable global para uso de boton SFC_STEP_ES_2
	WAIT_UNTIL_N25_LT_4600=0;
	OUT_WAIT_UNTIL_N25_LT_4600=0;
	SFC_STEP_STPMOTOR=0;
	SHUTDOWN_SISDESN=0;
	SPEED_SW_N25LT4600=0;
	SFC_STEP_STPMOTOR=0;//Declaracion de variable global para uso de boton SFC_STEP_STPMOTOR
	ACTIVATE_HYDRAULIC_STARTER_PUMP=0;
	OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP=0;
	SFC_STEP_FUELOFF=0;
	AND_SFC_STEP_MOTOR_3=0;
	SFC_STEP_FUELOFF=0;//Declaracion de variable global para uso de boton SFC_STEP_FUELOFF
	AND_SFC_STEP_MOTOR_3=0;//Declaracion de variable global para uso de boton AND_SFC_STEP_MOTOR_3
	OUT_HIGH_SPEED_SELECT=0;
	HIGH_SPEED_SELECT=0;
	HYD_STRT_SOV1619RMP=0;  //Declaracion de variable global para uso de boton HYD_STRT_SOV1619RMP   
	HYD_STRT_SOV1619RMP=0;                        
	WAIT_FOR_SPEED_TO_GO_ABOVE_1700=0;                                 
	OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700=0;
	SPEED_SW_N25GT1700=0;
	SFC_STEP_MOTOR_6=0;
	OUT_START_COOLDOWN_CRANK_TIMER=0;
	START_COOLDOWN_CRANK_TIMER=0;
	SFC_TIMER_CDC_DN=0;
	LATCH_SFC_STEP_MOTOR_5=0;
	OUT_HOLD_UNTIL_PURGE_DONE=0;
	HOLD_UNTIL_PURGE_DONE=0;
	FUEL_SYS_PRGDN=0;
	SFC_STEP_ANY_SD_OR=0;
	SFC_STEP_STAR_OR=0;
	SHUTDOWN_NO_SHTDNS=0;
	GLUB_DC_OFF=0;
	SFC_STEP_RST_AND_ST=0;
	SFC_STEP_MTR_OR=0;
	SFC_STEP_RESET_STRT_TRIGGER=0;
	FALSE_SFC_STEP_HISPD_OR=0;
	SFC_STEP_HICRANK_3=0;
	SFC_STEP_HICRANK_4=0;
	SFC_STEP_MOTOR_1=0;
	SFC_STEP_MOTOR_2=0;
	SFC_STEP_MOTOR_3=0;
	SFC_STEP_MOTOR_4=0;
	SFC_STEP_MOTOR_5=0;
	ENGMODE_CRANKING_IN_1=0;
	SFC_STEP_STI_2=0;
	SFC_STEP_NORM_2=0;
	SFC_STEP_NORM_3=0;
	SFC_STEP_NORM_4=0;
	SFC_STEP_NORM_5=0;
	SFC_STEP_ACCTOSYNC_SF_SEL_2=0;
	SHUTDOWN_STEPIDLE=0;
	SHUTDOWN_CDLO=0;
	SHUTDOWN_SD_CORE=0;
	SHUTDOWN_DM=0;
	SFC_STEP_ATCORE_T_COND_2=0;
	SFC_STEP_ACCTOSYNC=0;
	SFC_STEP_WARMUP=0;
	FALSE_SFC_STEP_NS_OR=0;
	SFC_STEP_FSNL=0;
	SFC_STEP_READY2SYNC=0;
	SFC_STEP_NORM_3_SF_SEL_2=0;
	SFC_STEP_MOTOR_1=0;
	SFC_STEP_MOTOR_2=0;
	SFC_STEP_MOTOR_3=0;
	SFC_STEP_MOTOR_4=0;
	SFC_STEP_MOTOR_5=0;
	SFC_STEP_MOTOR_6=0;
	SFC_STEP_MOTOR_5_TRAN_3=0;
	SFC_STEP_CNK_STPOR2_IN_2=0;
	SFC_STEP_MOTOR_1_SFC_STEP=0;
	SFC_STEP_MOTOR_2_SFC_STEP=0;
	SFC_STEP_MOTOR_3_SFC_STEP=0;
	SFC_STEP_MOTOR_4_SFC_STEP=0;
	SFC_STEP_MOTOR_5_SFC_STEP=0;
	SFC_STEP_RST_START_IN_2=0;
	SHUTDOWN_SDN_CORE=0;
	SHUTDOWN_FOURHRLOK=0;
	SFC_STEP_FUELOFF_T_COND_1=0;
	SHUTDOWN_CDLO=0;
	SHUTDOWN_DECELMIN=0;
	SHUTDOWN_SD_CORE=0;
	SHUTDOWN_STEPIDLE=0;
	SFC_STEP_MOTOR_6_T_COND_4=0;
	SFC_STEP_BKRS_OPN=0;
	SHUTDOWN_SDN_CORE=0;
	SHUTDOWN_STEPIDLE=0;
	SFC_STEP_RST_AND_ST=0;
	SFC_STEP_ST_NS_TMR_RST=0;
	SFC_STEP_NORM_1=0;
	SFC_STEP_NSTOESTMR_TRIGGER=0;
	SHUTDOWN_SI_IN_1=0;//Entrada del timer, declaracion para el timer SHUTDOWN_SI_IN_1 de tipo TOND
	SFC_STEP_SYNC_COOL=0;//Entrada del timer, declaracion para el timer SFC_STEP_SYNC_COOL de tipo TOND
	InicializaArrI(out_SHUTDOWN_SI_IN_1, 5);//Salida del timer
	TP_SHUTDOWN_SI_IN_1=60;//Parametrizacion del timer (seg.)
	InicializaArrI(out_SFC_STEP_SYNC_COOL, 5);//Salida del timer
	TP_SFC_STEP_SYNC_COOL=60;//Parametrizacion del timer (seg.)
	
///////////////////////////ALARMAS_VIBRACIÓN////////////////////////////////////////

	printf(" ");


//variables a imprimir//  
         
/*printf("\n ALARM_ALM_LAT_IN_163 %d",ALARM_ALM_LAT_IN_163);
printf("\n NEVADA_CH_FAIL_AL_IN %d",NEVADA_CH_FAIL_AL_IN);
printf("\n NEVADA_NEWOLD_1_NO %d",NEVADA_NEWOLD_1_NO);    
printf("\n NEVADA_NEWOLD_2_NO %d",NEVADA_NEWOLD_2_NO);  
printf("\n NEVADA_KEYMASK1_IN_2 %d",NEVADA_KEYMASK1_IN_2);     
printf("\n NEVADA_KEYMASK2_IN_2 %d",NEVADA_KEYMASK2_IN_2);    
printf("\n ALARM_ALM_LAT_IN_173 %d",ALARM_ALM_LAT_IN_173);     
printf("\n ALARM_ALM_LAT_IN_174 %d",ALARM_ALM_LAT_IN_174);     
*/
printf("\n ALARM_ALM_LAT_IN_183 %d",ALARM_ALM_LAT_IN_183);      
printf("\n ALARM_ALM_LAT_IN_184 %d",ALARM_ALM_LAT_IN_184);   
printf("\n BENTLY_CRF_LO_VAL_IN_1 %d",BENTLY_CRF_LO_VAL_IN_1);    
printf("\n BENTLY_CRF_LO_VAL_IN_2 %d",BENTLY_CRF_LO_VAL_IN_2);    
printf("\n BENTLY_CRF_HI_VAL_IN_2 %d",BENTLY_CRF_HI_VAL_IN_2);    
printf("\n BENTLY_CRF_HI_VAL_IN_3 %d",BENTLY_CRF_HI_VAL_IN_3);    
printf("\n BENTLY_M25MXVSN25_GT %d",BENTLY_M25MXVSN25_GT);    
printf("\n BENTLY_M25MXVSN25_EQ %d",BENTLY_M25MXVSN25_EQ);    
printf("\n BENTLY_M25MXVSN25_LT %d",BENTLY_M25MXVSN25_LT);    
printf("\n OUT_BENTLY_CRF_LO_VAL %d",OUT_BENTLY_CRF_LO_VAL);               
printf("\n B_FORCE_SAR_82_IN %d",B_FORCE_SAR_82_IN);    

//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCIONES PARA BLOQUES

//VARIABLES SALIDA SHEET 186 

//SUMMARY VIBRATION SYSTEM MALFUNCTION
if(NEVADA_COMM_BR_V_1_1==1||FALSE_NEVADA_SYSMAL_OR==1)
{
ALARM_ALM_LAT_IN_163=1;
}
else 
{
ALARM_ALM_LAT_IN_163=0;
}
//NEVADA_CHANNEL_FL_AND

if(NEVADA_COMM_BR_V_3_1==1&&NEVADA_COMM_BR_V_3_9==1&&NEVADA_COMM_BR_V_3_17==1&&NEVADA_COMM_BR_V_3_25==1)
{
NEVADA_CH_FAIL_AL_IN=1;
}
else 
{
NEVADA_CH_FAIL_AL_IN=0;
}
//Llamada de funcion para el timer SHUTDOWN_DM_IN_1 de tipo TOND
   SHUTDOWN_DM_IN_1=NEVADA_CH_FAIL_AL_IN;
   TOND(SHUTDOWN_DM_IN_1,TP_SHUTDOWN_DM_IN_1,Time_factor,out_SHUTDOWN_DM_IN_1);
   printf("\nout_SHUTDOWN_DM_IN_1 %d",out_SHUTDOWN_DM_IN_1[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//NEVADA_XNSDENBL
 if (CORE_ANALOG_N2ROTOR>500)
 {
 NEVADA_XNSDENBL=1;
 }
 else
 {
     NEVADA_XNSDENBL=0;
     }

//NEVADA_XN25ENBL

 CORE_ANALOG_N25SEL;
 NEVADA_XN25ENBL;
 if (CORE_ANALOG_N25SEL>500)
 {
 NEVADA_XN25ENBL=1;
 }
 else
 {
     NEVADA_XN25ENBL=0;
     }
//NEVADA NEWOLD 1
 if (TRUE_NEVADA_KP_NEW_OLD==1)
   {
                 NEVADA_KEYMASK1_IN_2=NEVADA_XNSDENBL;
 
                     }
                     else
                     {
                        NEVADA_KEYMASK1_IN_2=TRUE_NEVADA_NEWOLD_1;
                         }

//NEVADA NEWOLD 2
if (TRUE_NEVADA_KP_NEW_OLD==1)
   {
                 NEVADA_KEYMASK2_IN_2=NEVADA_XN25ENBL;
 
                     }
                     else
                     {
                        NEVADA_KEYMASK2_IN_2=TRUE_NEVADA_NEWOLD_2;
                         }
//NEVADA_KEYMASK1_AND

if(NEVADA_COMM_BR_V_4_1==1&&NEVADA_KEYMASK1_IN_2==1)
{
ALARM_ALM_LAT_IN_173=1;
}
else 
{
ALARM_ALM_LAT_IN_173=0;
}

//NEVADA_KEYMASK2_AND

if(NEVADA_COMM_BR_V_4_9==1&&NEVADA_KEYMASK2_IN_2==1)
{
ALARM_ALM_LAT_IN_174=1;
}
else 
{
ALARM_ALM_LAT_IN_174=0;
}

//VARIABLES DE SALIDA SHEET 187

//NEVADA_CD42FL3MSK_AND
if(FALSE_NEVADA_CD42FL3MSK==1&&NEVADA_COMM_V_9_17==1)
{
ALARM_ALM_LAT_IN_183=1;
}
else
{
 ALARM_ALM_LAT_IN_183=0;
}

//NEVADA_CD42FL4MSK_AND

if(NEVADA_COMM_V_9_25==1&&FALSE_NEVADA_CD42FL4MSK==1)
{
ALARM_ALM_LAT_IN_184=1;
}
else 
{
ALARM_ALM_LAT_IN_184=0;
}

//Llamada de funcion para el timer SHUTDOWN_DM_GEN_IN_13 de tipo TOND
SHUTDOWN_DM_GEN_IN_13=NEVADA_COMM_BR_V_1_45;
   TOND(SHUTDOWN_DM_GEN_IN_13,TP_SHUTDOWN_DM_GEN_IN_13,Time_factor,out_SHUTDOWN_DM_GEN_IN_13);
   printf("\nout_SHUTDOWN_DM_GEN_IN_13 %d",out_SHUTDOWN_DM_GEN_IN_13[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *



//BENTLY_N2LT3000


CORE_ANALOG_N2ROTOR;
 if (3000.0>CORE_ANALOG_N2ROTOR)
 {
 BENTLY_CRF_LO_VAL_IN_1=1;
 }
 else
 {
     BENTLY_CRF_LO_VAL_IN_1=0;
     }

//BENTLY_N2GT3590

 if (CORE_ANALOG_N2ROTOR>3590.0)
 {
 BENTLY_CRF_LO_VAL_IN_2=1;
 }
 else
 {
     BENTLY_CRF_LO_VAL_IN_2=0;
     }

//BENTLY_N2LT3590

 if (3450.0>CORE_ANALOG_N2ROTOR)
 {
 BENTLY_CRF_HI_VAL_IN_2=1;
 }
 else
 {
     BENTLY_CRF_HI_VAL_IN_2=0;
     }

//BENTLY_N2GT3000

 if (CORE_ANALOG_N2ROTOR>1000.0)
 {
 BENTLY_CRF_HI_VAL_IN_3=1;
 }
 else
 {
     BENTLY_CRF_HI_VAL_IN_3=0;
     }

//BENTLY_N25_TO_I

 if (CORE_ANALOG_N25SEL>CORE_ANALOG_N25MAX)
 {
 BENTLY_M25MXVSN25_GT=1;
 }
 else
 {
     BENTLY_M25MXVSN25_GT=0;
     }
if (CORE_ANALOG_N25SEL==CORE_ANALOG_N25MAX)
 {
 BENTLY_M25MXVSN25_EQ=1;
 }
 else
 {
     BENTLY_M25MXVSN25_EQ=0;
     }
if (CORE_ANALOG_N25SEL<CORE_ANALOG_N25MAX)
 {
 BENTLY_M25MXVSN25_LT=1;
 }
 else
 {
     BENTLY_M25MXVSN25_LT=0;
     }
//BENTLY_CRF_LO_VAL_OR

if(BENTLY_CRF_LO_VAL_IN_1==1||BENTLY_CRF_LO_VAL_IN_2==1||BENTLY_M25MXVSN25_GT==1||BENTLY_M25MXVSN25_EQ==1)
{
OUT_BENTLY_CRF_LO_VAL=1;
}
else
{
 OUT_BENTLY_CRF_LO_VAL=0;
}

//BENTLY_CRF_HI_VAL_AND

if(BENTLY_CRF_HI_VAL_IN_2==1&&BENTLY_CRF_HI_VAL_IN_3==1&&BENTLY_M25MXVSN25_LT==1)
{
B_FORCE_SAR_82_IN=1;
}
else
{
 B_FORCE_SAR_82_IN=0;
}

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////ARRANQUE HIRÁULICO///////////////////////////////////

 printf(" ");
	 //Funcion para imprimir
   PRINTING(Print_iter,Time_factor,&Counter);
   printf("\nLATCH_DE1364LAT= %d",LATCH_DE1364LAT);
   printf("\nLATCH1_PROB_LAT= %d",LATCH1_PROB_LAT);
   printf("\nHYD_STRT_DE1364A= %d",HYD_STRT_DE1364A);
   printf("\nSFC_STEP_AUXFAN_DLY= %d",out_SFC_STEP_AUXFAN_DLY[1]);
   printf("\nLATCH_STRT_LATCH= %d",LATCH_STRT_LATCH);
   printf("\nout_HYD_STRT_DLY_SD %d",out_HYD_STRT_DLY_SD[1]);
   printf("\nout_HYD_STRT_MOT1615 %d",out_HYD_STRT_MOT1615[1]);
   printf("\nout_FL_DEL_TMR %d",out_FL_DEL_TMR[1]);
   printf("\nout_CRANK_TMR %d",out_CRANK_TMR[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCIONES PARA BLOQUES
//SHEET 220
if (CORE_DIGITAL_FUELON==1 && SFC_STEP_RST_AND_ST==1)
{
OUT_RESTRTMASK=1;
}
else {
      OUT_RESTRTMASK=0;
     }
if(OUT_RESTRTMASK==1&& SFC_STEP_AUXFAN_DLY==1)
{
OUT_CLRPMPOR=1;
}
else {
      OUT_CLRPMPOR=0;
      }
if(SPEED_SW_COASTDOWN==1&& HYD_STRT_NOT_PMPON==1&& SFC_STEP_AUXFAN_DLY==0)
{
OUT_CLUTCHOFF=1;
}
else {
      OUT_CLUTCHOFF=0;
      }
if(FALSE_CLUTCH_Y==1&& OUT_CLRPMPOR==1&& FALSE_SEL_OFF==0)
{
OUT_MASK_ON=1;
}
else {
      OUT_MASK_ON=0;
      }
if(OUT_MASK_ON==1&& OUT_CLUTCHOFF==0)
{
LATCH_DE1364LAT=1;
}
else{
     if(OUT_CLUTCHOFF==1){
                           LATCH_DE1364LAT=0;
                           }
    }
if(HYD_STRT_LSLL1601SD==1||FALSE_PROB_LAT==1)
{
  LATCH1_PROB_LAT=1;
}
else{
     if(ALARM_RESET==1){
                        LATCH1_PROB_LAT=0;
                        }
     }
if(LATCH_DE1364LAT==1&& LATCH1_PROB_LAT==0)
{
 OUT_PMP_OFF=1;
 HYD_STRT_DE1364A=OUT_PMP_OFF;
}
else {
      OUT_PMP_OFF=0;
      HYD_STRT_DE1364A=OUT_PMP_OFF;
      }
//Llamada de funcion para el timer SFC_STEP_AUXFAN_DLY de tipo IMPD
   
if(FALSE_SEL_OFF==1)
{
 out_SFC_STEP_AUXFAN_DLY[1]=0;
 out_SFC_STEP_AUXFAN_DLY[2]=0;
 out_SFC_STEP_AUXFAN_DLY[3]=0;
 out_SFC_STEP_AUXFAN_DLY[4]=0;
}else{
      IMPD(SFC_STEP_AUXFAN_DLY,TP_SFC_STEP_AUXFAN_DLY,Time_factor,out_SFC_STEP_AUXFAN_DLY);
      }
if(HYD_STRT_TRIPPED==1||SFC_STEP_CRNKTMRDN==1||SPEED_SW_N25GT4600==1||SHUTDOWN_FOURHRLOK==1||SHUTDOWN_SDN_CORE==1||SFC_STEP_CRANKSTOP==1||SFC_STEP_ES_1==1||SFC_STEP_WWCRANK_11==1)
{
 OUT_KILL_PUMP=1;
 HYD_STRT_CNK_SEQPRM= OUT_KILL_PUMP;
}else{
      OUT_KILL_PUMP=0;
      HYD_STRT_CNK_SEQPRM= OUT_KILL_PUMP;
      }
if(out_SFC_STEP_AUXFAN_DLY[1]==1&& OUT_KILL_PUMP==0)//AQUI LLEVA UN ZMINUS
{
LATCH_STRT_LATCH=1;
}
else{
     if(OUT_KILL_PUMP==1){
                           LATCH_STRT_LATCH=1;;
                           }
    }
if(LATCH_STRT_LATCH==1&& TRUE_MASK_PMP==1)
{
 OUT_MASK_PMP=1;
}else{
      OUT_MASK_PMP=0;
      }  
//Llamada de funcion para el timer HYD_STRT_DLY_SD de tipo TOND
   HYD_STRT_DLY_SD=OUT_MASK_PMP;
   TOND(HYD_STRT_DLY_SD,TP_HYD_STRT_DLY_SD,Time_factor,out_HYD_STRT_DLY_SD);
   HYD_STRT_PUMPONDLY=out_HYD_STRT_DLY_SD[1];
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//Llamada de funcion para el timer HYD_STRT_MOT1615 de tipo TOFD
   HYD_STRT_MOT1615=OUT_MASK_PMP;
   TOFD(HYD_STRT_MOT1615,TP_HYD_STRT_MOT1615,Time_factor,out_HYD_STRT_MOT1615);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//SALIDAS SHEET 221
if(HYD_STRT_LSLL1601SD==1||HYD_STRT_PSLL1605SD==1||HYD_STRT_PDSH1600SD==1)
{
  LATCH1_TRIPPED=1;
}
else if(CORE_DIGITAL_RESET==1){
                        LATCH1_TRIPPED=0;
                        }
if(SFC_STEP_STRTR_SPD==1)
{
 NO_OFFSPDSEL=0.0;
 OUT_OFFSPDSEL=NO_OFFSPDSEL;
}else{
      NC_OFFSPDSEL=0.0;
      OUT_OFFSPDSEL=NC_OFFSPDSEL;
      }
if(HYD_STRT_PUMPONDLY==1&& SFC_STEP_LO_SPD_OR==1)
{
 OUT_MASK_1=1;
}else{
      OUT_MASK_1=0;
      }
if(HYD_STRT_PUMPONDLY==1&& SFC_STEP_HI_SPD_OR==1)
{
 OUT_MASK_2=1;
}else{
      OUT_MASK_2=0;
      } 
if(FUEL_SYS_GAS100==1)
{
 NO_CSTSPD_SW=40.0;
 OUT_CSTSPD_SW=NO_CSTSPD_SW;
}else{
      NC_CSTSPD_SW=60.0;
      OUT_CSTSPD_SW=NC_CSTSPD_SW;
      }
if(HYD_STRT_PUMPONDLY==1&& SFC_STEP_HIEST_SEL==1)
{
 OUT_MASK_3=1;
}else{
      OUT_MASK_3=0;
      }
if(TRUE_LIQ_GAS_2==1)
{
 NO_LIQ_GAS_2=1700.0;
 OUT_LIQ_GAS_2=NO_LIQ_GAS_2;
}else{
      NC_LIQ_GAS_2=1500.0;
      OUT_LIQ_GAS_2=NC_LIQ_GAS_2;
      } 
if(CORE_ANALOG_N25SEL>OUT_LIQ_GAS_2)
{
 GT_N25COMP1=1;
 OUT_N25COMP1=GT_N25COMP1;
}else{
      GT_N25COMP1=0;
      }
if(CORE_ANALOG_N25SEL<OUT_LIQ_GAS_2)
{
 LT_N25COMP1=1;
}else{
      LT_N25COMP1=0;
      }
if(CORE_ANALOG_N25SEL>2000)
{
 GT_N25COMP2=1;
}else{
      GT_N25COMP2=0;
      }
if(CORE_ANALOG_N25SEL<2000)
{
 LT_N25COMP2=1;
}else{
      LT_N25COMP2=0;
      }
if(HYD_STRT_MOV_UP_Z==1&& LT_N25COMP1==1)
{
 OUT_RATE_SEL1=1;
}else{
      OUT_RATE_SEL1=0;
      }
if(HYD_STRT_MOV_UP_Z==1&& GT_N25COMP1==1&& LT_N25COMP2==1)
{
 OUT_RATE_SEL2=1;
}else{
      OUT_RATE_SEL2=0;
      }
if(HYD_STRT_MOV_UP_Z==1&& GT_N25COMP2==1)
{
 OUT_RATE_SEL3=1;
}else{
      OUT_RATE_SEL3=0;
      }
if(OUT_MASK_1==1||OUT_MASK_3==1)
{
 OUT_FAIL_OR=1;
}else{
      OUT_FAIL_OR=0;
      }      
//Llamada de funcion para el timer FL_DEL_TMR de tipo TOND
   FL_DEL_TMR=OUT_FAIL_OR;
   TOND(FL_DEL_TMR,TP_FL_DEL_TMR,Time_factor,out_FL_DEL_TMR);
if(OUT_MASK_3==1)
{
 OUT_FLSPD_SW=SPEED_SW_N25LT1200;
}else{
      OUT_FLSPD_SW=SPEED_SW_N25LT1700;
      } 
if(out_FL_DEL_TMR[1]==1&& OUT_FLSPD_SW==1)
{
 OUT_N25LT_DEL=1;
}else{
      OUT_N25LT_DEL=0;
      }
//Llamada de funcion para el timer CRANK_TMR de tipo TOND
   CRANK_TMR=HYD_STRT_STRT_LATCH;
   TOND(CRANK_TMR,TP_CRANK_TMR,Time_factor,out_CRANK_TMR);
if(250.0>A1_A04_MPU_N25_MAX)
{
 OUT_N25LT200=1;
}else{
      OUT_N25LT200=0;
      }
if(FALSE_N25LO_MASK=1&& out_CRANK_TMR[1]==1&& OUT_N25LT200==1)
{
 OUT_N25LO_MASK=1;
}else{
      OUT_N25LO_MASK=0;
      }
if(OUT_N25LT_DEL==1||OUT_N25LO_MASK==1)
{
  OUT_FAILTOACC=1;
  HYD_STRT_STRT_FAIL1=OUT_FAILTOACC;
}
else{
     if(SHUTDOWN_SD_RESET==1){
                        OUT_FAILTOACC=0;
                        HYD_STRT_STRT_FAIL1=OUT_FAILTOACC;
                        }
     }
//SALIDA SHEET 222
if(SFC_STEP_START_INIT==1||SFC_STEP_CRANKING==1||HYD_STRT_MOT1615==1){
	HYD_STRT_STRTORCRNK=1;
}else{
	HYD_STRT_STRTORCRNK=0;
}
if(N1N34_BI_LSLL1601==0&& HYD_STRT_STRTORCRNK==1){
	HYD_STRT_LSLL1601SD=1;
}else{
	HYD_STRT_LSLL1601SD=0;
}
   HYD_STRT_AUXCONTDLY=HYD_STRT_MOT1615;
   TOND(HYD_STRT_AUXCONTDLY,TP_HYD_STRT_AUXCONTDLY,Time_factor,out_HYD_STRT_AUXCONTDLY);
   if(out_HYD_STRT_AUXCONTDLY[1]==1&& N3N41_BI_HYD_ST_AUX==1){
	   HYD_STRT_AUXCNTFLT=1;
   }else{
	   HYD_STRT_AUXCNTFLT=0;
   }
   HYD_STRT_PDSHH1600D=HYD_STRT_MOT1615;
   TOND(HYD_STRT_PDSHH1600D,TP_HYD_STRT_PDSHH1600D,Time_factor,out_HYD_STRT_PDSHH1600D);
   if(out_HYD_STRT_PDSHH1600D[1]==1&& N1N34_BI_PDSHH1600==0){
	   HYD_STRT_PDSH1600SD=1;
   }else{
	   HYD_STRT_PDSH1600SD=0;
   }
   HYD_STRT_MOT1615DLY=HYD_STRT_MOT1615;
   TOND(HYD_STRT_MOT1615DLY,TP_HYD_STRT_MOT1615DLY,Time_factor,out_HYD_STRT_MOT1615DLY);
   if(out_HYD_STRT_MOT1615DLY[1]==1&& N1N34_BI_PSLL1605==0){
	   HYD_STRT_PSLL1605SD=1;
   }else{
	   HYD_STRT_PSLL1605SD=0;
   }
   printf(" ");

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////DISPARO_ALARMAS//////////////////////////////////////

   printf(" ");


//variables a imprimir//  
	 printf("\n SPRINT_ALARM_IN_1 %d",SPRINT_ALARM_IN_1);
printf("\n SPRINT_ALARM_IN_2 %d",SPRINT_ALARM_IN_2); 
printf("\n SPRINT_FTENA_MASK_IN_1 %d",SPRINT_FTENA_MASK_IN_1); 
printf("\n   SPRINT_FT62231CMP %d",  SPRINT_FT62231CMP); 
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//LLAMADA DE FUNCIONES PARA BLOQUES
//declaracion de variables pag_291

//Llamada de funcion para invertir la entrada FALSE_SPRINT_PDSH62233
   NFALSE_SPRINT_PDSH62233=NOT(FALSE_SPRINT_PDSH62233);
   printf("\nNFALSE_SPRINT_PDSH62233 %d",NFALSE_SPRINT_PDSH62233);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SPRINT_PMPDLYON de tipo TOND
SPRINT_PMPDLYON=SPRINT_MOT62226;
   TOND(SPRINT_PMPDLYON,TP_SPRINT_PMPDLYON,Time_factor,out_SPRINT_PMPDLYON);
   printf("\nout_SPRINT_PMPDLYON %d",out_SPRINT_PMPDLYON[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SPRINT MSK62233_AND
if(NFALSE_SPRINT_PDSH62233==1&&out_SPRINT_PMPDLYON[1]==1)
{
SPRINT_ALARM_IN_1=1;
}
else 
{
SPRINT_ALARM_IN_1=0;
}
//SPRINT_PSL62227_AND

if(FALSE_SPRINT_PSL62227==0&&SPRINT_PMPDLYON==1)
{
SPRINT_ALARM_IN_2=1;
}
else
{
SPRINT_ALARM_IN_2=0;
}

//declaracion de variables pag_292

//SPRINT_FTENA_OR
if(SPRINT_LP_ON_3==1||SPRINT_HP_ON_3==1)
{
SPRINT_FTENA_MASK_IN_1=1;
}
else
{
 SPRINT_FTENA_MASK_IN_1=0;
}

//SPRINT_FTENA_MASK
if(TRUE_SPRINT_FTENA_MASK==1&&SPRINT_FTENA_MASK_IN_1==1)
{
SPRINT_FT62231CMP=1;
}
else
{
 SPRINT_FT62231CMP=0;
}
//Llamada de funcion para el timer SPRINTDLY62270AL de tipo TOND
   SPRINTDLY62270AL=SPRINT_FT62270CMP;
   TOND(SPRINTDLY62270AL,TP_SPRINTDLY62270AL,Time_factor,out_SPRINTDLY62270AL);
   printf("\nout_SPRINTDLY62270AL %d",out_SPRINTDLY62270AL[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SPRINTDLY62270SD de tipo TOND
   SPRINTDLY62270SD=SPRINT_FT62270CMP;
   TOND(SPRINTDLY62270SD,TP_SPRINTDLY62270SD,Time_factor,out_SPRINTDLY62270SD);
   printf("\nout_SPRINTDLY62270SD %d",out_SPRINTDLY62270SD[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SPRINTDLY6231ALM de tipo TOND
   SPRINTDLY6231ALM=SPRINT_FT62231CMP;
   TOND(SPRINTDLY6231ALM,TP_SPRINTDLY6231ALM,Time_factor,out_SPRINTDLY6231ALM);
   printf("\nout_SPRINTDLY6231ALM %d",out_SPRINTDLY6231ALM[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SPRINTDLY6231SD de tipo TOND
   SPRINTDLY6231SD=SPRINT_FT62231CMP;
   TOND(SPRINTDLY6231SD,TP_SPRINTDLY6231SD,Time_factor,out_SPRINTDLY6231SD);
   printf("\nout_SPRINTDLY6231SD %d",out_SPRINTDLY6231SD[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//Llamada de funcion para el timer SPRINT_FLOW_DLY1 de tipo TOND
SPRINT_FLOW_DLY1=SPRINT_FT62234LOG;
   TOND(SPRINT_FLOW_DLY1,TP_SPRINT_FLOW_DLY1,Time_factor,out_SPRINT_FLOW_DLY1);
   printf("\nout_SPRINT_FLOW_DLY1 %d",out_SPRINT_FLOW_DLY1[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SPRINT_FLOW_DLY2 de tipo TOND
SPRINT_FLOW_DLY2=SPRINT_FT62234LOG;
   TOND(SPRINT_FLOW_DLY2,TP_SPRINT_FLOW_DLY2,Time_factor,out_SPRINT_FLOW_DLY2);
   printf("\nout_SPRINT_FLOW_DLY2 %d",out_SPRINT_FLOW_DLY2[1]);

////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////DISPAROS////////////////////////////////////////////

   /*        
printf("\n SPRINT_OFF_1_SF_SEL_2 %d",SPRINT_OFF_1_SF_SEL_2);
printf("\n OUT_EVACUATE_LP_SPRINT_MANIFOLD %d",OUT_EVACUATE_LP_SPRINT_MANIFOLD);
printf("\n OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE %d",OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE);  
printf("\n EVACUATE_LP_SPRINT_MANIFOLD %d",EVACUATE_LP_SPRINT_MANIFOLD);    
printf("\n WAIT_FOR_XFER_DONE_BEFORE_PURGE %d",WAIT_FOR_XFER_DONE_BEFORE_PURGE);    
printf("\n OUT_PURGE_LP_SPRINT_MANIFOLD %d",OUT_PURGE_LP_SPRINT_MANIFOLD);   
printf("\n PURGE_LP_SPRINT_MANIFOLD %d",PURGE_LP_SPRINT_MANIFOLD);   

printf("\n  OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS %d",OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS);
printf("\n PURGE_FROM_SUPPLY_TO_THE_DRAINS %d",PURGE_FROM_SUPPLY_TO_THE_DRAINS);

printf("\n  PURGE_HP_SPRINT_MANIFOLD %d",PURGE_HP_SPRINT_MANIFOLD);
printf("\n  OUT_PURGE_HP_SPRINT_MANIFOLD %d",OUT_PURGE_HP_SPRINT_MANIFOLD);

printf("\n  SPRINT_OFF_4_T_COND_3 %d",SPRINT_OFF_4_T_COND_3);
printf("\n   OUT_SPRINT_SYSTEM_NOT_READY %d",OUT_SPRINT_SYSTEM_NOT_READY);
printf("\n   SPRINT_SYSTEM_NOT_READY %d",SPRINT_SYSTEM_NOT_READY);

printf("\n   SPRINT_LP_OFF_1_SF_SEL_1 %d",SPRINT_LP_OFF_1_SF_SEL_1);
printf("\n   OUT_HOLD_FOR_SPRAY_RAMP_DOWN %d",OUT_HOLD_FOR_SPRAY_RAMP_DOWN);
printf("\n   HOLD_FOR_SPRAY_RAMP_DOWN %d",HOLD_FOR_SPRAY_RAMP_DOWN);

printf("\n   OUT_HOLD_PRIOR_TO_LP_EVACUATION %d",OUT_HOLD_PRIOR_TO_LP_EVACUATION);
printf("\n   HOLD_PRIOR_TO_LP_EVACUATION %d",HOLD_PRIOR_TO_LP_EVACUATION);


printf("\n   OUT_EVACUATE_LP_SPRINT_MANIFOLD %d",OUT_EVACUATE_LP_SPRINT_MANIFOLD);
printf("\n   EVACUATE_LP_SPRINT_MANIFOLD %d",EVACUATE_LP_SPRINT_MANIFOLD);

printf("\n   OUT_WAIT_FOR_FUEL_XFER %d",OUT_WAIT_FOR_FUEL_XFER);
printf("\n   WAIT_FOR_FUEL_XFER %d",WAIT_FOR_FUEL_XFER);

printf("\n   SPRINT_LP_XFR_WT_T_COND_1 %d",SPRINT_LP_XFR_WT_T_COND_1);
printf("\n   OUT_HOLD_PRIOR_TO_LP_PURGE %d",OUT_HOLD_PRIOR_TO_LP_PURGE);
printf("\n   HOLD_PRIOR_TO_LP_PURGE %d",HOLD_PRIOR_TO_LP_PURGE);

printf("\n   OUT_PURGE_LP_SPRINT_MANIFOLD %d",OUT_PURGE_LP_SPRINT_MANIFOLD);
printf("\n   PURGE_LP_SPRINT_MANIFOLD %d",PURGE_LP_SPRINT_MANIFOLD);
*/
printf("\n   SPRINT_HP_OFF_1_SF_SEL_1 %d",SPRINT_HP_OFF_1_SF_SEL_1);
printf("\n   OUT_HOLD_FOR_SPRINT_RAMP_DOWN %d",OUT_HOLD_FOR_SPRINT_RAMP_DOWN);
printf("\n   HOLD_FOR_SPRINT_RAMP_DOWN %d",HOLD_FOR_SPRINT_RAMP_DOWN);

printf("\n   OUT_DRAIN_HP_SPRINT_PATH %d",OUT_DRAIN_HP_SPRINT_PATH);
printf("\n   DRAIN_HP_SPRINT_PATH %d",DRAIN_HP_SPRINT_PATH);

  printf("\n   SPRINT_JIMMY_SW2_NO %d",SPRINT_JIMMY_SW2_NO);
printf("\n   SPRINT_SPRINT_OUT %d",SPRINT_SPRINT_OUT);
 printf("\n   OUT_SPRINT_OK_TO_XFR %d",OUT_SPRINT_OK_TO_XFR); 
  
  
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCIONES PARA BLOQUES


//declaracion de variables pag_286

//SPRINT_SPRNTOFFOR

if(SPRINT_HP_ON_1==1||SPRINT_HP_ON_2==1)
{
SPRINT_OFF_1_SF_SEL_2=1;
}
else 
{
SPRINT_OFF_1_SF_SEL_2=0;
}
//EVACUATE_LP_SPRINT_MANIFOLD
if(NFALSE_SPRINT_NOTOFF==1)
{
if(SPRINT_HP_OFF_2==1&&SPRINT_OFF_1_SF_SEL_2==1)
{
OUT_EVACUATE_LP_SPRINT_MANIFOLD=1;
}
else 
{
OUT_EVACUATE_LP_SPRINT_MANIFOLD=0;
}
}

if(OUT_EVACUATE_LP_SPRINT_MANIFOLD==1)
{
                              EVACUATE_LP_SPRINT_MANIFOLD=1;      
                                    }
if(OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE==1)
{
                              EVACUATE_LP_SPRINT_MANIFOLD=0;      
                                    }
//WAIT_FOR_XFER_DONE_BEFORE_PURGE
if(EVACUATE_LP_SPRINT_MANIFOLD==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_EVAC_SW1==1)
{
OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE=1;
}
else 
{
OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE=0;
}
}
if(OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE==1)
{
                              WAIT_FOR_XFER_DONE_BEFORE_PURGE=1;      
                                    }
                                    
if(OUT_PURGE_LP_SPRINT_MANIFOLD==1)
{
                              WAIT_FOR_XFER_DONE_BEFORE_PURGE=0;      
                                    }                                    
                                    
//PURGE_LP_SPRINT_MANIFOLD
if(WAIT_FOR_XFER_DONE_BEFORE_PURGE==1)
{
if (SPRINT_GAS_OR_LIQ==1)
{
OUT_PURGE_LP_SPRINT_MANIFOLD=1;
}
else
{
   OUT_PURGE_LP_SPRINT_MANIFOLD=0;
   }
}   
if(OUT_PURGE_LP_SPRINT_MANIFOLD==1)
{
                              PURGE_LP_SPRINT_MANIFOLD=1;      
                                    } 
if(OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS==1)
{
                              PURGE_LP_SPRINT_MANIFOLD=0;      
                                    }                                     
                                    
                                       
//PURGE_FROM_SUPPLY_TO_THE_DRAINS

if(PURGE_LP_SPRINT_MANIFOLD==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_LP_PRG_TMR==1&&SPRINT_LP_OFF_5==1)
{
OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS=1;
}
else 
{
OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS=0;
}
}
if(OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS==1)
{
                              PURGE_FROM_SUPPLY_TO_THE_DRAINS=1;      
                                    } 
if(OUT_PURGE_HP_SPRINT_MANIFOLD==1)
{
                              PURGE_FROM_SUPPLY_TO_THE_DRAINS=0;      
                                    }                                     
//PURGE_HP_SPRINT_MANIFOLD
if(PURGE_FROM_SUPPLY_TO_THE_DRAINS==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_DN_PRG_TMR==1)
{
OUT_PURGE_HP_SPRINT_MANIFOLD=1;
}
else
{
OUT_PURGE_HP_SPRINT_MANIFOLD=0;
}
}
if(OUT_PURGE_HP_SPRINT_MANIFOLD==1)
{
                              PURGE_HP_SPRINT_MANIFOLD=1;      
                                    } 
if(OUT_SPRINT_SYSTEM_NOT_READY==1)
{
                              PURGE_HP_SPRINT_MANIFOLD=0;      
                                    } 


//SPRINT_TRAN_4_OR

if(SPRINT_HP_PRG_TMR==1||FALSE_SPRINT_TRAN_4_OR==1)
{
SPRINT_OFF_4_T_COND_3=1;
}
else 
{
SPRINT_OFF_4_T_COND_3=0;
}     
//SPRINT_SYSTEM_NOT_READY
if(PURGE_HP_SPRINT_MANIFOLD==1)
{ 
if(SPRINT_OFF_4_T_COND_3==1&&SPRINT_SPRT_READY==1&&SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1)
{
OUT_SPRINT_SYSTEM_NOT_READY=1;
}
else
{
OUT_SPRINT_SYSTEM_NOT_READY=0;
}
}
if(OUT_SPRINT_SYSTEM_NOT_READY==1)
{
                              SPRINT_SYSTEM_NOT_READY=1;      
                                    } 
if(NFALSE_SPRINT_NOTOFF==0)
{
                              SPRINT_SYSTEM_NOT_READY=0;      
                                OUT_EVACUATE_LP_SPRINT_MANIFOLD=0;
                                   OUT_WAIT_FOR_XFER_DONE_BEFORE_PURGE=0; 
                                    OUT_PURGE_LP_SPRINT_MANIFOLD=0;
                                    OUT_PURGE_FROM_SUPPLY_TO_THE_DRAINS=0;
                                   OUT_PURGE_HP_SPRINT_MANIFOLD=0;
                                   OUT_SPRINT_SYSTEM_NOT_READY=0;
                                   
                                    } 




//Llamada de funcion para invertir la entrada FALSE_SPRINT_NOTOFF
  NFALSE_SPRINT_NOTOFF=NOT(FALSE_SPRINT_NOTOFF);
  printf("\nNFALSE_SPRINT_NOTOFF %d",NFALSE_SPRINT_NOTOFF);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SPRINT_SPRYRMPOFF

if(SPRINT_HP_2_LP_1==1||SPRINT_HP_2_LP_2==1||SPRINT_HP_2_LP_3==1||SPRINT_LP_ON_1==1||SPRINT_LP_ON_2==1||SPRINT_LP_ON_3==1)
{
SPRINT_LP_OFF_1_SF_SEL_1=1;
}
else 
{
SPRINT_LP_OFF_1_SF_SEL_1=0;
}
//HOLD_FOR_SPRAY_RAMP_DOWN

if(PURGE_LP_SPRINT_MANIFOLD==0)
{
if(SPRINT_LP_OFF_1_SF_SEL_1==1)
{
OUT_HOLD_FOR_SPRAY_RAMP_DOWN=1;
}
else 
{
OUT_HOLD_FOR_SPRAY_RAMP_DOWN=0;
} 
}
if(OUT_HOLD_FOR_SPRAY_RAMP_DOWN==1)
{
                              HOLD_FOR_SPRAY_RAMP_DOWN=1;      
                                    }
                                 
if(OUT_HOLD_PRIOR_TO_LP_EVACUATION==1)
{
                              HOLD_FOR_SPRAY_RAMP_DOWN=0;      
                                    }
//HOLD_PRIOR_TO_LP_EVACUATION

if(HOLD_FOR_SPRAY_RAMP_DOWN==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_RAMP_DOWN==1)
{
OUT_HOLD_PRIOR_TO_LP_EVACUATION=1;
}
else 
{
OUT_HOLD_PRIOR_TO_LP_EVACUATION=0;
}
}
if(OUT_HOLD_PRIOR_TO_LP_EVACUATION==1)
{
                              HOLD_PRIOR_TO_LP_EVACUATION=1;      
  }
if(OUT_WAIT_FOR_FUEL_XFER==1)
{
                              HOLD_PRIOR_TO_LP_EVACUATION=0;      
  }  


//EVACUATE_LP_SPRINT_MANIFOLD

if(HOLD_PRIOR_TO_LP_EVACUATION==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_DLY_LPEHLD==1)
{
OUT_EVACUATE_LP_SPRINT_MANIFOLD=1;
}
else 
{
OUT_EVACUATE_LP_SPRINT_MANIFOLD=0;
}
}
if(OUT_EVACUATE_LP_SPRINT_MANIFOLD==1)
{
                              EVACUATE_LP_SPRINT_MANIFOLD=1;      
  }
if(OUT_WAIT_FOR_FUEL_XFER==1)
{
                              EVACUATE_LP_SPRINT_MANIFOLD=0;      
  }  
//WAIT_FOR_FUEL_XFER

if(EVACUATE_LP_SPRINT_MANIFOLD==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&TRUE_WAIT_FOR_FUEL_XFER==1)
{
OUT_WAIT_FOR_FUEL_XFER=1;
}
else 
{
OUT_WAIT_FOR_FUEL_XFER=0;
}
}
if(OUT_WAIT_FOR_FUEL_XFER==1)
{
                              WAIT_FOR_FUEL_XFER=1;      
  }
if(OUT_HOLD_PRIOR_TO_LP_PURGE==1)
{
                              WAIT_FOR_FUEL_XFER=0;      
  }
//SPRINT_GAS_OR_LIQ
if(FUEL_SYS_GAS100==1||CORE_DIGITAL_FUELOFF==1)
{
SPRINT_LP_XFR_WT_T_COND_1=1;
}
else
{
SPRINT_LP_XFR_WT_T_COND_1=0;
}

//HOLD_PRIOR_TO_LP_PURGE

if(WAIT_FOR_FUEL_XFER==1)
{
if(SPRINT_LP_XFR_WT_T_COND_1==1)
{
OUT_HOLD_PRIOR_TO_LP_PURGE=1;
}
else 
{
OUT_HOLD_PRIOR_TO_LP_PURGE=0;
} 
}
if(OUT_HOLD_PRIOR_TO_LP_PURGE==1)
{
                              HOLD_PRIOR_TO_LP_PURGE=1;      
                                    }
 if(OUT_PURGE_LP_SPRINT_MANIFOLD==1)
{
                              HOLD_PRIOR_TO_LP_PURGE=0;      
                                    }                                
//PURGE_LP_SPRINT_MANIFOLD

if(HOLD_PRIOR_TO_LP_PURGE==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_DLY_LPPHLD==1)
{
OUT_PURGE_LP_SPRINT_MANIFOLD=1;
}
else 
{
OUT_PURGE_LP_SPRINT_MANIFOLD=0;
}
}
if(OUT_PURGE_LP_SPRINT_MANIFOLD==1)
{
                              PURGE_LP_SPRINT_MANIFOLD=1;      
  }
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_LP_PRG_TMR==1)
{
                              PURGE_LP_SPRINT_MANIFOLD=0;      
  OUT_HOLD_FOR_SPRAY_RAMP_DOWN=0;
  OUT_HOLD_PRIOR_TO_LP_EVACUATION=0;
  OUT_EVACUATE_LP_SPRINT_MANIFOLD=0;
  OUT_WAIT_FOR_FUEL_XFER=0;
  OUT_HOLD_PRIOR_TO_LP_PURGE=0;
  OUT_PURGE_LP_SPRINT_MANIFOLD=0;
  
  
  }

//SPRINT_SPRTRMPOFF_OR

if(SPRINT_LP_2_HP_1==1||SPRINT_LP_2_HP_2==1||SPRINT_LP_2_HP_3==1||SPRINT_LP_2_HP_4==1||SPRINT_LP_2_HP_5==1||SPRINT_HP_ON_3==1)
{
SPRINT_HP_OFF_1_SF_SEL_1=1;
}
else 
{
SPRINT_HP_OFF_1_SF_SEL_1=0;
}


//HOLD_FOR_SPRINT_RAMP_DOWN

if(DRAIN_HP_SPRINT_PATH==0)
{
if(SPRINT_HP_OFF_1_SF_SEL_1==1)
{
OUT_HOLD_FOR_SPRINT_RAMP_DOWN=1;
}
else 
{
OUT_HOLD_FOR_SPRINT_RAMP_DOWN=0;
} 
}
if(OUT_HOLD_FOR_SPRINT_RAMP_DOWN==1)
{
                              HOLD_FOR_SPRINT_RAMP_DOWN=1;      
                                    }
 if(OUT_PURGE_LP_SPRINT_MANIFOLD==1)
{
                              HOLD_FOR_SPRINT_RAMP_DOWN=0;      
                                    }   

//DRAIN_HP_SPRINT_PATH
if(HOLD_FOR_SPRINT_RAMP_DOWN==1)
{
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_RAMP_DOWN==1)
{
OUT_DRAIN_HP_SPRINT_PATH=1;
}
else 
{
OUT_DRAIN_HP_SPRINT_PATH=0;
}
}
if(OUT_DRAIN_HP_SPRINT_PATH==1)
{
                              DRAIN_HP_SPRINT_PATH=1;      
  }
if(SPRINT_SEL_SPRINT==1&&SPRINT_SEL_SPRAY==1&&SPRINT_DRAINHP_TM==1)
{
                              DRAIN_HP_SPRINT_PATH=0;      

  }

//Llamada de funcion para invertir la entrada FALSE_SPRINT_NOT_RUNNIN
  NFALSE_SPRINT_NOT_RUNNIN=NOT(FALSE_SPRINT_NOT_RUNNIN);
  printf("\nNFALSE_SPRINT_NOT_RUNNIN %d",NFALSE_SPRINT_NOT_RUNNIN);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


if(NFALSE_SPRINT_NOT_RUNNIN==1&&SPRINT_OFF_4==1)
{
SPRINT_JIMMY_SW2_NO=1;
}
else 
{
SPRINT_JIMMY_SW2_NO=0;
}

if(SPRINT_HP_OFF_2==1||SPRINT_LP_OFF_3==1||SPRINT_LP_OFF_5==1||SPRINT_OFF_1==1||SPRINT_OFF_2==1||SPRINT_OFF_3==1||SPRINT_MASK_PURGE==1||SPRINT_NOTREADY==1)
{
SPRINT_SPRINT_OUT=1;
}
else 
{
SPRINT_SPRINT_OUT=0;
}

if(SPRINT_LP_XFR_WT==1||SPRINT_OFF_WT_XFR==1||SPRINT_NOTREADY==1)
{
OUT_SPRINT_OK_TO_XFR=1;
}
else 
{
OUT_SPRINT_OK_TO_XFR=0;
}

////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////ALARMAS/////////////////////////////////////////////

	printf(" ");


//variables a imprimir//  

//AQUI EMPIEZA MI IMPRESION DE VARIABLES//

       //IMPRESIÒN DE VARIABLES HOJA 272//
       /*
       printf("\nN1N10_RTD_TE64030_LATCH_OR=%d",N1N10_RTD_TE64030_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE64030LOG_A_IN_1=%f",OUT_A_SW_VENT_TE64030LOG_A_IN_1);
       printf("\nN1N10_RTD_TE64031_LATCH_OR=%d",N1N10_RTD_TE64031_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE64031LOG_A_IN_1=%f",OUT_A_SW_VENT_TE64031LOG_A_IN_1);
       printf("\nN1N10_RTD_TE64032_LATCH_OR=%d",N1N10_RTD_TE64032_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE64032LOG_A_IN_1=%f",OUT_A_SW_VENT_TE64032LOG_A_IN_1);
       printf("\nN1N10_RTD_TE64033_LATCH_OR=%d",N1N10_RTD_TE64033_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE64033LOG_A_IN_1=%f",OUT_A_SW_VENT_TE64033LOG_A_IN_1);
       printf("\nN1N10_RTD_TE6450_LATCH_OR=%d",N1N10_RTD_TE6450_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE6450LOG_A_IN_1=%f",OUT_A_SW_VENT_TE6450LOG_A_IN_1);
       printf("\nN1N10_RTD_TE6499_LATCH_OR=%d",N1N10_RTD_TE6499_LATCH_OR);
       printf("\nOUT_A_SW_VENT_TE6499LOG_A_IN_1=%f",OUT_A_SW_VENT_TE6499LOG_A_IN_1);
       printf("\nOUT_SUB_VENT_AIRTMP_DF_IN=%f",OUT_SUB_VENT_AIRTMP_DF_IN);
       printf("\nOUT_ABS_VENT_AIRTMPCMPR_IN_1=%f",OUT_ABS_VENT_AIRTMPCMPR_IN_1);
       printf("\nOUT_A_CMPR_VENT_AIRTMPDIFM_IN_2=%d",OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2);
       printf("\n*FALSE_VENT_AIRTMPDIFM=%d",FALSE_VENT_AIRTMPDIFM);
       printf("\nOUT_AND_VENT_AIRDIFFALM_IN=%d",OUT_AND_VENT_AIRDIFFALM_IN);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 273//

       printf("\nVENT_AIRAVERAGE_IN=%f",VENT_AIRAVERAGE_IN);
       printf("\nVENT_AIR_AVG_C_IN=%f",VENT_AIR_AVG_C_IN);
       printf("\nOUT_A_CMPR_VENT_T0_GT_10=%d",OUT_A_CMPR_VENT_T0_GT_10);             
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 274//
       
       printf("\nIO_FLT_TE64030VST=%d",IO_FLT_TE64030VST);
       printf("\nOUT_A_SW_VENT_INLETT2LSS_IN_1=%f",OUT_A_SW_VENT_INLETT2LSS_IN_1);
       printf("\nIO_FLT_TE64031VST=%d",IO_FLT_TE64031VST);
       printf("\nOUT_A_SW_VENT_INLETT2LSS_IN_2=%f",OUT_A_SW_VENT_INLETT2LSS_IN_2);
       printf("\nIO_FLT_TE64032VST=%d",IO_FLT_TE64032VST);
       printf("\nOUT_A_SW_VENT_INLETT2LSS_IN_3=%f",OUT_A_SW_VENT_INLETT2LSS_IN_3);
       printf("\nIO_FLT_TE64033VST=%d",IO_FLT_TE64033VST);
       printf("\nOUT_A_SW_VENT_INLETT2LSS_IN_4=%f",OUT_A_SW_VENT_INLETT2LSS_IN_4);
       printf("\nOUT_LSS_BUS_VENT_INLETT2LSS=%f",OUT_LSS_BUS_VENT_INLETT2LSS);
       printf("\nOUT_A_CMPR_VENT_ICEALM_SW_NO=%d",OUT_A_CMPR_VENT_ICEALM_SW_NO);
       printf("\nOUT_A_CMPR_VENT_INLET_LT43_IN=%d",OUT_A_CMPR_VENT_INLET_LT43_IN);
       printf("\nGENERATOR_GEN_BKRCLS=%d",GENERATOR_GEN_BKRCLS);
       printf("\nVENT_ANTI_ICE=%d",VENT_ANTI_ICE);
       printf("\nOUT_AND_VENT_ICE_DLY_TRIGGER=%d",OUT_AND_VENT_ICE_DLY_TRIGGER);
       printf("\nOUT_OR_VENT_MOT68330_IN=%d",OUT_OR_VENT_MOT68330_IN);       
       printf("\nout_DLY_VENT_DAMPER_SW_CTRL=%d",out_DLY_VENT_DAMPER_SW_CTRL[1]);
       printf("\nOUT_A_SW_VENT_DMPR_RATE_IN=%f",OUT_A_SW_VENT_DMPR_RATE_IN);
       printf("\nVENT_DAMPER_SW_NO=%f",VENT_DAMPER_SW_NO);
       printf("\nVENT_ZV64181_IN=%f",VENT_ZV64181_IN);
       printf("\nOUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=%f",OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2);
       printf("\nVENT_T2SEL=%f",VENT_T2SEL);
       printf("\nOUT_SUB_VENT_T2_T0_CMP_IN_2=%f",OUT_SUB_VENT_T2_T0_CMP_IN_2);
       printf("\nout_DLY_VENT_ICEALM_MSK_IN_3=%d",out_DLY_VENT_ICEALM_MSK_IN_3[1]);
       printf("\nOUT_A_CMPR_VENT_ICEALM_MSK_IN_1=%f",OUT_A_CMPR_VENT_ICEALM_MSK_IN_1);
       printf("\nOUT_AND_VENT_ICESYS_ALM_IN=%d",OUT_AND_VENT_ICESYS_ALM_IN);
       printf("\nOUT_LSS_BUS_VENT_ICINGLOG_A_IN_1=%f",OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1);
       printf("\nOUT_LSS_BUS_VENT_CONDAIR_SW_NO=%f",OUT_LSS_BUS_VENT_CONDAIR_SW_NO);
       printf("\n*FALSE_VENT_CONDAIR_SW=%d",FALSE_VENT_CONDAIR_SW);
       printf("\nOUT_A_SW_VENT_ICINGLOG_A_IN_2=%f",OUT_A_SW_VENT_ICINGLOG_A_IN_2);
       printf("\nTRUE_VENT_ICEALM_SW=%d",TRUE_VENT_ICEALM_SW);
       printf("\nVENT_ICEALM_SW_NC=%f",VENT_ICEALM_SW_NC);
       printf("\nOUT_B_SW_VENT_ICING_IN=%d",OUT_B_SW_VENT_ICING_IN);
       
       
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 275//
       
       printf("\nVENT_G_FNA_TMR=%d",VENT_G_FNA_TMR);
       printf("\nVENT_G_FNB_TMR=%d",VENT_G_FNB_TMR);
       printf("\nVENT_T_FNA_TMR=%d",VENT_T_FNA_TMR);
       printf("\nVENT_T_FNB_TMR=%d",VENT_T_FNB_TMR);
       printf("\nVENT_ENCLPRG=%d",VENT_ENCLPRG);
       printf("\nVENT_PRGFLDLY=%d",VENT_PRGFLDLY);
       printf("\nVENT_PSTCLDNTMR=%d",VENT_PSTCLDNTMR);
       printf("\nSHUTDOWN_COOLAIRTMR=%d",SHUTDOWN_COOLAIRTMR);
       printf("\nSFC_STEP_SYNC_COOL=%d",SFC_STEP_SYNC_COOL);
       printf("\nVENT_G_POSTDLY=%d",VENT_G_POSTDLY);
       printf("\nVENT_G_FAN_ATM_IN=%f",VENT_G_FAN_ATM_IN);
       printf("\nVENT_G_FAN_BTM_IN=%f",VENT_G_FAN_BTM_IN);
       printf("\nVENT_T_FAN_ATM_IN=%f",VENT_T_FAN_ATM_IN);
       printf("\nVENT_T_FAN_BTM_IN=%f",VENT_T_FAN_BTM_IN);
       printf("\nVENT_ENCL_PRGTM_IN=%f",VENT_ENCL_PRGTM_IN);
       printf("\nVENT_PRGFLTMR_IN=%f",VENT_PRGFLTMR_IN);
       printf("\nVENT_PSTVNET_T_IN=%f",VENT_PSTVNET_T_IN);
       printf("\nVENT_PSTCLDN_T_IN=%f",VENT_PSTCLDN_T_IN);
       printf("\nSFC_TIMER_SYNCCL_T_IN=%f",SFC_TIMER_SYNCCL_T_IN);
       printf("\nVENT_PSTVNET_G_IN=%f",VENT_PSTVNET_G_IN);
       printf("\nOUT_TC_MON_VENT_STATOR_TMP=%d",OUT_TC_MON_VENT_STATOR_TMP);
       printf("\nOUT_I_CMPR_VENT_PSTCLDNON_IN=%d",OUT_I_CMPR_VENT_PSTCLDNON_IN);
       printf("\nOUT_A_CMPR_VENT_GFANS_OFF_IN_1=%d",OUT_A_CMPR_VENT_GFANS_OFF_IN_1);
       printf("\nVENT_AIRFILTAVG_TC_MON=%f",VENT_AIRFILTAVG_TC_MON);
       printf("\nOUT_A_CMPR_VENT_GFANS_OFF_IN_2=%d",OUT_A_CMPR_VENT_GFANS_OFF_IN_2);
       printf("\nOUT_A_CMPR_VENT_STATORGT14=%d",OUT_A_CMPR_VENT_STATORGT14);            
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 276//
       
       printf("\nFALSE_AUX_SKID_TE64028VST=%d",FALSE_AUX_SKID_TE64028VST);
       printf("\nout_DLY_AUX_SKID_MASKFANON1 %d",out_DLY_AUX_SKID_MASKFANON1[1]);
       printf("\nAUX_SKID_TE64028LOG_B_OUT_1=%d",AUX_SKID_TE64028LOG_B_OUT_1);
       printf("\nOUT_AND_AUX_SKID_MOT64026_IN=%d",OUT_AND_AUX_SKID_MOT64026_IN);
       printf("\nAUX_SKID_TE64028LOG_B_OUT_2=%d",AUX_SKID_TE64028LOG_B_OUT_2);
       printf("\nAUX_SKID_TE64028LOG_B_OUT_3=%d",AUX_SKID_TE64028LOG_B_OUT_3);
       printf("\nOUT_AND_AUX_SKID_MOT64027_IN=%d",OUT_AND_AUX_SKID_MOT64027_IN);
       printf("\nOUT_OR_AUX_SKID_DLY_OFF_TRIGGER=%d",OUT_OR_AUX_SKID_DLY_OFF_TRIGGER); 
       printf("\nout_DLY_AUX_SKID_SOV64083_IN %d",out_DLY_AUX_SKID_SOV64083_IN[1]);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 277//

       printf("\n*FALSE_GENERATOR_UTIL_SW=%d",FALSE_GENERATOR_UTIL_SW);
       printf("\nOUT_GENERATOR_UTIL_SW_B_SW=%d",OUT_GENERATOR_UTIL_SW_B_SW);
	   printf("\nGENERATOR_GEN_BKRCLS=%d",GENERATOR_GEN_BKRCLS);
	   printf("\nOUT_GENERATOR_PSS_ONENBL_AND=%d",OUT_GENERATOR_PSS_ONENBL_AND);
	   //////////////////////////////////////////////////////////////////////////

	   //IMPRESIÒN DE VARIABLES HOJA 278//

	   printf("\nN3N42_BI_UTIL_CLSD=%d",N3N42_BI_UTIL_CLSD);
	   printf("\nFALSE_GENERATOR_GSO21_OPIN=%d",FALSE_GENERATOR_GSO21_OPIN);
	   printf("\nOUT_GENERATOR_UTILITY_AND=%d",OUT_GENERATOR_UTILITY_AND);
	   printf("\nA1_A12_BI2_K229=%d",A1_A12_BI2_K229);
	   printf("\nFALSE_GENERATOR_CMD_ISOC=%d",FALSE_GENERATOR_CMD_ISOC);
	   printf("\nFALSE_GENERATOR_STP_SYNCIN=%d",FALSE_GENERATOR_STP_SYNCIN);
	   printf("\nOUT_GENERATOR_DROOP_AND=%d",OUT_GENERATOR_DROOP_AND);
	   printf("\n*FALSE_GENERATOR_SEL_DROOP=%d",FALSE_GENERATOR_SEL_DROOP);
	   printf("\nOUT_GENERATOR_SEL_DROOP_B_SW=%d",OUT_GENERATOR_SEL_DROOP_B_SW);
	   printf("\nSHUTDOWN_CDLO=%d",SHUTDOWN_CDLO);
	   printf("\nGENERATOR_DROOP=%d",GENERATOR_DROOP);
	   printf("\nGENERATOR_ISOCH=%d",GENERATOR_ISOCH);
	   printf("\nOUT_GENERATOR_NSDROOP_AND=%d",OUT_GENERATOR_NSDROOP_AND);
	   printf("\nOUT_GENERATOR_NSISOCH_AND=%d",OUT_GENERATOR_NSISOCH_AND);
	   printf("\nNA1_A12_BI1_BRKR_FAIL=%d",NA1_A12_BI1_BRKR_FAIL);
	   printf("\nN3N39_BI_RTRGRNDFLT=%d",N3N39_BI_RTRGRNDFLT);
	   printf("\nSPEED_SW_NSDGT3590=%d",SPEED_SW_NSDGT3590);
	   printf("\nOUT_GENERATOR_RTRGNDMSK_AND=%d",OUT_GENERATOR_RTRGNDMSK_AND);
	   printf("\nNN3N39_BI_DIODE_FAIL=%d",NN3N39_BI_DIODE_FAIL);
       printf("\nNN3N39_BI_AVR_FAULT=%d",NN3N39_BI_AVR_FAULT);
       printf("\nNN3N40_BI_CUST_86T=%d",NN3N40_BI_CUST_86T);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 279//

       printf("\nN3N42_BI_IGPS52GTRP_BI_L=%d",N3N42_BI_IGPS52GTRP_BI_L);
       printf("\nNN3N42_BI_IGPS52GTRP_BI_L=%d",NN3N42_BI_IGPS52GTRP_BI_L);
       printf("\nN3N42_BI_IGPSFLTALM_BI_L=%d",N3N42_BI_IGPSFLTALM_BI_L);
       printf("\nNN3N42_BI_IGPSFLTALM_BI_L=%d",NN3N42_BI_IGPSFLTALM_BI_L);
       printf("\nTRUE_GENERATOR_IGPSFDLT12=%d",TRUE_GENERATOR_IGPSFDLT12);
       printf("\nOUT_B_SW_GENERATOR_N_IGPSFAIL_IN=%d",OUT_B_SW_GENERATOR_N_IGPSFAIL_IN);
       printf("\nNOUT_B_SW_GENERATOR_N_IGPSFAIL_IN=%d",NOUT_B_SW_GENERATOR_N_IGPSFAIL_IN);
       printf("\nSPEED_SW_NSDGT3590=%d",SPEED_SW_NSDGT3590);
       printf("\nN3N39_BI_GEN_EX_LIM_BI_L=%d",N3N39_BI_GEN_EX_LIM_BI_L);
       printf("\nOUT_AND_GENERATOR_GEN_EX_LIM_IN=%d",OUT_AND_GENERATOR_GEN_EX_LIM_IN);
       printf("\nN3N42_BI_GEN_86TRPL_BI_L=%d",N3N42_BI_GEN_86TRPL_BI_L);
       printf("\nNN3N42_BI_GEN_86TRPL_BI_L=%d",NN3N42_BI_GEN_86TRPL_BI_L);
       printf("\nA1_A12_BI1_TRIP_86_BIO_BI=%d",A1_A12_BI1_TRIP_86_BIO_BI);
       printf("\nNA1_A12_BI1_TRIP_86_BIO_BI=%d",NA1_A12_BI1_TRIP_86_BIO_BI);
       printf("\nN3N39_BI_AVR_SUMALM_BI_L_NOT=%d",N3N39_BI_AVR_SUMALM_BI_L_NOT);
       printf("\nSPEED_SW_NSDGT3240=%d",SPEED_SW_NSDGT3240);
       printf("\nOUT_AND_GENERATOR_AVRALM_DLY_TRIGGER=%d",OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER);
       printf("\nout_DLY_GENERATOR_AVR_ALARM_IN %d",out_DLY_GENERATOR_AVR_ALARM_IN[1]);
       printf("\nSFC_STEP_RST_AND_ST=%d",SFC_STEP_RST_AND_ST);
       printf("\nOUT_OR_GENERATOR_AVR_NOT_ON=%d",OUT_OR_GENERATOR_AVR_NOT_ON);
       printf("\nOUT_OR_GENERATOR_AVR_SDOFF_RST=%d",OUT_OR_GENERATOR_AVR_SDOFF_RST);
       printf("\nSHUTDOWN_ANY_SD=%d",SHUTDOWN_ANY_SD);
       printf("\nout_LATCH_GENERATOR_RESET85PCT_IN_3=%d",out_LATCH_GENERATOR_RESET85PCT_IN_3[1]);
       printf("\nSPEED_SW_NSDLT3060=%d",SPEED_SW_NSDLT3060);
       printf("\nGENERATOR_GEN_BKROPN=%d",GENERATOR_GEN_BKROPN);
       printf("\nOUT_AND_GENERATOR_AVR_OFF_IN_1=%d",OUT_AND_GENERATOR_AVR_OFF_IN_1);
       printf("\nSHUTDOWN_SD_CORE=%d",SHUTDOWN_SD_CORE);
       printf("\nSHUTDOWN_SDN_CORE=%d",SHUTDOWN_SDN_CORE);
       printf("\nOUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK=%d",OUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK);
       printf("\nGENERATOR_AVR_ON_RST=%d",GENERATOR_AVR_ON_RST);
       printf("\nout_LATCH_R_GENERATOR_COND_OR85_IN_1 %d",out_LATCH_R_GENERATOR_COND_OR85_IN_1[1]);
       printf("\nGENERATOR_CONDENSING=%d",GENERATOR_CONDENSING);
       printf("\nOUT_OR_GENERATOR_EXCTR_ON_IN=%d",OUT_OR_GENERATOR_EXCTR_ON_IN);
       printf("\nout_DLY_GENERATOR_MASK_2_IN_1=%d",out_DLY_GENERATOR_MASK_2_IN_1[1]);
       printf("\nGENERATOR_EXCTR_ON=%d",GENERATOR_EXCTR_ON);
       printf("\nN3N39_BI_EXCIT_ALM_BI_L=%d",N3N39_BI_EXCIT_ALM_BI_L);
       printf("\nOUT_AND_GENERATOR_EXCIT_ALM_IN=%d",OUT_AND_GENERATOR_EXCIT_ALM_IN);
       printf("\nN3N18_AI_EAX_AI_420_L=%f",N3N18_AI_EAX_AI_420_L);
       printf("\OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2=%d",OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2);
       printf("\nOUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER=%d",OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER);
       printf("\nout_DLY_GENERATOR_EAXALMLAT_IN_1=%d",out_DLY_GENERATOR_EAXALMLAT_IN_1[1]);     
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 280//
       
       printf("\nCORE_DIGITAL_FUELOFF=%d",CORE_DIGITAL_FUELOFF);     
       printf("\nSHUTDOWN_SD_CORE=%d",SHUTDOWN_SD_CORE);     
       printf("\nSHUTDOWN_SDN_CORE=%d",SHUTDOWN_SDN_CORE);     
       printf("\nSHUTDOWN_STEPIDLE=%d",SHUTDOWN_STEPIDLE);     
       printf("\nGENERATOR_GEN86TRIPL=%d",GENERATOR_GEN86TRIPL);     
       printf("\nGENERATOR_GEN86TRIPR=%d",GENERATOR_GEN86TRIPR);     
       printf("\nSHUTDOWN_DMINTONS=%d",SHUTDOWN_DMINTONS);     
       printf("\nSFC_STEP_NORM_3_SFC_STEP=%d",SFC_STEP_NORM_3_SFC_STEP);     
       printf("\nALARM_HMI_STI=%d",ALARM_HMI_STI);     
       printf("\nGENERATOR_STP_2_SYNC=%d",GENERATOR_STP_2_SYNC);     
       printf("\nSPEED_SW_NSDLT3420=%d",SPEED_SW_NSDLT3420);
       printf("\nOUT_OR_GENERATOR_BKR_OK_RST=%d",OUT_OR_GENERATOR_BKR_OK_RST);
       printf("\nSHUTDOWN_NO_SHTDNS=%d",SHUTDOWN_NO_SHTDNS);
       printf("\nSPEED_SW_NSDGT3590=%d",SPEED_SW_NSDGT3590);
       printf("\nOUT_AND_GENERATOR_BKR_OK_TRIGGER=%d",OUT_AND_GENERATOR_BKR_OK_TRIGGER);
       printf("\nout_LATCH_GENERATOR_K85_IN %d",out_LATCH_GENERATOR_K85_IN[1]);
       printf("\nN3N42_BI_AUTO_SYNC_BI_L=%d",N3N42_BI_AUTO_SYNC_BI_L);
       printf("\nSFC_TIMER_WARMUP_DN=%d",SFC_TIMER_WARMUP_DN);
       printf("\nSFC_STEP_READY2SYNC_SFC_STEP=%d",SFC_STEP_READY2SYNC_SFC_STEP);
       printf("\nOUT_AND_GENERATOR_SYNC_ENABL_IN=%d",OUT_AND_GENERATOR_SYNC_ENABL_IN);
       printf("\nGENERATOR_EXCIT_ALM=%d",GENERATOR_EXCIT_ALM);
       printf("\nGENERATOR_GEN_EX_LIM=%d",GENERATOR_GEN_EX_LIM);
       printf("\nGENERATOR_DIODE_FAIL=%d",GENERATOR_DIODE_FAIL);
       printf("\nGENERATOR_AVR_ALARM=%d",GENERATOR_AVR_ALARM);
       printf("\nGENERATOR_AVR_FAULT=%d",GENERATOR_AVR_FAULT);
       printf("\nOUT_OR_GENERATOR_EX_SUMMARY_IN=%d",OUT_OR_GENERATOR_EX_SUMMARY_IN);
       printf("\nTRUE_GENERATOR_NOTLSH6834=%d",TRUE_GENERATOR_NOTLSH6834);
       printf("\nNTRUE_GENERATOR_NOTLSH6834=%d",NTRUE_GENERATOR_NOTLSH6834);
       printf("\nGENERATOR_TE6432=%f",GENERATOR_TE6432);
       printf("\nOUT_A_CMPR_GENERATOR_TE6432_H_IN=%d",OUT_A_CMPR_GENERATOR_TE6432_H_IN);
       printf("\nGENERATOR_TE6433=%f",GENERATOR_TE6433);
       printf("\nOUT_A_CMPR_GENERATOR_TE6433_H_IN=%d",OUT_A_CMPR_GENERATOR_TE6433_H_IN);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 281//
              
       printf("\nIFACE_SPRINT_C_H2ORAISE=%d",IFACE_SPRINT_C_H2ORAISE);
       printf("\nOUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN=%f",OUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN);
       printf("\nSPRINT_LP_ON_3_SFC_STEP=%d",SPRINT_LP_ON_3_SFC_STEP);
       printf("\nSPRINT_HP_2_LP_1_SFC_STEP=%d",SPRINT_HP_2_LP_1_SFC_STEP);
       printf("\nSPRINT_HP_2_LP_2_SFC_STEP=%d",SPRINT_HP_2_LP_2_SFC_STEP);
       printf("\nSPRINT_HP_2_LP_3_SFC_STEP=%d",SPRINT_HP_2_LP_3_SFC_STEP);
       printf("\nSPRINT_LP_OFF_1_SFC_STEP=%d",SPRINT_LP_OFF_1_SFC_STEP);
       printf("\nSPRINT_HP_ON_3_SFC_STEP=%d",SPRINT_HP_ON_3_SFC_STEP);
       printf("\nSPRINT_LP_2_HP_1_SFC_STEP=%d",SPRINT_LP_2_HP_1_SFC_STEP);
       printf("\nSPRINT_LP_2_HP_2_SFC_STEP=%d",SPRINT_LP_2_HP_2_SFC_STEP);
       printf("\nSPRINT_LP_2_HP_3_SFC_STEP=%d",SPRINT_LP_2_HP_3_SFC_STEP);
       printf("\nSPRINT_LP_2_HP_4_SFC_STEP=%d",SPRINT_LP_2_HP_4_SFC_STEP);
       printf("\nSPRINT_LP_2_HP_5_SFC_STEP=%d",SPRINT_LP_2_HP_5_SFC_STEP);
       printf("\nSPRINT_HP_OFF_1_SFC_STEP=%d",SPRINT_HP_OFF_1_SFC_STEP);
       printf("\nOUT_OR_IFACE_CORE_Z_SPRINTON_IN=%d",OUT_OR_IFACE_CORE_Z_SPRINTON_IN);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 282//
       
       printf("\nFALSE_SPRINT_OPTION=%d",FALSE_SPRINT_OPTION);
       printf("\nOUT_ZMINUS1_B_SPRINT_OPTION_IN_2=%d",OUT_ZMINUS1_B_SPRINT_OPTION_IN_2);
       printf("\nOUT_AND_SPRINT_ENBL_RST=%d",OUT_AND_SPRINT_ENBL_RST);
       printf("\nOUT_T_FF_SPRINT_SPRINTEN_IN_1=%d",OUT_T_FF_SPRINT_SPRINTEN_IN_1);
       printf("\nOUT_AND_SPRINT_SPRINTEN_IN_2=%d",OUT_AND_SPRINT_SPRINTEN_IN_2);
       printf("\nOUT_AND_SPRINT_SPRINTENBL_IN=%d",OUT_AND_SPRINT_SPRINTENBL_IN);
       printf("\nSPRINT_SPRINTENBL=%d",SPRINT_SPRINTENBL);
       printf("\nNSPRINT_SPRINTENBL=%d",NSPRINT_SPRINTENBL);
       printf("\nCORE_ALM_SPRT1_SPRSDALM1=%d",CORE_ALM_SPRT1_SPRSDALM1);
       printf("\nCORE_ALM_SPRT2_SPRSDALM2=%d",CORE_ALM_SPRT2_SPRSDALM2);
       printf("\nCORE_ALM_SPRT3_SPRSDALM3=%d",CORE_ALM_SPRT3_SPRSDALM3);
       printf("\nOUT_NOR_SPRINT_READY_EN_IN_10=%d",OUT_NOR_SPRINT_READY_EN_IN_10);
       printf("\nIFACE_SPRINT_BRNSPRNTOK=%d",IFACE_SPRINT_BRNSPRNTOK);
       printf("\nIFACE_SPRINT_T2SPRNTOK=%d",IFACE_SPRINT_T2SPRNTOK);
       printf("\nIFACE_SPRINT_DWBSPRNTOK=%d",IFACE_SPRINT_DWBSPRNTOK);
       printf("\nIFACE_SPRINT_P8THGOOD=%d",IFACE_SPRINT_P8THGOOD);
       printf("\nIFACE_SPRINT_P8THEGOOD=%d",IFACE_SPRINT_P8THEGOOD);
       printf("\nIFACE_SPRINT_NSDREFSPRT=%d",IFACE_SPRINT_NSDREFSPRT);
       printf("\nIFACE_SPRINT_LIQDMDOK=%d",IFACE_SPRINT_LIQDMDOK);
       printf("\nTRUE_SPRINT_FUELSYSRDY=%d",TRUE_SPRINT_FUELSYSRDY);
       printf("\nIFACE_SPRINT_PS3SPROK=%d",IFACE_SPRINT_PS3SPROK);
       printf("\nOUT_AND_SPRINT_SPRINTEN_IN_2=%d",OUT_AND_SPRINT_SPRINTEN_IN_2);
       printf("\nFALSE_SPRINT_SIM_SPRT=%d",FALSE_SPRINT_SIM_SPRT);
       printf("\nSPRINT_ALLOWTEST=%d",SPRINT_ALLOWTEST);
       printf("\nOUT_AND_SPRINT_SPRT_READY_T_COND_4=%d",OUT_AND_SPRINT_SPRT_READY_T_COND_4);
       printf("\nFALSE_SPRINT_SIM_SPRAY=%d",FALSE_SPRINT_SIM_SPRAY);
       printf("\nOUT_AND_SPRINT_SPRT_READY_T_COND_5=%d",OUT_AND_SPRINT_SPRT_READY_T_COND_5);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 283//
       
       printf("\nSPRINT_HP_ON_2_SFC_STEP=%d",SPRINT_HP_ON_2_SFC_STEP);
       printf("\nSPRINT_LP_ON_2SFC_STEP=%d",SPRINT_LP_ON_2SFC_STEP);
       printf("\nOUT_OR_SPRINT_FILL_DLY_TRIGGER=%d",OUT_OR_SPRINT_FILL_DLY_TRIGGER);
       printf("\nFALSE_SPRINT_TEST_TIMER=%d",FALSE_SPRINT_TEST_TIMER);
       printf("\nOUT_A_SW_SPRINT_FILL_DLY_DLY_TIME=%f",OUT_A_SW_SPRINT_FILL_DLY_DLY_TIME);       
       printf("\nSPRINT_PT62234=%f",SPRINT_PT62234);
       printf("\nOUT_A_CMPR_SPRINT_FILL_DN_IN_2=%d",OUT_A_CMPR_SPRINT_FILL_DN_IN_2);
       printf("\nOUT_OR_SPRINT_LP_ON_2_T_COND_3=%d",OUT_OR_SPRINT_LP_ON_2_T_COND_3);
       printf("\nSPRINT_HP_2_LP_3_SFC_STEP=%d",SPRINT_HP_2_LP_3_SFC_STEP);
       printf("\nSPRINT_HP_OFF_2_SFC_STEP=%d",SPRINT_HP_OFF_2_SFC_STEP);
       printf("\nOUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK=%d",OUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK);
       printf("\nSPRINT_LP_2_HP_2_SFC_STEP=%d",SPRINT_LP_2_HP_2_SFC_STEP);
       printf("\nSPRINT_LP_OFF_2_SFC_STEP=%d",SPRINT_LP_OFF_2_SFC_STEP);
       printf("\nOUT_OR_SPRINT_LP_E_Z_FEEDBACK=%d",OUT_OR_SPRINT_LP_E_Z_FEEDBACK);
       printf("\nSPRINT_LP_2_HP_3_SFC_STEP=%d",SPRINT_LP_2_HP_3_SFC_STEP);
       printf("\nSPRINT_LP_OFF_3_SFC_STEP=%d",SPRINT_LP_OFF_3_SFC_STEP);
       printf("\nSPRINT_OFF_1_SFC_STEP=%d",SPRINT_OFF_1_SFC_STEP);
       printf("\nOUT_OR_SPRINT_EVAC_Z_FEEDBACK=%d",OUT_OR_SPRINT_EVAC_Z_FEEDBACK);
       printf("\nSPRINT_LP_2_HP_5_SFC_STEP=%d",SPRINT_LP_2_HP_5_SFC_STEP);
       printf("\nSPRINT_LP_OFF_5_SFC_STEP=%d",SPRINT_LP_OFF_5_SFC_STEP);
       printf("\nSPRINT_OFF_2_SFC_STEP=%d",SPRINT_OFF_2_SFC_STEP);
       printf("\nOUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK=%d",OUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK);
       printf("\nSPRINT_OFF_4_SFC_STEP=%d",SPRINT_OFF_4_SFC_STEP);
       printf("\nOUT_OR_SPRINT_JIMMY_SW2_NC=%d",OUT_OR_SPRINT_JIMMY_SW2_NC);
       printf("\nFALSE_SPRINT_JIMMY_SPRT=%d",FALSE_SPRINT_JIMMY_SPRT);
       printf("\nSPRINT_MASK_PURGE=%d",SPRINT_MASK_PURGE);
       printf("\nOUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK=%d",OUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK);
       printf("\nSPRINT_LP_2_HP_4_SFC_STEP=%d",SPRINT_LP_2_HP_4_SFC_STEP);
       printf("\nSPRINT_LP_OFF_4_SFC_STEP=%d",SPRINT_LP_OFF_4_SFC_STEP);
       printf("\nOUT_OR_SPRINT_LP_PRG_Z_FEEDBACK=%d",OUT_OR_SPRINT_LP_PRG_Z_FEEDBACK);
       printf("\nSPRINT_TIMERS_IN_1=%f",SPRINT_TIMERS_IN_1);
       printf("\nSPRINT_TIMERS_IN_2=%f",SPRINT_TIMERS_IN_2);
       printf("\nSPRINT_TIMERS_IN_3=%f",SPRINT_TIMERS_IN_3);
       printf("\nSPRINT_TIMERS_IN_4=%f",SPRINT_TIMERS_IN_4);
       printf("\nSPRINT_TIMERS_IN_5=%f",SPRINT_TIMERS_IN_5);
       printf("\nSPRINT_TIMERS_IN_6=%f",SPRINT_TIMERS_IN_6);
       printf("\nSPRINT_TIMERS_IN_7=%f",SPRINT_TIMERS_IN_7);
       printf("\nSPRINT_TIMERS_IN_8=%f",SPRINT_TIMERS_IN_8);
       printf("\nSPRINT_TIMERS_IN_9=%f",SPRINT_TIMERS_IN_9);
       printf("\nSPRINT_TMR_ANGL=%f",SPRINT_TMR_ANGL);
       printf("\nSPRINT_TMR_ANGL_IN_1=%d",SPRINT_TMR_ANGL_IN_1);
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 284//
       
       printf("\nIFACE_SPRINT_C_LPSPRTEN=%d",IFACE_SPRINT_C_LPSPRTEN);
       printf("\nSPRINT_SPRINTENBL=%d",SPRINT_SPRINTENBL);
       printf("\nSPRINT_HP_SPRNTOK=%d",SPRINT_HP_SPRNTOK);
       printf("\nOUT_AND_SPRINT_SPRT_READY_T_COND_2=%d",OUT_AND_SPRINT_SPRT_READY_T_COND_2);
       printf("\nSPRINT_C_LPSPRTEN=%d",SPRINT_C_LPSPRTEN);
       printf("\nSPRINT_SPRINTENBL=%d",SPRINT_SPRINTENBL);
       printf("\nOUT_AND_SPRINT_SPRT_READY_T_COND_3=%d",OUT_AND_SPRINT_SPRT_READY_T_COND_3);
       printf("\nSPRINT_LP_OFF_2_TRAN_2=%d",SPRINT_LP_OFF_2_TRAN_2);
       printf("\nSPRINT_LP_OFF_3_TRAN_2=%d",SPRINT_LP_OFF_3_TRAN_2);
       printf("\nSPRINT_LP_OFF_4_TRAN_2=%d",SPRINT_LP_OFF_4_TRAN_2);
       printf("\nSPRINT_LP_OFF_5_TRAN_2=%d",SPRINT_LP_OFF_5_TRAN_2);
       printf("\nSPRINT_HP_OFF_2_TRAN_2=%d",SPRINT_HP_OFF_2_TRAN_2);
       printf("\nSPRINT_OFF_1_TRAN_2=%d",SPRINT_OFF_1_TRAN_2);
       printf("\nSPRINT_OFF_2_TRAN_2=%d",SPRINT_OFF_2_TRAN_2);
       printf("\nSPRINT_OFF_3_TRAN_2=%d",SPRINT_OFF_3_TRAN_2);
       printf("\nSPRINT_OFF_4_TRAN_2=%d",SPRINT_OFF_4_TRAN_2);
       printf("\nOUT_OR_SPRINT_LP_ON_1_SF_SEL_2=%d",OUT_OR_SPRINT_LP_ON_1_SF_SEL_2);
       printf("\nSPRINT_SDLATCHLP=%d",SPRINT_SDLATCHLP);
       printf("\nCORE_DIGITAL_FUELOFF=%d",CORE_DIGITAL_FUELOFF);
       printf("\nSPRINT_SPRT_OFF=%d",SPRINT_SPRT_OFF);
       printf("\nSPRINT_OFF_MASK=%d",SPRINT_OFF_MASK);
       printf("\nSPRINT_TNK_VACSW=%d",SPRINT_TNK_VACSW);
       printf("\nCORE_ALM_SPRT1_SPRSDALM1=%d",CORE_ALM_SPRT1_SPRSDALM1);
       printf("\nCORE_ALM_SPRT2_SPRSDALM2=%d",CORE_ALM_SPRT2_SPRSDALM2);
       printf("\nCORE_ALM_SPRT3_SPRSDALM3=%d",CORE_ALM_SPRT3_SPRSDALM3);
       printf("\nOUT_OR_SPRINT_TRANSOFF_IN_1=%d",OUT_OR_SPRINT_TRANSOFF_IN_1);
       printf("\nSPRINT_NOTTEST=%d",SPRINT_NOTTEST);
       printf("\nOUT_AND_SPRINT_HP_2_LP_1_T_COND_1=%d",OUT_AND_SPRINT_HP_2_LP_1_T_COND_1);
       printf("\nSPRINT_LP_2_HP_1_TRAN_2=%d",SPRINT_LP_2_HP_1_TRAN_2);
       printf("\nSPRINT_LP_2_HP_2_TRAN_2=%d",SPRINT_LP_2_HP_2_TRAN_2);
       printf("\nSPRINT_LP_2_HP_3_TRAN_2=%d",SPRINT_LP_2_HP_3_TRAN_2);
       printf("\nSPRINT_LP_2_HP_4_TRAN_2=%d",SPRINT_LP_2_HP_4_TRAN_2);
       printf("\nSPRINT_LP_2_HP_5_TRAN_2=%d",SPRINT_LP_2_HP_5_TRAN_2);
       printf("\nSPRINT_HP_ON_3_TRAN_2=%d",SPRINT_HP_ON_3_TRAN_2);
       printf("\nSPRINT_LP_OFF_1_TRAN_2=%d",SPRINT_LP_OFF_1_TRAN_2);
       printf("\nSPRINT_HP_OFF_1_TRAN_2=%d",SPRINT_HP_OFF_1_TRAN_2);
       printf("\nOUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1=%d",OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1);
       printf("\nSPRINT_NOTREADY_TRAN_1=%d",SPRINT_NOTREADY_TRAN_1);
       printf("\nSPRINT_TRANSOFF=%d",SPRINT_TRANSOFF);
       printf("\nSPRINT_SIM_SPRT=%d",SPRINT_SIM_SPRT);
       printf("\nSPRINT_SIM_SPRAY=%d",SPRINT_SIM_SPRAY);
       printf("\nSPRINT_SPRT_READY_TRAN_5=%d",SPRINT_SPRT_READY_TRAN_5);
       printf("\nTRUE_SPRINT_PSL_OK=%d",TRUE_SPRINT_PSL_OK);
       printf("\nSPRINT_HP_ON_2_TRAN_2=%d",SPRINT_HP_ON_2_TRAN_2);
       printf("\nSPRINT_N_LPSPRTEN=%d",SPRINT_N_LPSPRTEN);
       printf("\nSPRINT_H2OXFRDONE=%d",SPRINT_H2OXFRDONE);
       printf("\nSPRINT_DLY_HPHLD=%d",SPRINT_DLY_HPHLD);
       printf("\nSPRINT_FILL_DN=%d",SPRINT_FILL_DN);
       printf("\nSPRINT_DRAINHP_TM=%d",SPRINT_DRAINHP_TM);
       printf("\nOUT_S1_ET1_SPRINT_ACTIVE_IN_1=%d",OUT_S1_ET1_SPRINT_ACTIVE_IN_1);
       printf("\nOUT_S1_ET2_SPRINT_ACTIVE_IN_2=%d",OUT_S1_ET2_SPRINT_ACTIVE_IN_2);
       printf("\nOUT_S1_ET3_SPRINT_FILL_OR_IN_2=%d",OUT_S1_ET3_SPRINT_FILL_OR_IN_2);
       printf("\nOUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=%d",OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2);
       printf("\nOUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=%d",OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3);
       printf("\nOUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4=%d",OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4);
       printf("\nOUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1=%d",OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1);
       printf("\nFIN_DE_PROCESO=%d",FIN_DE_PROCESO);                                            
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 285//
       
       printf("\nSPRINT_N_LPSPRTEN=%d",SPRINT_N_LPSPRTEN);
       printf("\nFALSE_SPRINT_HP_SPRNTOK=%d",FALSE_SPRINT_HP_SPRNTOK);
       printf("\nOUT_AND_SPRINT_TRANS_OFF_IN_4=%d",OUT_AND_SPRINT_TRANS_OFF_IN_4);
       
       printf("\nSPRINT_LP_OFF_2_TRAN_1=%d",SPRINT_LP_OFF_2_TRAN_1);
       printf("\nSPRINT_LP_OFF_3_TRAN_1=%d",SPRINT_LP_OFF_3_TRAN_1);
       printf("\nSPRINT_LP_OFF_4_TRAN_1=%d",SPRINT_LP_OFF_4_TRAN_1);
       printf("\nSPRINT_LP_OFF_5_TRAN_1=%d",SPRINT_LP_OFF_5_TRAN_1);
       printf("\nSPRINT_HP_OFF_2_TRAN_1=%d",SPRINT_HP_OFF_2_TRAN_1);
       printf("\nSPRINT_OFF_1_TRAN_1=%d",SPRINT_OFF_1_TRAN_1);
       printf("\nSPRINT_OFF_2_TRAN_1=%d",SPRINT_OFF_2_TRAN_1);
       printf("\nSPRINT_OFF_3_TRAN_1=%d",SPRINT_OFF_3_TRAN_1);
       printf("\nSPRINT_OFF_4_TRAN_1=%d",SPRINT_OFF_4_TRAN_1);
       printf("\nOUT_OR_SPRINT_HP_ON_1_SF_SEL_3=%d",OUT_OR_SPRINT_HP_ON_1_SF_SEL_3);
       printf("\nSPRINT_LP_ON_3_TRAN_2=%d",SPRINT_LP_ON_3_TRAN_2);
       printf("\nSPRINT_HP_2_LP_1_TRAN_2=%d",SPRINT_HP_2_LP_1_TRAN_2);
       printf("\nSPRINT_HP_2_LP_2_TRAN_2=%d",SPRINT_HP_2_LP_2_TRAN_2);
       printf("\nSPRINT_HP_2_LP_3_TRAN_2=%d",SPRINT_HP_2_LP_3_TRAN_2);
       printf("\nSPRINT_LP_OFF_1_TRAN_1=%d",SPRINT_LP_OFF_1_TRAN_1);
       printf("\nSPRINT_HP_OFF_1_TRAN_1=%d",SPRINT_HP_OFF_1_TRAN_1);
       printf("\nOUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1=%d",OUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1);
       printf("\nSPRINT_JIMMY_SPRT=%d",SPRINT_JIMMY_SPRT);
       printf("\nOUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3=%d",OUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3);*/
       //////////////////////////////////////////////////////////////////////////
       
       //IMPRESIÒN DE VARIABLES HOJA 286//
       
       printf("\nSPRINT_HP_2_LP_1_TRAN_1=%d",SPRINT_HP_2_LP_1_TRAN_1);
       printf("\nSPRINT_HP_2_LP_2_TRAN_1=%d",SPRINT_HP_2_LP_2_TRAN_1);
       printf("\nSPRINT_HP_2_LP_3_TRAN_1=%d",SPRINT_HP_2_LP_3_TRAN_1);
       printf("\nSPRINT_LP_ON_1_TRAN_1=%d",SPRINT_LP_ON_1_TRAN_1);
       printf("\nSPRINT_LP_ON_2_TRAN_1=%d",SPRINT_LP_ON_2_TRAN_1);
       printf("\nSPRINT_LP_ON_3_TRAN_1=%d",SPRINT_LP_ON_3_TRAN_1);
       printf("\nOUT_OR_SPRINT_LP_OFF_1_SF_SEL_1=%d",OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1);
       printf("\nFUEL_SYS_GAS100=%d",FUEL_SYS_GAS100);
       printf("\nCORE_DIGITAL_FUELOFF=%d",CORE_DIGITAL_FUELOFF);
       printf("\nOUT_OR_SPRINT_LP_XFR_WT_T_COND_1=%d",OUT_OR_SPRINT_LP_XFR_WT_T_COND_1);
       printf("\nSPRINT_LP_2_HP_1_TRAN_1=%d",SPRINT_LP_2_HP_1_TRAN_1);
       printf("\nSPRINT_LP_2_HP_2_TRAN_1=%d",SPRINT_LP_2_HP_2_TRAN_1);
       printf("\nSPRINT_LP_2_HP_3_TRAN_1=%d",SPRINT_LP_2_HP_3_TRAN_1);
       printf("\nSPRINT_LP_2_HP_4_TRAN_1=%d",SPRINT_LP_2_HP_4_TRAN_1);
       printf("\nSPRINT_LP_2_HP_5_TRAN_1=%d",SPRINT_LP_2_HP_5_TRAN_1);
       printf("\nSPRINT_HP_ON_3_TRAN_1=%d",SPRINT_HP_ON_3_TRAN_1);
       printf("\nOUT_OR_SPRINT_HP_OFF_1_SF_SEL_1=%d",OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1);
       printf("\nSPRINT_HP_ON_1_TRAN_1=%d",SPRINT_HP_ON_1_TRAN_1);
       printf("\nSPRINT_HP_ON_2_TRAN_1=%d",SPRINT_HP_ON_2_TRAN_1);
       printf("\nOUT_OR_SPRINT_OFF_1_SF_SEL_2=%d",OUT_OR_SPRINT_OFF_1_SF_SEL_2);
       printf("\nSPRINT_HP_PRG_TMR=%d",SPRINT_HP_PRG_TMR);
       printf("\nFALSE_SPRINT_TRAN_4_OR=%d",FALSE_SPRINT_TRAN_4_OR);
       printf("\nOUT_OR_SPRINT_OFF_4_T_COND_3=%d",OUT_OR_SPRINT_OFF_4_T_COND_3);
       printf("\nSPRINT_OFF_4_SFC_STEP=%d",SPRINT_OFF_4_SFC_STEP);
       printf("\nFALSE_SPRINT_NOT_RUNNIN=%d",FALSE_SPRINT_NOT_RUNNIN);
       printf("\nOUT_AND_SPRINT_JIMMY_SW2_NO=%d",OUT_AND_SPRINT_JIMMY_SW2_NO);
       printf("\nSPRINT_HP_OFF_2_SFC_STEP=%d",SPRINT_HP_OFF_2_SFC_STEP);
       printf("\nSPRINT_LP_OFF_3_SFC_STEP=%d",SPRINT_LP_OFF_3_SFC_STEP);
       printf("\nSPRINT_LP_OFF_5_SFC_STEP=%d",SPRINT_LP_OFF_5_SFC_STEP);
       printf("\nSPRINT_OFF_1_SFC_STEP=%d",SPRINT_OFF_1_SFC_STEP);
       printf("\nSPRINT_OFF_2_SFC_STEP=%d",SPRINT_OFF_2_SFC_STEP);
       printf("\nSPRINT_OFF_3_SFC_STEP=%d",SPRINT_OFF_3_SFC_STEP);
       printf("\nSPRINT_MASK_PURGE=%d",SPRINT_MASK_PURGE);       
       printf("\nSPRINT_NOTREADY_SFC_STEP=%d",SPRINT_NOTREADY_SFC_STEP);
       printf("\nOUT_OR_SPRINT_SPRINT_OUT_IN=%d",OUT_OR_SPRINT_SPRINT_OUT_IN);
       printf("\nSPRINT_SEL_SPRINT=%d",SPRINT_SEL_SPRINT);
       printf("\nSPRINT_SEL_SPRAY=%d",SPRINT_SEL_SPRAY);
       printf("\nSPRINT_RAMP_DOWN_P_LIM_1=%d",SPRINT_RAMP_DOWN_P_LIM_1);
       printf("\nSPRINT_DLY_LPEHLD=%d",SPRINT_DLY_LPEHLD);
       printf("\nTRUE_EVACUATE_LP_SPRINT_MANIFOLD=%d",TRUE_EVACUATE_LP_SPRINT_MANIFOLD);
       printf("\nSPRINT_DLY_LPPHLD=%d",SPRINT_DLY_LPPHLD);
       printf("\nSPRINT_LP_PRG_TMR=%d",SPRINT_LP_PRG_TMR);
       printf("\nSPRINT_LP_OFF_5_TRAN_3=%d",SPRINT_LP_OFF_5_TRAN_3);
       printf("\nSPRINT_DRAINHP_TM=%d",SPRINT_DRAINHP_TM);
       printf("\nSPRINT_HP_OFF_2_TRAN_3=%d",SPRINT_HP_OFF_2_TRAN_3);
       printf("\nSPRINT_EVAC_SW1=%d",SPRINT_EVAC_SW1);
       printf("\nSPRINT_GAS_OR_LIQ=%d",SPRINT_GAS_OR_LIQ);
       printf("\nSPRINT_DN_PRG_TMR=%d",SPRINT_DN_PRG_TMR);
       printf("\nSPRINT_SPRT_READY_TRAN_1=%d",SPRINT_SPRT_READY_TRAN_1);
       printf("\nSPRINT_TRANSOFF=%d",SPRINT_TRANSOFF);
       printf("\nOUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=%d",OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5);
       printf("\nOUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=%d",OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2);
       printf("\nOUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=%d",OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2);
       printf("\nOUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=%d",OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1);
       printf("\nOUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2=%d",OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2);
       printf("\nOUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2=%d",OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2);
       printf("\nOUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=%d",OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12);
       printf("\nOUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2=%d",OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2);
       printf("\nOUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=%d",OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3);
       printf("\nOUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=%d",OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2);
       printf("\nOUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=%d",OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3);
       printf("\nOUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=%d",OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK);
       printf("\nOUT_S3_ET5_SPRINT_PURGE_HP_IN_2=%d",OUT_S3_ET5_SPRINT_PURGE_HP_IN_2);
       printf("\nOUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3=%d",OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3);
       //////////////////////////////////////////////////////////////////////////
       
	   //IMPRESIÒN DE VARIABLES HOJA 287//
/*
	   printf("\nFALSE_SPRINT_TEST_SPRT=%d",FALSE_SPRINT_TEST_SPRT);
	   printf("\nSFC_STEP_OUTOFOP=%d",SFC_STEP_OUTOFOP);
	   printf("\nOUT_SPRINT_ALLOWTEST_AND=%d",OUT_SPRINT_ALLOWTEST_AND);
       printf("\nNOUT_SPRINT_ALLOWTEST_AND=%d",NOUT_SPRINT_ALLOWTEST_AND);
	   printf("\nSPRINT_SPRT_READY=%d",SPRINT_SPRT_READY);
	   printf("\nSPRINT_NOTREADY=%d",SPRINT_NOTREADY);
	   printf("\nSPRINT_LP_ON_1=%d",SPRINT_LP_ON_1);
	   printf("\nSPRINT_LP_OFF_1=%d",SPRINT_LP_OFF_1);
	   printf("\nSPRINT_LP_OFF_3=%d",SPRINT_LP_OFF_3);
	   printf("\nSPRINT_LP_OFF_5=%d",SPRINT_LP_OFF_5);
	   printf("\nSPRINT_HP_ON_1=%d",SPRINT_HP_ON_1);
	   printf("\nSPRINT_HP_OFF_1=%d",SPRINT_HP_OFF_1);
	   printf("\nSPRINT_HP_OFF_2=%d",SPRINT_HP_OFF_2);
	   printf("\nSPRINT_OFF_1=%d",SPRINT_OFF_1);
	   printf("\nSPRINT_OFF_2=%d",SPRINT_OFF_2);
	   printf("\nSPRINT_OFF_3=%d",SPRINT_OFF_3);
	   printf("\nSPRINT_MASK_PURGE=%d",SPRINT_MASK_PURGE);
	   printf("\nOUT_SPRINT_ACT_OR_INI_NOR=%d",OUT_SPRINT_ACT_OR_INI_NOR); 
	   //////////////////////////////////////////////////////////////////////////
	   
	   //IMPRESIÒN DE VARIABLES HOJA 288//
       
       printf("\nHMI_BO_BW_V_125=%d",HMI_BO_BW_V_125);
       printf("\nFALSE_SPRINT_DEC_OR=%d",FALSE_SPRINT_DEC_OR);
       printf("\nOUT_OR_SPRINT_LOWER_AND_IN_2=%d",OUT_OR_SPRINT_LOWER_AND_IN_2);
       printf("\nIFACE_CORE_Z_MANMODE=%d",IFACE_CORE_Z_MANMODE);
       printf("\nOUT_AND_SPRINT_MAN_RAMP_P_SEL_2=%d",OUT_AND_SPRINT_MAN_RAMP_P_SEL_2);
       printf("\nHMI_BO_BW_V_126=%d",HMI_BO_BW_V_126);
       printf("\nFALSE_SPRINT_INC_OR=%d",FALSE_SPRINT_INC_OR);
       printf("\nOUT_OR_SPRINT_RAISE_AND_IN_2=%d",OUT_OR_SPRINT_RAISE_AND_IN_2);
       printf("\nOUT_AND_SPRINT_MAN_RAMP_P_SEL_3=%d",OUT_AND_SPRINT_MAN_RAMP_P_SEL_3);
       printf("\nSFC_STEP_OUTOFOP_SFC_STEP=%d",SFC_STEP_OUTOFOP_SFC_STEP);
       printf("\nFALSE_SPRINT_MAN_STRK=%d",FALSE_SPRINT_MAN_STRK);
       printf("\nOUT_AND_SPRINT_CNTL_SW_CTRL=%d",OUT_AND_SPRINT_CNTL_SW_CTRL);
       printf("\nOUT_I_SW_SPRINT_CNTRL_OUT_SEL=%d",OUT_I_SW_SPRINT_CNTRL_OUT_SEL);
       printf("\nSPRINT_ACT_OR_INI=%d",SPRINT_ACT_OR_INI);
       printf("\nOUT_A_SW_SPRINT_MINFLOW_IN_1=%f",OUT_A_SW_SPRINT_MINFLOW_IN_1);
       printf("\nSPRINT_HP_ON_3_SFC_STEP=%d",SPRINT_HP_ON_3_SFC_STEP);
       printf("\nOUT_A_SW_SPRINT_FLOW_LIM_IN_2=%f",OUT_A_SW_SPRINT_FLOW_LIM_IN_2);
       printf("\nSPRINT_ALLOWTEST=%d",SPRINT_ALLOWTEST);
       printf("\nOUT_A_SW_SPRINT_SPRINT_PID_DB_SP=%f",OUT_A_SW_SPRINT_SPRINT_PID_DB_SP);
       printf("\nOUT_O_SHOT_SPRINT_DOWN_OR_IN_1=%d",OUT_O_SHOT_SPRINT_DOWN_OR_IN_1);
       printf("\nSPRINT_NOTREADY_SFC_STEP=%d",SPRINT_NOTREADY_SFC_STEP);
       printf("\nOUT_OR_SPRINT_SPRT_DOWN_IN=%d",OUT_OR_SPRINT_SPRT_DOWN_IN);
       //////////////////////////////////////////////////////////////////////////
*/	   
	   
	   

//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

       
//LLAMADA DE FUNCIONES PARA BLOQUES

//AQUI EMPIEZAN MIS FUNCIONES//

//FUNCIONES HOJA 272 VENTILATION SYSTEM (ALARMS & SHUTDOWNS)//

       //SWITCH VENT_TE64030LOG_SW 
       if(N1N10_RTD_TE64030_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE64030LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE64030LOG_A_IN_1=N1N10_RTD_TE64030_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-64030 ALM LOGIC(SEC B)
       //SWITCH VENT_TE64031LOG_SW
       if(N1N10_RTD_TE64031_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE64031LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE64031LOG_A_IN_1=N1N10_RTD_TE64031_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-64031 ALM LOGIC(SEC A)
       //SWITCH VENT_TE64032LOG_SW
       if(N1N10_RTD_TE64032_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE64032LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE64032LOG_A_IN_1=N1N10_RTD_TE64032_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-64032 ALM LOGIC(SEC B)
       //SWITCH VENT_TE64033LOG_SW
       if(N1N10_RTD_TE64033_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE64033LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE64033LOG_A_IN_1=N1N10_RTD_TE64033_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-64033 ALM LOGIC(SEC A)
       //SWITCH VENT_TE6450LOG_SW
       if(N1N10_RTD_TE6450_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE6450LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE6450LOG_A_IN_1=N1N10_RTD_TE6450_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-6450 ALM LOGIC(SEC A) Y A UN BLOQUE SUBTRACT "VENT_AIRTMPDIFF"
       //SWITCH VENT_TE6499LOG_SW
       if(N1N10_RTD_TE6499_LATCH_OR==1){
                                         OUT_A_SW_VENT_TE6499LOG_A_IN_1=100.0;
                                         }
                                         else{
                                              OUT_A_SW_VENT_TE6499LOG_A_IN_1=N1N10_RTD_TE6499_AI_RTD_L;
                                              }
                                              //LA SALIDA DEL SWITCH VA A UN CALC_PLUS TE-6499 ALM LOGIC(SEC A) Y A UN BLOQUE SUBTRACT "VENT_AIRTMPDIFF"
       //SUBTRACT VENT_AIRTMPDIFF
       OUT_SUB_VENT_AIRTMP_DF_IN=OUT_A_SW_VENT_TE6450LOG_A_IN_1-OUT_A_SW_VENT_TE6499LOG_A_IN_1;
       //ABSOLUTE VENT_AIRTMP_DF
       OUT_ABS_VENT_AIRTMPCMPR_IN_1=abs(OUT_SUB_VENT_AIRTMP_DF_IN);
       //A_COMPARE VENT_AIRTMPCMPR
       if(OUT_ABS_VENT_AIRTMPCMPR_IN_1>5.0){
                                            OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2=1;
                                            }
                                            else{
                                                 OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2=0;
                                                 }
       //AND VENT_AIRTMPDIFM
       if(FALSE_VENT_AIRTMPDIFM==1&& OUT_A_CMPR_VENT_AIRTMPDIFM_IN_2==1){
                                                                       OUT_AND_VENT_AIRDIFFALM_IN=1;
                                                                       }
                                                                       else{
                                                                            OUT_AND_VENT_AIRDIFFALM_IN=0;
                                                                            }
//ESTA SALIDA VA A BLOQUE BNAME: UNA SALIDA  "ALARM.ALM_LAT.IN_212"(TE-6450 AND TE-6499 DIFFERENCE ALARM)
///////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 273 VENTILATION SYSTEM (T0)//
       
       if(CORE_DIGITAL_PWR_UP==0)
	   {
	   if(IO_FLT_TE64030VST==1)
	   {
		   N1N10_RTD_TE64030_AI_RTD_L=0;
	   }
	   if(IO_FLT_TE64031VST==1)
	   {
		   N1N10_RTD_TE64031_AI_RTD_L=0;
	   }
	   if(IO_FLT_TE64032VST==1)
	   {
		   N1N10_RTD_TE64032_AI_RTD_L=0;
	   }
	   if(IO_FLT_TE64033VST==1)
	   {
		   N1N10_RTD_TE64033_AI_RTD_L=0;
	   }
	   }
	   CONTADOR=IO_FLT_TE64030VST+IO_FLT_TE64031VST+IO_FLT_TE64032VST+IO_FLT_TE64033VST;

	   DIVISOR=4-CONTADOR;

       VENT_AIRFILTAVG_TC_MON=(N1N10_RTD_TE64030_AI_RTD_L+N1N10_RTD_TE64031_AI_RTD_L+N1N10_RTD_TE64032_AI_RTD_L+N1N10_RTD_TE64033_AI_RTD_L)/DIVISOR;
	 
	   if((N1N10_RTD_TE64030_AI_RTD_L>(VENT_AIRFILTAVG_TC_MON+2000))||N1N10_RTD_TE64030_AI_RTD_L<(VENT_AIRFILTAVG_TC_MON-2000))
	  {
		  N1N10_RTD_TE64030_AI_RTD_L=0;
	  }
	  if((N1N10_RTD_TE64031_AI_RTD_L>(VENT_AIRFILTAVG_TC_MON+2000))||N1N10_RTD_TE64031_AI_RTD_L<(VENT_AIRFILTAVG_TC_MON-2000))
	  {
		  N1N10_RTD_TE64031_AI_RTD_L=0;
	  }
	  if((N1N10_RTD_TE64032_AI_RTD_L>(VENT_AIRFILTAVG_TC_MON+2000))||N1N10_RTD_TE64032_AI_RTD_L<(VENT_AIRFILTAVG_TC_MON-2000))
	  {
		  N1N10_RTD_TE64032_AI_RTD_L=0;
	  }
	  if((N1N10_RTD_TE64033_AI_RTD_L>(VENT_AIRFILTAVG_TC_MON+2000))||N1N10_RTD_TE64033_AI_RTD_L<(VENT_AIRFILTAVG_TC_MON-2000))
	  {
		  N1N10_RTD_TE64033_AI_RTD_L=0;
	  }
       //CALC_PLUS VENT_AIRFILT_FC (TEMP CONVERT) CONVERSION DE TEMPERATURA DE ºC A ºF
       VENT_AIRAVERAGE_IN=(VENT_AIRFILTAVG_TC_MON*1.8)+32;
                                                          //ESTA SALIDA VA A BLOQUE ANAME CON VARIAS SALIDAS (AIR FILTER AVERAGE TEMP)(DEG F)
       //CALC_PLUS VENT_AIRFIL_C (TEMP CONVERT) CONVERSION DE TEMPERATURA DE ºF A ºC
       VENT_AIR_AVG_C_IN=(VENT_AIRFILTAVG_TC_MON-32)/1.8;
                                                         //ESTA SALIDA VA A BLOQUE ANAME: UNA SALIDA "A_FORCE_T1_IN"(AIR FILTER AVERAGE TEMP FOR AMS)(DEG C)
       //A_COMPARE VENT_T0_GT10 (HYST=-2.0 , IN_2=10.0)
       
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_1(La salida se hace verdadero como (IN_1) se hace mayor que o igual a (IN_2) 
       y la salida se hace falso como (IN_1) se convierte en menos de [(IN_2) - (el valor absoluto de HYSTER)])*/
       
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_2(La salida pasa falso como (IN_2) se hace mayor que o igual a [(IN_1) + (valor absoluto de HYSTER)] 
       y la salida se hace verdadero como (IN_2) se convierte en menos de (IN_1)*/
       
       //CONDICION_1
       /*if(VENT_AIRFILTAVG_TC_MON>=10.0){
                                        OUT_A_CMPR_VENT_T0_GT_10=1; //USE EL NOMBRE DE UNA DE LAS 2 SALIDAS QUE TIENE EL COMPARADOR
                                        }
                                        if(VENT_AIRFILTAVG_TC_MON<8.0){
                                                                       OUT_A_CMPR_VENT_T0_GT_10=0;
                                                                       }*/
       //CONDICION_2  
       if(VENT_AIRFILTAVG_TC_MON>(10.0+(-2)))
	   {
		   OUT_A_CMPR_VENT_T0_GT_10=1;
	   }else{
           OUT_A_CMPR_VENT_T0_GT_10=0;
	   }

                                         

                                                                        //EL NÙMERO 9 NO ENTRA EN NINGUNA CONDICION ?¿
      //LA SALIDA VA A UN BLOQUE BNAME: UNA SALIDA "FIN_FAN.FINFAN_ST.IN_2", LA SALIDA TAMBIÈN SE NIEGA CON UN BLOQUE NOT "VENT_T0_LT8" Y VA A UN BNAME: UNA SALIDA FIN_FAN.TEMP_OFF.IN_2
      //A_COMPARE VENT_T0_LT32 (HYST=-2.0 , IN_1=32.0)
      //CONDICION_1
      if(32.0>VENT_AIRFILTAVG_TC_MON)
	  {
		  OUT_A_CMPR_VENT_T0_LT_32_IN=1;
	  }else{
		  OUT_A_CMPR_VENT_T0_LT_32_IN=0;
	  }
      //CONDICION_2
      /*if(VENT_AIRFILTAVG_TC_MON>=34.0){
                                         OUT_A_CMPR_VENT_T0_LT_32_IN=0;
                                         }
                                         if(VENT_AIRFILTAVG_TC_MON<32.0){
                                                                         OUT_A_CMPR_VENT_T0_LT_32_IN=0;
                                                                         }*/
      //LA SALIDA VA A UN BLOQUE BNAME: UNA SALIDA "FIN_FAN.AMB_FRZ.IN_1"
///////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 274 VENTILATION SYSTEM (ANTI-ICING)//

      //SWITCH VENT_TE64030SW
       if(IO_FLT_TE64030VST==1){
                                OUT_A_SW_VENT_INLETT2LSS_IN_1=500.0;
                                }
                                else{
                                     OUT_A_SW_VENT_INLETT2LSS_IN_1=VENT_TE64030;
                                     }
       //SWITCH VENT_TE64031SW
       if(IO_FLT_TE64031VST==1){
                                OUT_A_SW_VENT_INLETT2LSS_IN_2=500.0;
                                }
                                else{
                                     OUT_A_SW_VENT_INLETT2LSS_IN_2=VENT_TE64031;
                                     }
       //SWITCH VENT_TE64032SW
       if(IO_FLT_TE64032VST==1){
                                OUT_A_SW_VENT_INLETT2LSS_IN_3=500.0;
                                }
                                else{
                                     OUT_A_SW_VENT_INLETT2LSS_IN_3=VENT_TE64032;
                                     }
       //SWITCH VENT_TE64033SW
       if(IO_FLT_TE64033VST==1){
                                OUT_A_SW_VENT_INLETT2LSS_IN_4=500.0;
                                }
                                else{
                                     OUT_A_SW_VENT_INLETT2LSS_IN_4=VENT_TE64033;
                                     }
      //LSS_BUS VENT_INLETT2LSS (LO_LIM=-40.0 , HI_LIM=500.0)
      if((500>(OUT_A_SW_VENT_INLETT2LSS_IN_1||OUT_A_SW_VENT_INLETT2LSS_IN_2||OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4||CORE_ANALOG_T2SEL))&&(-40<(OUT_A_SW_VENT_INLETT2LSS_IN_1||OUT_A_SW_VENT_INLETT2LSS_IN_2||OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4||CORE_ANALOG_T2SEL)))
	  {
		  if(OUT_A_SW_VENT_INLETT2LSS_IN_1<(OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_3&&OUT_A_SW_VENT_INLETT2LSS_IN_4&&CORE_ANALOG_T2SEL))
		  {
			  OUT_LSS_BUS_VENT_INLETT2LSS=OUT_A_SW_VENT_INLETT2LSS_IN_1;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_2<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_3&&OUT_A_SW_VENT_INLETT2LSS_IN_4&&CORE_ANALOG_T2SEL))
		  {
			  OUT_LSS_BUS_VENT_INLETT2LSS=OUT_A_SW_VENT_INLETT2LSS_IN_2;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_3<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_4&&CORE_ANALOG_T2SEL))
		  {
			  OUT_LSS_BUS_VENT_INLETT2LSS=OUT_A_SW_VENT_INLETT2LSS_IN_3;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_4<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_3&&CORE_ANALOG_T2SEL))
		  {
			  OUT_LSS_BUS_VENT_INLETT2LSS=OUT_A_SW_VENT_INLETT2LSS_IN_4;
		  }
		  else if(CORE_ANALOG_T2SEL<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_4&&OUT_A_SW_VENT_INLETT2LSS_IN_3))
		  {
			  OUT_LSS_BUS_VENT_INLETT2LSS=CORE_ANALOG_T2SEL;
		  }
		  else{
			  OUT_LSS_BUS_VENT_INLETT2LSS=0;
		  }
	  }else{
		  OUT_LSS_BUS_VENT_INLETT2LSS=0;
	  }
                                   //LA SALIDA DEL LSS_BUS_VENT_INLETT2LSS VA A UN BLOQUE CURVE_2D "VENT_DAMPER_CRV" Y A UN A_COMPARE "VENT_INLET_GT47
      //A_COMPARE VENT_T2_LT_43 (HYST=-1.5 , IN_1=43.0)
      
      /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_1(La salida se hace verdadero como (IN_1) se hace mayor que o igual a (IN_2) 
       y la salida se hace falso como (IN_1) se convierte en menos de [(IN_2) - (el valor absoluto de HYSTER)])*/
       
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_2(La salida pasa falso como (IN_2) se hace mayor que o igual a [(IN_1) + (valor absoluto de HYSTER)] 
       y la salida se hace verdadero como (IN_2) se convierte en menos de (IN_1)*/
       //CONDICION_1
       /*if(43.0>=CORE_ANALOG_T2SEL){
                                   OUT_A_CMPR_VENT_ICEALM_SW_NO=1;
                                   }
                                   if(43.0<(CORE_ANALOG_T2SEL-1.5){
                                                                   OUT_A_CMPR_VENT_ICEALM_SW_NO=0;
                                                                   }*/
       //CONDICION_2
       if(CORE_ANALOG_T2SEL>=44.5){
                                   OUT_A_CMPR_VENT_ICEALM_SW_NO=0;
                                   }
                                   if(CORE_ANALOG_T2SEL<43.0){
                                                              OUT_A_CMPR_VENT_ICEALM_SW_NO=1;
                                                              }
       //A_COMPARE VENT_INLET_GT47 (HYST=*-4.0(-10.0,10.0) , IN_2=*47.0(40.0,50.0))
       //SE VA A USAR UN VALOR DE HYST=-4.0 Y DE IN_2=47.0 SOLO PARA PRUEBAS, LOS VALORES REALES A COLOCAR SON LOS MENCIONADOS ARRIBA
       //CONDICION_1
       /*if(OUT_LSS_BUS_VENT_INLETT2LSS>=47.0){
                                               OUT_A_CMPR_VENT_INLET_LT43_IN=1;
                                               }
                                               if(OUT_LSS_BUS_VENT_INLETT2LSS<43.0){
                                                                                    OUT_A_CMPR_VENT_INLET_LT43_IN=0;
                                                                                    }*/
       //CONDICION_2
       if(47.0>=(OUT_LSS_BUS_VENT_INLETT2LSS+4.0)){
                                                  OUT_A_CMPR_VENT_INLET_LT43_IN=0;
                                                  }
                                                  if(47.0<OUT_LSS_BUS_VENT_INLETT2LSS){
                                                                                       OUT_A_CMPR_VENT_INLET_LT43_IN=1;
                                                                                       }
       //AND VENT_LOTMP_BRKR
       if(OUT_A_CMPR_VENT_INLET_LT43_IN==0&& GENERATOR_GEN_BKRCLS==1&& VENT_ANTI_ICE==1){
                                                                                     OUT_AND_VENT_ICE_DLY_TRIGGER=1;
                                                                                     }
                                                                                     else{
                                                                                          OUT_AND_VENT_ICE_DLY_TRIGGER=0;
                                                                                          }
                                                                                          //LA SALIDA DE LA AND VA A DOS BLOQUES UNA OR Y UN DELAY
       //OR VENT_MOT68330OR
       if(OUT_A_CMPR_VENT_MOT68330OR_IN_1==1||OUT_AND_VENT_ICE_DLY_TRIGGER==1){
                                                                               OUT_OR_VENT_MOT68330_IN=1;
                                                                               }
                                                                               else{
                                                                                    OUT_OR_VENT_MOT68330_IN=0;
                                                                                    }
                                                                                    //ESTA OR TIENE DOS SALIDAS DIFERENTES "OUT_OR_VENT_MOT68330_IN" Y "VENT_MOT_DELAY_TRIGGER" Y VAN A UN BLOQUE BNAME SIN SALIDAS (ANTI-ICING BLOWER MOTOR)
       //DELAY VENT_ICE_DLY (DLY_TIME=*300.0(0.0,3600.0))
       //PARA PRUEBA SE USARÀ UN TIEMPO DE 5 SEGUNDOS PERO HAY QUE CAMBIARLO POR EL DATO COLOCADO ARRIBA
       
       DLY_VENT_DAMPER_SW_CTRL=OUT_AND_VENT_ICE_DLY_TRIGGER;
       TOND(DLY_VENT_DAMPER_SW_CTRL,TP_DLY_VENT_DAMPER_SW_CTRL,Time_factor,out_DLY_VENT_DAMPER_SW_CTRL);
       //CURVE_2D VENT_DAMPER_CRV FALTA REALIZARLO
       if(OUT_LSS_BUS_VENT_INLETT2LSS<(-62))
	   {
		   LimXI=-52;
		   LimXS=-62;
		   LimYI=95;
		   LimYS=95;
		   VENT_DAMPER_SW_NO=LimYS+(((OUT_LSS_BUS_VENT_INLETT2LSS-LimXS)/(LimXI-LimXS))*(LimYI-LimYS));
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS>(43))
	   {
		   LimXI=42;
		   LimXS=43;
		   LimYI=50;
		   LimYS=50;
		   VENT_DAMPER_SW_NO=LimYS+(((OUT_LSS_BUS_VENT_INLETT2LSS-LimXS)/(LimXI-LimXS))*(LimYI-LimYS));
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-62)
	   {
		   VENT_DAMPER_SW_NO=95;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-52)
	   {
		   VENT_DAMPER_SW_NO=95;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-42)
	   {
		   VENT_DAMPER_SW_NO=90;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-32)
	   {
		   VENT_DAMPER_SW_NO=55;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-22)
	   {
		   VENT_DAMPER_SW_NO=80;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==-12)
	   {
		   VENT_DAMPER_SW_NO=75;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==2)
	   {
		   VENT_DAMPER_SW_NO=70;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==12)
	   {
		   VENT_DAMPER_SW_NO=65;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==22)
	   {
		   VENT_DAMPER_SW_NO=60;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==32)
	   {
		   VENT_DAMPER_SW_NO=55;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==42)
	   {
		   VENT_DAMPER_SW_NO=50;
	   }
	   else if(OUT_LSS_BUS_VENT_INLETT2LSS==43)
	   {
		   VENT_DAMPER_SW_NO=50;
	   }
       
       //SALIDA DEL CURVE_2D---> "VENT_DAMPER_SW_NO"
       
       //SWITCH VENT_DAMPER_SW
       if(out_DLY_VENT_DAMPER_SW_CTRL[1]==1){
                                          OUT_A_SW_VENT_DMPR_RATE_IN=VENT_DAMPER_SW_NO;
                                          }
                                          else{
                                               OUT_A_SW_VENT_DMPR_RATE_IN=0;
                                               }
       //RATE_LIMIT VENT_DMPR_RATE FALTA REALIZARLO
       //LA SALIDA DEL RATE_LIMIT VA A UN BLOQUE ANAME SIN SALIDAS (ANTI-ICING SYSTEM DAMPER) Y A UN A_COMPARE "VENT_DMPR_GT0"
       
       //A_COMPARE VENT_DMPR_GT0 (HYST=0 , IN_2=*0.5(0.1,100.0))
       //SE VA A USAR PARA PRUEBAS UN VALOR DE IN_2=10.0, EL VALOR QUE HAY QUE COLOCAR ES EL QUE SE MENCIONA ARRIBA
       //CONDICION_1
       if(VENT_ZV64181_IN>=10.0){
                                 OUT_A_CMPR_VENT_MOT68330OR_IN_1=1;
                                 }
                                 if(VENT_ZV64181_IN<10.0){
                                                          OUT_A_CMPR_VENT_MOT68330OR_IN_1=0;
                                                          }
       //CONDICION_2
       /*if(10.0>VENT_ZV64181_IN){
                                OUT_A_CMPR_VENT_MOT68330OR_IN_1=0;
                                }
                                if(10.0<VENT_ZV64181_IN){
                                                         OUT_A_CMPR_VENT_MOT68330OR_IN_1=1;
                                                         }*/
       //LSS_BUS VENT_INLET_LSS
        if((500>(OUT_A_SW_VENT_INLETT2LSS_IN_1||OUT_A_SW_VENT_INLETT2LSS_IN_2||OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4||CORE_ANALOG_T2SEL))&&(-40<(OUT_A_SW_VENT_INLETT2LSS_IN_1||OUT_A_SW_VENT_INLETT2LSS_IN_2||OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4)))
	  {
		  if(OUT_A_SW_VENT_INLETT2LSS_IN_1<(OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_3&&OUT_A_SW_VENT_INLETT2LSS_IN_4))
		  {
			  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=OUT_A_SW_VENT_INLETT2LSS_IN_1;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_2<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_3&&OUT_A_SW_VENT_INLETT2LSS_IN_4))
		  {
			  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=OUT_A_SW_VENT_INLETT2LSS_IN_2;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_3<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_4))
		  {
			  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=OUT_A_SW_VENT_INLETT2LSS_IN_3;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_4<(OUT_A_SW_VENT_INLETT2LSS_IN_1&&OUT_A_SW_VENT_INLETT2LSS_IN_2&&OUT_A_SW_VENT_INLETT2LSS_IN_3))
		  {
			  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=OUT_A_SW_VENT_INLETT2LSS_IN_4;
		  }
		  else{
			  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=0;
		  }
	  }else{
		  OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2=0;
	  }
      //SUBTRACT VENT_T2_T0_DIFF 
      OUT_SUB_VENT_T2_T0_CMP_IN_2=VENT_T2SEL-OUT_LSS_BUS_VENT_T2_T0_DIFF_IN_2;
      //A_COMPARE VENT_T2_T0_CMP (HYST=*-2.0(-5.0,5.0) , IN_1=10.0)
      //PARA PRUEBAS SE USARA UNA HYST=-2.0 PERO HAY QUE CAMBIAR EL DATO AL MENCIONADO EN LA DESCRIPCION DEL COMPARADOR
      /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_1(La salida se hace verdadero como (IN_1) se hace mayor que o igual a (IN_2) 
       y la salida se hace falso como (IN_1) se convierte en menos de [(IN_2) - (el valor absoluto de HYSTER)])*/
       
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_2(La salida pasa falso como (IN_2) se hace mayor que o igual a [(IN_1) + (valor absoluto de HYSTER)] 
       y la salida se hace verdadero como (IN_2) se convierte en menos de (IN_1)*/
       //CONDICION_1
       /*if(10.0>=OUT_SUB_VENT_T2_T0_CMP_IN_2){
                                               OUT_A_CMPR_VENT_ICEALM_MSK_IN_1=1;
                                               }
                                               if(10.0<(OUT_SUB_VENT_T2_T0_CMP_IN_2-2.0){
                                                                                         OUT_A_CMPR_VENT_ICEALM_MSK_IN_1=0;
                                                                                         }*/
       //CONDICION_2
       if(OUT_SUB_VENT_T2_T0_CMP_IN_2>=12.0){
                                             OUT_A_CMPR_VENT_ICEALM_MSK_IN_1=0;
                                             }
                                             if(OUT_SUB_VENT_T2_T0_CMP_IN_2<10.0){
                                                                                  OUT_A_CMPR_VENT_ICEALM_MSK_IN_1=1;
                                                                                  }
       //DELAY VENT_MOT_DELAY (DLY_TIME=*600.0(10.0,1200.0))
       //PARA PRUEBAS EL DLY_TIME=5 HAY QUE CAMBIAR EL DATO POR EL MENCIONADO EN LA DESCRIPCION
       
       VENT_ICEALM_MSK_IN_3=OUT_OR_VENT_MOT68330_IN;
       TOND(VENT_ICEALM_MSK_IN_3,TP_VENT_ICEALM_MSK_IN_3,Time_factor,out_DLY_VENT_ICEALM_MSK_IN_3);
       //AND VENT_ICEALM_MSK
       if(OUT_A_CMPR_VENT_ICEALM_MSK_IN_1==1&&VENT_ANTI_ICE==1&&out_DLY_VENT_ICEALM_MSK_IN_3[1]==1){
                                                                                               OUT_AND_VENT_ICESYS_ALM_IN=1;
                                                                                               }
                                                                                               else{
                                                                                                    OUT_AND_VENT_ICESYS_ALM_IN=0;
                                                                                                    }
                                                                                                    //LA SALIDA VA A UN BLOQUE BNAME SIN SALIDAS (ANTI-ICING SYSTEM FAULT)
       //LSS_BUS VENT_AMBIENT
         if((150>(OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4))&&(-200<(OUT_A_SW_VENT_INLETT2LSS_IN_3||OUT_A_SW_VENT_INLETT2LSS_IN_4)))
	  {
		  if(OUT_A_SW_VENT_INLETT2LSS_IN_3<OUT_A_SW_VENT_INLETT2LSS_IN_4)
		  {
			  OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1=OUT_A_SW_VENT_INLETT2LSS_IN_3;
		  }
		  else if(OUT_A_SW_VENT_INLETT2LSS_IN_4<OUT_A_SW_VENT_INLETT2LSS_IN_3)
		  {
			  OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1=OUT_A_SW_VENT_INLETT2LSS_IN_4;
		  }
		  else{
			  OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1=0;
		  }
	  }else{
		  OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1=0;
	  }
                                               //LA SALIDA VA A UN BLOQUE CALC_PLUS VENT_ICINGLOG (TE-64033 ALM LOGIC (TURB))
      //LSS_BUS VENT_CONDITIOND
      if((150>(OUT_A_SW_VENT_TE6450LOG_A_IN_1||OUT_A_SW_VENT_TE6499LOG_A_IN_1))&&(-200<(OUT_A_SW_VENT_TE6450LOG_A_IN_1||OUT_A_SW_VENT_TE6499LOG_A_IN_1)))
	  {
		  if(OUT_A_SW_VENT_TE6450LOG_A_IN_1<OUT_A_SW_VENT_TE6499LOG_A_IN_1)
		  {
			  OUT_LSS_BUS_VENT_CONDAIR_SW_NO=OUT_A_SW_VENT_TE6450LOG_A_IN_1;
		  }
		  else if(OUT_A_SW_VENT_TE6499LOG_A_IN_1<OUT_A_SW_VENT_TE6450LOG_A_IN_1)
		  {
			  OUT_LSS_BUS_VENT_CONDAIR_SW_NO=OUT_A_SW_VENT_TE6499LOG_A_IN_1;
		  }
		  else{
			  OUT_LSS_BUS_VENT_CONDAIR_SW_NO=0;
		  }
	  }else{
		  OUT_LSS_BUS_VENT_CONDAIR_SW_NO=0;
	  }
      //SWITCH VENT_CONDAIR_SW 
      if(FALSE_VENT_CONDAIR_SW==1){
                                   OUT_A_SW_VENT_ICINGLOG_A_IN_2=OUT_LSS_BUS_VENT_CONDAIR_SW_NO;
                                   }
                                   else{
                                        OUT_A_SW_VENT_ICINGLOG_A_IN_2=VENT_T2SEL;
                                        }
    if(OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1>30&&OUT_A_SW_VENT_ICINGLOG_A_IN_2<40)
	{
		ice1=1;
	}else{
		ice1=0;
	}
	if(OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1<=30&&(OUT_A_SW_VENT_ICINGLOG_A_IN_2-10)<=OUT_LSS_BUS_VENT_ICINGLOG_A_IN_1)
	{
		ice2=1;
	}else{
		ice2=0;
	}
	if(ice1==1 || ice2==1)
	{
		VENT_ICEALM_SW_NC=1;
	}else{
		VENT_ICEALM_SW_NC=0;
	}
                                         //LA SALIDA VA A UN BLOQUE CALC_PLUS VENT_ICINGLOG (TE-64033 ALM LOGIC (TURB))
       //CALC_PLUS VENT_ICINGLOG (TE-64033 ALM LOGIC (TURB)) 
       //SU SALIDA VA A UN BLOQUE B_SW "VENT_ICEALM_SW"
       
       //SWITCH VENT_ICEALM_SW
       if(TRUE_VENT_ICEALM_SW==1){
                                  OUT_B_SW_VENT_ICING_IN=OUT_A_CMPR_VENT_ICEALM_SW_NO;
                                  }
                                  else{
                                       OUT_B_SW_VENT_ICING_IN=VENT_ICEALM_SW_NC;
                                       }
                                       //LA SALIDA DEL SWITCH VA A UN BNAME: CON UNA SALIDA "ALARM.ALM_LAT.IN_11" (ICING ALARM) (USE WHEN CUSTOMER HEATS INLET AIR)
///////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 275 VENTILATION SYSTEM INTERFACE(TIMERS)//

       //I_TO_AN VENT_FANTIMERS
       VENT_G_FAN_ATM_IN=(float)VENT_G_FNA_TMR;
       VENT_G_FAN_BTM_IN=(float)VENT_G_FNB_TMR;
       VENT_T_FAN_ATM_IN=(float)VENT_T_FNA_TMR;
       VENT_T_FAN_BTM_IN=(float)VENT_T_FNB_TMR;
       VENT_ENCL_PRGTM_IN=(float)VENT_ENCLPRG;
       VENT_PRGFLTMR_IN=(float)VENT_PRGFLDLY;
       VENT_PSTVNET_T_IN=(float)VENT_PSTCLDNTMR;
       VENT_PSTCLDN_T_IN=(float)SHUTDOWN_COOLAIRTMR;
       SFC_TIMER_SYNCCL_T_IN=(float)SFC_STEP_SYNC_COOL;
       VENT_PSTVNET_G_IN=(float)VENT_G_POSTDLY;
       //A_TO_T REALIZAR ESTOS BLOQUES QUE TIENEN LOS NOMBRES SIGUIENTES:
       //VENT_PSTVNET_G
       //VENT_PSTVNET_T
       //VENT_PSTCLDN_T
       
       //T_TO_HMS REALIZAR ESTOS BLOQUES QUE TIENEN LOS NOMBRES SIGUIENTES:
       //VENT_PSTVNTGHMS
       //VENT_PSTVENTHMS
       //VENT_PSTCLDNHMS
       
       //I_COMPARE VENT_PSTVNT_CMP
       if(SHUTDOWN_COOLAIRTMR>0){
                                 OUT_I_CMPR_VENT_PSTCLDNON_IN=1;
                                 }
                                 else{
                                      OUT_I_CMPR_VENT_PSTCLDNON_IN=0;
                                      }
       //TC_MON VENT_STATOR_TMP FALTA REALIZAR BLOQUE TIENE VARIAS SALIDAS
       if(CORE_DIGITAL_PWR_UP==0)
	   {
		   if(N2N5_RTD_TE6421==1)
		   {
			   VENT_TE6421LAG=0;
		   }
		   if(N2N5_RTD_TE6422==1)
		   {
			   VENT_TE6422LAG=0;
		   }
		   if(N2N5_RTD_TE6423==1)
		   {
			   VENT_TE6423LAG=0;
		   }
		   if(N2N5_RTD_TE6424==1)
		   {
			   VENT_TE6424LAG=0;
		   }
		   if(N2N5_RTD_TE6425==1)
		   {
		   VENT_TE6425LAG=0;
		   }
	   }
	   CONTADOR=N2N5_RTD_TE6421+N2N5_RTD_TE6422+N2N5_RTD_TE6423+N2N5_RTD_TE6424+N2N5_RTD_TE6425;

	   DIVISOR=5-CONTADOR;

       OUT_TC_MON_VENT_STATOR_TMP=(VENT_TE6421LAG+VENT_TE6422LAG+VENT_TE6423LAG+VENT_TE6424LAG+VENT_TE6425LAG)/DIVISOR;
	 
	   if((VENT_TE6421LAG>(OUT_TC_MON_VENT_STATOR_TMP+2000))||VENT_TE6421LAG<(OUT_TC_MON_VENT_STATOR_TMP-2000))
	  {
		  VENT_TE6421LAG=0;
	  }
	   if((VENT_TE6422LAG>(OUT_TC_MON_VENT_STATOR_TMP+2000))||VENT_TE6422LAG<(OUT_TC_MON_VENT_STATOR_TMP-2000))
	  {
		  VENT_TE6422LAG=0;
	  }
	  if((VENT_TE6423LAG>(OUT_TC_MON_VENT_STATOR_TMP+2000))||VENT_TE6423LAG<(OUT_TC_MON_VENT_STATOR_TMP-2000))
	  {
		  VENT_TE6423LAG=0;
	  }
       if((VENT_TE6424LAG>(OUT_TC_MON_VENT_STATOR_TMP+2000))||VENT_TE6424LAG<(OUT_TC_MON_VENT_STATOR_TMP-2000))
	  {
		  VENT_TE6424LAG=0;
	  } 
       if((VENT_TE6425LAG>(OUT_TC_MON_VENT_STATOR_TMP+2000))||VENT_TE6425LAG<(OUT_TC_MON_VENT_STATOR_TMP-2000))
	  {
		  VENT_TE6425LAG=0;
	  }
	   //CALC_PLUS VENT_STATOR_F2C(TEMP CONVERT) FALTA REALIZAR ESTE BLOQUE
       
       //A_COMPARE VENT_STTR_LT120 (HYST=-2.0 , IN_1=120.0)
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_1(La salida se hace verdadero como (IN_1) se hace mayor que o igual a (IN_2) 
       y la salida se hace falso como (IN_1) se convierte en menos de [(IN_2) - (el valor absoluto de HYSTER)])*/
       
       /*A_COMPARE CON HISTERESIS NEGATIVA CONDICION_2(La salida pasa falso como (IN_2) se hace mayor que o igual a [(IN_1) + (valor absoluto de HYSTER)] 
       y la salida se hace verdadero como (IN_2) se convierte en menos de (IN_1)*/
       //CONDICION_1
       /*if(120.0>=OUT_TC_MON_VENT_STATOR_TMP){
                                               OUT_A_CMPR_VENT_GFANS_OFF_IN_1=1;
                                               }
                                               if(120.0<(OUT_TC_MON_VENT_STATOR_TMP-2.0){
                                                                                         OUT_A_CMPR_VENT_GFANS_OFF_IN_1=0;
                                                                                         }*/
       //CONDICION_2
       if(OUT_TC_MON_VENT_STATOR_TMP>=122.0)
	   {
		   OUT_A_CMPR_VENT_GFANS_OFF_IN_1=0;
	   }
	   if(OUT_TC_MON_VENT_STATOR_TMP<120.0)
	   {
		   OUT_A_CMPR_VENT_GFANS_OFF_IN_1=1;
	   }
       //A_COMPARE VENT_STARTLTAMB (HYST=*5.0(-5.0,5.0) , IN_1=VENT_AIRFILTAVG_TC_MON)
       //PARA PRUEBAS SE VA A A UTILIZAR UNA HISTERESIS=-5.0 PERO HAY QUE CAMBIAR EL DATO POR EL MENCIONADO EN LA DESCRIPCION DEL BLOQUE
       /*if(VENT_AIRFILTAVG_TC_MON>=OUT_TC_MON_VENT_STATOR_TMP){
                                                                OUT_A_CMPR_VENT_GFANS_OFF_IN_2=1;
                                                                }
                                                                if(VENT_AIRFILTAVG_TC_MON<(OUT_TC_MON_VENT_STATOR_TMP-2.0){
                                                                                                                           OUT_A_CMPR_VENT_GFANS_OFF_IN_2=0;
                                                                                                                           }*/
       //CONDICION_2
       if(OUT_TC_MON_VENT_STATOR_TMP>=(VENT_AIRFILTAVG_TC_MON+5.0)){
                                                                    OUT_A_CMPR_VENT_GFANS_OFF_IN_2=0;
                                                                    }
                                                                    if(OUT_TC_MON_VENT_STATOR_TMP<VENT_AIRFILTAVG_TC_MON){
                                                                                                                          OUT_A_CMPR_VENT_GFANS_OFF_IN_2=1;
                                                                                                                          }
       //A_COMPARE VENT_STATORGT14 (HYST=0.0 , IN_2=14.0)
       //CONDICION_1
       if(OUT_TC_MON_VENT_STATOR_TMP>=14.0){
                                            OUT_A_CMPR_VENT_STATORGT14=1;
                                            }
                                            if(OUT_TC_MON_VENT_STATOR_TMP<14.0){
                                                                                OUT_A_CMPR_VENT_STATORGT14=0;
                                                                                }
       //CONDICION_2
       /*if(14.0>OUT_TC_MON_VENT_STATOR_TMP){
                                             OUT_A_CMPR_VENT_STATORGT14=0;
                                             }
                                             if(14.0<OUT_TC_MON_VENT_STATOR_TMP){
                                                                                 OUT_A_CMPR_VENT_STATORGT14=1;
                                                                                 }*/
///////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 276 AUX SKID FAN INTERFACE//

       //NOT AUX_SKID_TE64028OK
       NFALSE_AUX_SKID_TE64028VST=NOT(FALSE_AUX_SKID_TE64028VST);
       //CALC_PLUS AUX_SKID_TE64028LOG (LT-6045 CONTROL ALM & SD LOGIC) FALTA REALIZAR ESTE BLOQUE 
       
       //DELAY AUX_SKID_DLY_ON
       DLY_AUX_SKID_MASKFANON1=AUX_SKID_TE64028LOG_B_OUT_3;
       TOND(DLY_AUX_SKID_MASKFANON1,TP_DLY_AUX_SKID_MASKFANON1,Time_factor,out_DLY_AUX_SKID_MASKFANON1);
       //ESTE DELAY TIENE 2 SALIDAS
       //AND AUX_SKID_MASKFANON1
       if(AUX_SKID_TE64028LOG_B_OUT_1==1&& out_DLY_AUX_SKID_MASKFANON1[1]==1){
                                                                         OUT_AND_AUX_SKID_MOT64026_IN=1;
                                                                         }
                                                                         else{
                                                                              OUT_AND_AUX_SKID_MOT64026_IN=0;
                                                                              }
                                                                              //LA SALIDA VA A UN BLOQUE BNAME SIN SALIDAS (AUX SKID ENCLOSURE VENT FAN "A")
       //AND AUX_SKID_MASKFANON2
       if(out_DLY_AUX_SKID_MASKFANON1[1]==1&&AUX_SKID_TE64028LOG_B_OUT_2==1){
                                                                         OUT_AND_AUX_SKID_MOT64027_IN=1;
                                                                         }
                                                                         else{
                                                                              OUT_AND_AUX_SKID_MOT64027_IN=0;
                                                                              }
                                                                              //LA SALIDA VA A UN BLOQUE BNAME SIN SALIDAS (AUX SKID ENCLOSURE VENT FAN "B")
       //OR AUX_SKID_OPNEXHOR
       if(AUX_SKID_TE64028LOG_B_OUT_1==1||AUX_SKID_TE64028LOG_B_OUT_2==1||AUX_SKID_TE64028LOG_B_OUT_3==1){
                                                                                                          OUT_OR_AUX_SKID_DLY_OFF_TRIGGER=1;
                                                                                                          }
                                                                                                          else{
                                                                                                               OUT_OR_AUX_SKID_DLY_OFF_TRIGGER=0;
                                                                                                               }
       //DELAY AUX_SKID_DLY_OFF
       DLY_AUX_SKID_SOV64083_IN=OUT_OR_AUX_SKID_DLY_OFF_TRIGGER;
       TOFD(DLY_AUX_SKID_SOV64083_IN,TP_DLY_AUX_SKID_SOV64083_IN,Time_factor,out_DLY_AUX_SKID_SOV64083_IN);
       //LA SALIDA DEL DELAY VA A 2 BLOQUES BNAME AMBOS SIN SALIDA CON LOS SIGUIENTES NOMBRES: (AUX SKID EXHAUST AIR DAMPER #1) Y (AUX SKID EXHAUST AIR DAMPER #2)
///////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 277 GENERATOR LOGIC//

       //SWITCH GENERATOR_UTIL_SW
       if(FALSE_GENERATOR_UTIL_SW==1){
                                      OUT_GENERATOR_UTIL_SW_B_SW=GENERATOR_UTIL_BKRCL;
                                      }
                                      else{
                                           OUT_GENERATOR_UTIL_SW_B_SW=TRUE_GENERATOR_UTIL_SW;
                                           }
       //AND GENERATOR PSS_ONENBL
       if(GENERATOR_GEN_BKRCLS==1&& OUT_GENERATOR_UTIL_SW_B_SW==1){
                                                                OUT_GENERATOR_PSS_ONENBL_AND=1;
                                                                }
                                                                else{
                                                                     OUT_GENERATOR_PSS_ONENBL_AND=0;
                                                                     }
                                                                     //ESTA SALIDA VA A BLOQUE BNAME: "UNA SALIDA  B_FORCE_K230B_IN(POWER SYSTEM STABILIZER ON)"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 278 GENERATOR INTERFACE//
     
      //AND GENERATOR UTILITY
      if(N3N42_BI_UTIL_CLSD==1&& FALSE_GENERATOR_GSO21_OPIN==0){
                                                              OUT_GENERATOR_UTILITY_AND=1;
                                                              }
                                                              else{
                                                                   OUT_GENERATOR_UTILITY_AND=0;
                                                                   }
     //AND GENERATOR DROOP AND
     if(OUT_GENERATOR_UTILITY_AND==1&& A1_A12_BI2_K229==1&& FALSE_GENERATOR_CMD_ISOC==0&& FALSE_GENERATOR_STP_SYNCIN==0){
                                                                                                                   OUT_GENERATOR_DROOP_AND=1;
                                                                                                                   }
                                                                                                                   else{
                                                                                                                        OUT_GENERATOR_DROOP_AND=0;
                                                                                                                        }
     //SWITCH GENERATOR_SEL_DROOP
       if(FALSE_GENERATOR_SEL_DROOP==1){
                                       OUT_GENERATOR_SEL_DROOP_B_SW=A1_A12_BI1_K67;
                                       }
                                       else{
                                            OUT_GENERATOR_SEL_DROOP_B_SW=OUT_GENERATOR_DROOP_AND;
                                            }
                                            //SALIDA DE SWITCH VA A BLOQUE BNAME DE VARIAS SALIDAS (UTILITY & GENERATOR BREAKER CLOSED)
     //BLOQUE AND GENERATOR_NSDROOP
     if(SHUTDOWN_CDLO==1&& GENERATOR_DROOP==1){
                                             OUT_GENERATOR_NSDROOP_AND=1;
                                             }
                                             else{
                                                  OUT_GENERATOR_NSDROOP_AND=0;
                                                  }
     //BLOQUE AND GENERATOR_NSISOCH
     if(SHUTDOWN_CDLO==1&& GENERATOR_ISOCH==1){
                                             OUT_GENERATOR_NSISOCH_AND=1;
                                             }
                                             else{
                                                  OUT_GENERATOR_NSISOCH_AND=0;
                                                  }
     //BLOQUE NOT GENERATOR_NOT_FAILED
     //Llamada de funcion para invertir la entrada A1_A12_BI1_BRKR_FAIL
     NA1_A12_BI1_BRKR_FAIL=NOT(A1_A12_BI1_BRKR_FAIL); 
     //Salida del inversor VA A BLOQUE BNAME: "UNA SALIDA SHUTDOWN_SD_GEN_IN_1(GENERATOR BREAKER FAILURE)(SD GEN) 
     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     //BLOQUE AND GENERATOR_RTRGNDMSK
     if(N3N39_BI_RTRGRNDFLT==0&& SPEED_SW_NSDGT3590==1){
                                                      OUT_GENERATOR_RTRGNDMSK_AND=1;
                                                      }
                                                      else{
                                                           OUT_GENERATOR_RTRGNDMSK_AND=0;
                                                           }
     //BLOQUE NOT GENERATOR_DIODE_FL
     //Llamada de funcion para invertir la entrada N3N39_BI_DIODE_FAIL
     NN3N39_BI_DIODE_FAIL=NOT(N3N39_BI_DIODE_FAIL);
     //Salida del inversor VA A BLOQUE BNAME CON VARIAS SALIDAS (GEN EXCITER DIODE FAILURE)(ALARM)    
     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     //BLOQUE NOT GENERATOR_N_AVRFAULT
     //Llamada de funcion para invertir la entrada N3N39_BI_AVR_FAULT
     NN3N39_BI_AVR_FAULT=NOT(N3N39_BI_AVR_FAULT);
     //Salida del inversor VA A BLOQUE BNAME CON VARIAS SALIDAS (GEN MAIN AVR FAULT)(ALARM)
     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     //BLOQUE NOT GENERATOR_UTIL86TP
     //Llamada de funcion para invertir la entrada N3N40_BI_CUST_86T
     NN3N40_BI_CUST_86T=NOT(N3N40_BI_CUST_86T);
     //Salida del inversor VA A BLOQUE BNAME: UNA SALIDA "ALARM.ALM_LAT.IN_95"(BUS/UTILITY 86 TRIP)(ALARM)
     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 279 GENERATOR INTERFACE//

     //NOT GENERATOR_IGPS52GTNT
     NN3N42_BI_IGPS52GTRP_BI_L=NOT(N3N42_BI_IGPS52GTRP_BI_L);
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM_ALM_LAT_IN_89" (IGPS (DGP) 52G TRIP)(ALARM)
     //NOT GENERATOR IGPSFLTANT
     NN3N42_BI_IGPSFLTALM_BI_L=NOT(N3N42_BI_IGPSFLTALM_BI_L);
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM_ALM_LAT_IN_85" (IGPS (DGP) FAULT ALARM)(ALARM)
     //SWITCH GENERATOR_IGPSFDLT12
       if(TRUE_GENERATOR_IGPSFDLT12==1){
                                        OUT_B_SW_GENERATOR_N_IGPSFAIL_IN=TRUE_GENERATOR_IGPSFDLT12_NO;
                                        }
                                        else{
                                             OUT_B_SW_GENERATOR_N_IGPSFAIL_IN=N3N42_BI_IGPSFAIL_BI_L;
                                             }
     //NOT GENERATOR_N_IGPSFAIL
     NOUT_B_SW_GENERATOR_N_IGPSFAIL_IN=NOT(OUT_B_SW_GENERATOR_N_IGPSFAIL_IN);
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "SHUTDOWN_CDLO_GEN_IN_1" (IGPS (DGP) FAILURE)(CDLO GEN)
     //AND GENERATOR_MASK_1
     if(SPEED_SW_NSDGT3590==1&& N3N39_BI_GEN_EX_LIM_BI_L==0){
                                                           OUT_AND_GENERATOR_GEN_EX_LIM_IN=1;
                                                           }
                                                           else{
                                                                OUT_AND_GENERATOR_GEN_EX_LIM_IN=0;
                                                                }
                                                                //ESTA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS "GENERATOR.EX_SUM_OR_IN_2"(GEN EXCITATION LIMITER OPERATION)(ALARM)
     //NOT GENERATOR_N_GEN86LTP
     NN3N42_BI_GEN_86TRPL_BI_L=NOT(N3N42_BI_GEN_86TRPL_BI_L);
     //ESTA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS "GENERATOR.TRIP.IN_5"(GEN 86 TRIP LOCAL)(SD GEN)
     //NOT GENERATOR_N_GEN86RTP
     NA1_A12_BI1_TRIP_86_BIO_BI=NOT(A1_A12_BI1_TRIP_86_BIO_BI);
     //ESTA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS "GENERATOR.TRIP.IN_6"(GEN 86 TRIP (REMOTE))(SD GEN)
     //AND_GENERATOR_AVR_ALMMSK
     if(N3N39_BI_AVR_SUMALM_BI_L_NOT==1&& SPEED_SW_NSDGT3240==1){
                                                               OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER=1;
                                                               }
                                                               else{
                                                                    OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER=0;
                                                                    }
     //DELAY GENERATOR_AVRALM_DLY (DLY_TIME=*0.0(0.0,5.0))
     //PARA PRUEBAS SE USARÀ UN DLY_TIME=5 PERO HAY QUE CAMBIARLO POR EL DATO MENCIONADO EN LAS CARACTERISTICAS
     DLY_GENERATOR_AVR_ALARM_IN=OUT_AND_GENERATOR_AVRALM_DLY_TRIGGER;
     TOND(DLY_GENERATOR_AVR_ALARM_IN,TP_DLY_GENERATOR_AVR_ALARM_IN,Time_factor,out_DLY_GENERATOR_AVR_ALARM_IN);
     //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "GENERATOR.EX_SUM_OR.IN_4"(GEN AVR SUMMARY ALARM)(ALARM)
     //OR GENERATOR_AVRSDRST
     if(SFC_STEP_RST_AND_ST==1||OUT_OR_GENERATOR_AVR_NOT_ON==1){
                                                                OUT_OR_GENERATOR_AVR_SDOFF_RST=1;
                                                                }
                                                                else{
                                                                     OUT_OR_GENERATOR_AVR_SDOFF_RST=0;
                                                                     }
     //LATCH GENERATOR_AVR_SDOFF
     //Llamada de funcion para el flip-flop LATCH_GENERATOR_RESET85PCT_IN_3 de tipo RS
     LATCH_GENERATOR_RESET85PCT_IN_3[1]=SHUTDOWN_ANY_SD;
     LATCH_GENERATOR_RESET85PCT_IN_3[2]=OUT_OR_GENERATOR_AVR_SDOFF_RST;
     RS(LATCH_GENERATOR_RESET85PCT_IN_3,out_LATCH_GENERATOR_RESET85PCT_IN_3);
     //AND GENERATOR_RESET85PCT
     if(SPEED_SW_NSDLT3060==1&& GENERATOR_GEN_BKROPN==1&& out_LATCH_GENERATOR_RESET85PCT_IN_3[1]==1){
                                                                                              OUT_AND_GENERATOR_AVR_OFF_IN_1=1;
                                                                                              }
                                                                                              else{
                                                                                                   OUT_AND_GENERATOR_AVR_OFF_IN_1=0;
                                                                                                   }
     //AND GENERATOR_AVROFF_1
     if(out_LATCH1_GENERATOR_EAX_ALM_IN==1&& GENERATOR_GEN_BKROPN==1){
                                                                    OUT_AND_GENERATOR_AVR_OFF_IN_2=1;
                                                                    }
                                                                    else{
                                                                         OUT_AND_GENERATOR_AVR_OFF_IN_2=0;
                                                                         }
     //OR GENERATOR_AVR_OFF
     if(OUT_AND_GENERATOR_AVR_OFF_IN_1==1||OUT_AND_GENERATOR_AVR_OFF_IN_2==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_SDN_CORE==1){
                                                                                                                         OUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK=1;
                                                                                                                         }
                                                                                                                         else{
                                                                                                                              OUT_OR_GENERATOR_AVR_OFF_Z_FEEDBACK=0;
                                                                                                                              }
     //ZMINUS1_B GENERATOR_AVR_OFF_Z FALTA REALIZAR ESTE BLOQUE VA A LA SALIDA DEL BLOQUE OR ANTERIOR Y ANTES DEL LATCH_R DE ABAJO
     
     //LATCH_R GENERATOR_AVR_ON
     LATCH_R_GENERATOR_COND_OR85_IN_1[1]=SPEED_SW_NSDGT3240;
     LATCH_R_GENERATOR_COND_OR85_IN_1[2]=GENERATOR_AVR_ON_RST;
     SR(LATCH_R_GENERATOR_COND_OR85_IN_1,out_LATCH_R_GENERATOR_COND_OR85_IN_1);
     //OR GENERATOR_COND_OR85
     if(out_LATCH_R_GENERATOR_COND_OR85_IN_1[1]==1||GENERATOR_CONDENSING==1){
                                                                          OUT_OR_GENERATOR_EXCTR_ON_IN=1;
                                                                          }
                                                                          else{
                                                                               OUT_OR_GENERATOR_EXCTR_ON_IN=0;
                                                                               }
                                                                               //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "B_FORCE.K194.IN" (CNTRL) Y A UN BLOQUE NOT CON UNA SALIDA "GENERATOR_AVRSDRST.IN_2"
     //DELAY GENERATOR_DLY_85PCT (DLY_TIME=*5.0(0.0,20.0))
     //PARA PRUEBAS SE VA A USAR UN TIEMPO=5 PERO HAY QUE CAMBIARLO POR EL MENCIONADO EN LA DESCRIPCION
     DLY_GENERATOR_MASK_2_IN_1=GENERATOR_EXCTR_ON;
     TOND(DLY_GENERATOR_MASK_2_IN_1,TP_DLY_GENERATOR_MASK_2_IN_1,Time_factor,out_DLY_GENERATOR_MASK_2_IN_1);
     //AND GENERATOR_MASK_2
     if(out_DLY_GENERATOR_MASK_2_IN_1[1]==1&& N3N39_BI_EXCIT_ALM_BI_L==0){
                                                                     OUT_AND_GENERATOR_EXCIT_ALM_IN=1;
                                                                     }
                                                                     else{
                                                                          OUT_AND_GENERATOR_EXCIT_ALM_IN=0;
                                                                          }
                                                                          //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "GENERATOR_EX_SUM_OR_IN_1" (GEN AVR EXCITATION TRIPPED)(ALARM)
     //A_COMPARE GENERATOR_EAX_CMP (HYST=0.0 , IN_2=8.0)
     //CONDICION_1
     if(N3N18_AI_EAX_AI_420_L>=8.0){
                                    OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2=1;
                                    }
                                    if(N3N18_AI_EAX_AI_420_L<8.0){
                                                                  OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2=0;
                                                                  }
     //CONDICION_2
     /*if(8.0>N3N18_AI_EAX_AI_420_L){
                                     OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2=0;
                                     }
                                     if(8.0<N3N18_AI_EAX_AI_420_L){
                                                                   OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2=1;
                                                                   }*/
     //AND GENERATOR_MASKEAXAL
     if(GENERATOR_GEN_BKROPN==1&& OUT_A_CMPR_GENERATOR_MASKEAXAL_IN_2==1){
                                                                        OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER=1;
                                                                        }
                                                                        else{
                                                                             OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER=0;
                                                                             }
     //DELAY GENERATOR_DLY_EAX_AL (DLY_TIME=2)
     DLY_GENERATOR_EAXALMLAT_IN_1=OUT_AND_GENERATOR_DLY_EAX_AL_TRIGGER;
     TOND(DLY_GENERATOR_EAXALMLAT_IN_1,TP_DLY_GENERATOR_EAXALMLAT_IN_1,Time_factor,out_DLY_GENERATOR_EAXALMLAT_IN_1);
     //LATCH1 GENERATOR_EAXALMLAT FALTA REALIZARLO
     
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM.ALM_LAT.IN_60" (HIGH EXCITATION CURRENT ALARM)(ALARM)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 280 GENERATOR INTERFACE//

     //OR GENERATOR_TRIP
     if(CORE_DIGITAL_FUELOFF==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_SDN_CORE==1||SHUTDOWN_STEPIDLE==1||GENERATOR_GEN86TRIPL==1||GENERATOR_GEN86TRIPR==1||SHUTDOWN_DMINTONS==1||SFC_STEP_NORM_3_SFC_STEP==1||ALARM_HMI_STI==1||GENERATOR_STP_2_SYNC==1||SPEED_SW_NSDLT3420==1){
                                                                                                                                                                                                                                                                         OUT_OR_GENERATOR_BKR_OK_RST=1;
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                         else{
                                                                                                                                                                                                                                                                              OUT_OR_GENERATOR_BKR_OK_RST=0;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              //LA SALIDA VA A UN LATCH Y A UNA AND PASANDO ANTES POR UNA NEGACION
     //AND GENERATOR_MASKBRKR
     if(OUT_OR_GENERATOR_BKR_OK_RST==0&& SHUTDOWN_NO_SHTDNS==1&& SPEED_SW_NSDGT3590==1){
                                                                                    OUT_AND_GENERATOR_BKR_OK_TRIGGER=1;
                                                                                    }
                                                                                    else{
                                                                                         OUT_AND_GENERATOR_BKR_OK_TRIGGER=0;
                                                                                         }
                                                                                         //LA AND TIENE DOS SALIDAS UNA AL BLOQUE LATCH SIGUIENTE Y OTRA "GENERATOR_SYNC_EN_IN_2"
     //LATCH GENERATOR_BKR_OK
     LATCH_GENERATOR_K85_IN[1]=OUT_AND_GENERATOR_BKR_OK_TRIGGER;
     LATCH_GENERATOR_K85_IN[2]=OUT_OR_GENERATOR_BKR_OK_RST;
     RS(LATCH_GENERATOR_K85_IN,out_LATCH_GENERATOR_K85_IN);
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "B_FORCE_K85_IN"(CIRCUIT BREAKER CONTROL)(CNTRL)
     //AND GENERATOR_SYNC_EN
     if(N3N42_BI_AUTO_SYNC_BI_L==1&& OUT_AND_GENERATOR_BKR_OK_TRIGGER==1&& SFC_TIMER_WARMUP_DN==1&& SFC_STEP_READY2SYNC_SFC_STEP==1){
                                                                                                                               OUT_AND_GENERATOR_SYNC_ENABL_IN=1;
                                                                                                                               }
                                                                                                                               else{
                                                                                                                                    OUT_AND_GENERATOR_SYNC_ENABL_IN=0;
                                                                                                                                    }
                                                                                                                                    //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "XNSD_REF.SYNC_ENBLE.IN"(SYNCHRONIZER ENABLE)(CNTRL)
     //OR GENERATOR_EX_SUM_OR (EXCTIATION SUMMARY ALARM)
     if(GENERATOR_EXCIT_ALM==1||GENERATOR_GEN_EX_LIM==1||GENERATOR_DIODE_FAIL==1||GENERATOR_AVR_ALARM==1||GENERATOR_AVR_FAULT==1){
                                                                                                                                  OUT_OR_GENERATOR_EX_SUMMARY_IN=1;
                                                                                                                                  }
                                                                                                                                  else{
                                                                                                                                       OUT_OR_GENERATOR_EX_SUMMARY_IN=0;
                                                                                                                                       }
                                                                                                                                       //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "DATA_IO.LCR.BR_V_1910"(EXCTIATION SUMMARY ALARM)(STATUS)
     //ONE_SHOT GENERATOR_VLT_LWRPLS (DLY_TIME=*0.5(0.1,0.5)) FALTA REALIZARLO
     
     //ONE_SHOT GENERATOR_VLT_RSEPLS (DLY_TIME=*0.5(0.1,0.5)) FALTA REALIZARLO
     
     //NOT GENERATOR_NOTLSH6834
     NTRUE_GENERATOR_NOTLSH6834=NOT(TRUE_GENERATOR_NOTLSH6834);
     //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM.ALM_LAT.IN_255" (LSH6834 GEN COOLER LEAK DETECTORS L)(ALARM)
     //A_COMPARE GENERATOR_TE6432LOG (HYST=0.0 , IN_2=113.0)
     //CONDICION_1
     if(GENERATOR_TE6432>=113.0){
                                 OUT_A_CMPR_GENERATOR_TE6432_H_IN=1;
                                 }
                                 if(GENERATOR_TE6432<113.0){
                                                            OUT_A_CMPR_GENERATOR_TE6432_H_IN=0;
                                                            }
     //CONDICION_2
     /*if(113.0>GENERATOR_TE6432){
                                  OUT_A_CMPR_GENERATOR_TE6432_H_IN=0;
                                  }
                                  if(113.0<GENERATOR_TE6432){
                                                             OUT_A_CMPR_GENERATOR_TE6432_H_IN=1;
                                                             }*/
                                                             //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM.ALM_LAT.IN_251"(TE6432 GEN AIR INLET TMP (NDE) H)(ALARM)
     //A_COMPARE GENERATOR_TE6433LOG (HYST=0.0 , IN_2=113.0)
     //CONDICION_1
     if(GENERATOR_TE6433>=113.0){
                                 OUT_A_CMPR_GENERATOR_TE6433_H_IN=1;
                                 }
                                 if(GENERATOR_TE6433<113.0){
                                                            OUT_A_CMPR_GENERATOR_TE6433_H_IN=0;
                                                            }
     //CONDICION_2
     /*if(113.0>GENERATOR_TE6433){
                                  OUT_A_CMPR_GENERATOR_TE6433_H_IN=0;
                                  }
                                  if(113.0<GENERATOR_TE6433){
                                                             OUT_A_CMPR_GENERATOR_TE6433_H_IN=1;
                                                             }*/
                                                             //LA SALIDA VA A UN BLOQUE BNAME CON UNA SALIDA: "ALARM.ALM_LAT.IN_252"(TE6433 GEN AIR INLET TMP (DE) H)(ALARM)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 281 SPRINT SYSTEM (IFACE SPRINT)//

     //SWITCH SPRINT_Z_SPRDMSEQ
     if(IFACE_SPRINT_C_H2ORAISE==1){
                                    OUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN=20.0;
                                    }
                                    else{
                                         OUT_A_SW_IFACE_CORE_Z_SPRDMSEQ_IN=4.0;
                                         }
                                         //LA SALIDA VA A UN BLOQUE ANAME SIN SALIDAS (RAMP INPUT TO CORE)(GPM)
     //OR IFACE_CORE_ZSPRTONOR
     if(SPRINT_LP_ON_3_SFC_STEP==1||SPRINT_HP_2_LP_1_SFC_STEP==1||SPRINT_HP_2_LP_2_SFC_STEP==1||SPRINT_HP_2_LP_3_SFC_STEP==1||SPRINT_LP_OFF_1_SFC_STEP==1||SPRINT_HP_ON_3_SFC_STEP==1||SPRINT_LP_2_HP_1_SFC_STEP==1||SPRINT_LP_2_HP_2_SFC_STEP==1||SPRINT_LP_2_HP_3_SFC_STEP==1||SPRINT_LP_2_HP_4_SFC_STEP==1||SPRINT_LP_2_HP_5_SFC_STEP==1||SPRINT_HP_OFF_1_SFC_STEP==1){
                                                                                                                                                                                                                                                                                                                                                                          OUT_OR_IFACE_CORE_Z_SPRINTON_IN=1;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          else{
                                                                                                                                                                                                                                                                                                                                                                               OUT_OR_IFACE_CORE_Z_SPRINTON_IN=0;
                                                                                                                                                                                                                                                                                                                                                                               }
     //T_FLIP-FLOP SPRINT_MANUAL_FF FALTA REALIZAR ESTE BLOQUE

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 282 SPRINT SYSTEM (RAMP,ENABLE,&PERM BUS)//

     //ONE_SHOT SPRINT_ENBL_OS FALTA REALIZAR ESTE BLOQUE
     
     //Z_MINUS1_B SPRINT_DSBL_Z FALTA REALIZAR ESTE BLOQUE
     
     //AND SPRINT_OPTION
     if(FALSE_SPRINT_OPTION==1&& OUT_ZMINUS1_B_SPRINT_OPTION_IN_2==1){
                                                                    OUT_AND_SPRINT_ENBL_RST=1;
                                                                    }
                                                                    else{
                                                                         OUT_AND_SPRINT_ENBL_RST=0;
                                                                         }
     //T_FLIPFLOP SPRINT_ENBL FALTA REALIZAR ESTE BLOQUE
     //CUENTA CON DOS SALIDAS UNA A UNA AND Y OTRA AUN BLOQUE BNAME CON VARIAS SALIDAS: "DATA_IO.LCR.BR_V_1488"(OPERATED SELECTED TO SPRINT)
     
     //AND SPRINT_SPRINTEN
     if(OUT_T_FF_SPRINT_SPRINTEN_IN_1==1&& OUT_AND_SPRINT_SPRINTEN_IN_2==1){
                                                                          OUT_AND_SPRINT_SPRINTENBL_IN=1;
                                                                          }
                                                                          else{
                                                                               OUT_AND_SPRINT_SPRINTENBL_IN=0;
                                                                               }
                                                                               //LA SALIDA VA A UN BLOQUE BNAME CON VARIAS SALIDAS: "SPRINT.SPRT_OFF.IN"(SPRINT ENABLE ACTIVE)(CNTRL)
     //NOT SPRINT_SPRT_OFF
     NSPRINT_SPRINTENBL=NOT(SPRINT_SPRINTENBL);
     //EL BLOQUE TIENE VARIAS SALIDAS: "ONLINE_WW.ONLNRUNPMR.IN_4"
     //NOR SPRINT_NOSPRTSDSS
     if(CORE_ALM_SPRT1_SPRSDALM1==0||CORE_ALM_SPRT2_SPRSDALM2==0||CORE_ALM_SPRT3_SPRSDALM3==0){
                                                                                               OUT_NOR_SPRINT_READY_EN_IN_10=1;
                                                                                               }
                                                                                               else{
                                                                                                    OUT_NOR_SPRINT_READY_EN_IN_10=0;
                                                                                                    }
     //AND SPRINT_READY_EN (SPRINT PERMISSIVES MET)
     if(IFACE_SPRINT_BRNSPRNTOK==1&& IFACE_SPRINT_T2SPRNTOK==1&& IFACE_SPRINT_DWBSPRNTOK==1&& IFACE_SPRINT_P8THGOOD==1&& IFACE_SPRINT_P8THEGOOD==1&& IFACE_SPRINT_NSDREFSPRT==1&& IFACE_SPRINT_LIQDMDOK==1&& TRUE_SPRINT_FUELSYSRDY==1&& IFACE_SPRINT_PS3SPROK==1&& OUT_NOR_SPRINT_READY_EN_IN_10==1){
                                                                                                                                                                                                                                                                                    OUT_AND_SPRINT_SPRINTEN_IN_2=1;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    else{
                                                                                                                                                                                                                                                                                         OUT_AND_SPRINT_SPRINTEN_IN_2=0;
                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                         //ESTA SALIDA VA A UN BLOQUE AND "SPRINT_SPRINTEN" Y A UN BNAME CON VARIAS SALIDAS: "DATA_IO.LCR.BR_V_1495"(SPRINT PERMISSIVES MET)
     //AND SPRINT_SIM_SPRT
     if(FALSE_SPRINT_SIM_SPRT==1&& SPRINT_ALLOWTEST==1){
                                                      OUT_AND_SPRINT_SPRT_READY_T_COND_4=1;
                                                      }
                                                      else{
                                                           OUT_AND_SPRINT_SPRT_READY_T_COND_4=0;
                                                           }
     //AND SPRINT_SIM_SPRAY
     if(FALSE_SPRINT_SIM_SPRAY==1&& SPRINT_ALLOWTEST==1){
                                                       OUT_AND_SPRINT_SPRT_READY_T_COND_5=1;
                                                       }
                                                       else{
                                                            OUT_AND_SPRINT_SPRT_READY_T_COND_5=0;
                                                            }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 283 SPRINT SYSTEM (TIMER VALUES)//

     //OR SPRINT_FILL_OR
     if(SPRINT_HP_ON_2_SFC_STEP==1||SPRINT_LP_ON_2SFC_STEP==1){
                                                               OUT_OR_SPRINT_FILL_DLY_TRIGGER=1;
                                                               }
                                                               else{
                                                                    OUT_OR_SPRINT_FILL_DLY_TRIGGER=0;
                                                                    }
                                                                    //LA OR TIENE 2 SALIDAS UNA AL DELAY SIGUIENTE Y OTRA AL A_MUX_HSS
     //SWITCH SPRINT_FILL_TM_SW (NC=*90.0 (0.0, 180.0) , NO=*20.0 (0.0, 180.0))
     //PARA PRUEBAS SE USARA UN DATO DE NC=90.0 Y NO=20.0 PERO HAY QUE CAMBIARLOS POR LOS DATOS MENSIONADOS EN LA DESCRIPCION
     if(FALSE_SPRINT_TEST_TIMER==1){
                                    OUT_A_SW_SPRINT_FILL_DLY_DLY_TIME=20.0;
                                    }
                                    else{
                                         OUT_A_SW_SPRINT_FILL_DLY_DLY_TIME=90.0;
                                         }
     //DELAY_SPRINT_FILL_DLY FALTA POR REALIZAR, NO SE COMO ACOPLAR EL SWITCH A LA ENTRADA DE TIEMPO DEL DELAY Y COMO OBTENER EL R_TIME
     
     //A_COMPARE SPRINT_P62239GT15 (HYST=0.0 , IN_2=15.0)
     //CONDICION_1
     if(SPRINT_PT62234>=15.0){
                              OUT_A_CMPR_SPRINT_FILL_DN_IN_2=1;
                              }
                              if(SPRINT_PT62234<15.0){
                                                      OUT_A_CMPR_SPRINT_FILL_DN_IN_2=0;
                                                      }
     //CONDICION_2
     /*if(15.0>SPRINT_PT62234){
                               OUT_A_CMPR_SPRINT_FILL_DN_IN_2=0;
                               }
                               if(15.0<SPRINT_PT62234){
                                                       OUT_A_CMPR_SPRINT_FILL_DN_IN_2=1;
                                                       }*/
     //OR SPRINT_FILL_DN
     if(out_DLY_SPRINT_FILL_DN_IN_1==1||OUT_A_CMPR_SPRINT_FILL_DN_IN_2==1){
                                                                           OUT_OR_SPRINT_LP_ON_2_T_COND_3=1;
                                                                           }
                                                                           else{
                                                                                OUT_OR_SPRINT_LP_ON_2_T_COND_3=0;
                                                                                }
                                                                                //LA COMPUERTA OR TIENE DOS SALIDAS DIFERENTES
     //ZMINUS1_B SRINT_HP_2_LP__Z FALTA REALIZARLO
     
     //DELAY SPRINT_DLY_HPHLD (DLY_TIME=*20.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_DRN_TMR_OR
     if(SPRINT_HP_2_LP_3_SFC_STEP==1||SPRINT_HP_OFF_2_SFC_STEP==1){
                                                                   OUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK=1;
                                                                   }
                                                                   else{
                                                                        OUT_OR_SPRINT_DRNHPTMR_Z_FEEDBACK=0;
                                                                        }
     //ZMINUS1_B SRINT_DRNHPTMR_Z FALTA REALIZARLO
     
     //DELAY SPRINT_DRAINHP_TM (DLY_TIME=*30.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_LP_E_HLD
     if(SPRINT_LP_2_HP_2_SFC_STEP==1||SPRINT_LP_OFF_2_SFC_STEP==1){
                                                                   OUT_OR_SPRINT_LP_E_Z_FEEDBACK=1;
                                                                   }
                                                                   else{
                                                                        OUT_OR_SPRINT_LP_E_Z_FEEDBACK=0;
                                                                        }
     //ZMINUS1_B LP_E__Z FALTA REALIZARLO
     
     //DELAY SPRINT_DLY_LPEHLD (DLY_TIME=*10.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_EV_TM_OR
     if(SPRINT_LP_2_HP_3_SFC_STEP==1||SPRINT_LP_OFF_3_SFC_STEP==1||SPRINT_OFF_1_SFC_STEP==1){
                                                                                             OUT_OR_SPRINT_EVAC_Z_FEEDBACK=1;
                                                                                             }
                                                                                             else{
                                                                                                  OUT_OR_SPRINT_EVAC_Z_FEEDBACK=0;
                                                                                                  }
     //ZMINUS1_B EVAC_Z FALTA REALIZARLO
     
     //DELAY EVAC_TMR (DLY_TIME=*30.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_LP_PRGT_OR
     if(SPRINT_LP_2_HP_5_SFC_STEP==1||SPRINT_LP_OFF_5_SFC_STEP==1||SPRINT_OFF_2_SFC_STEP==1){
                                                                                             OUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK=1;
                                                                                             }
                                                                                             else{
                                                                                                  OUT_OR_SPRINT_LP_PRGT_Z_FEEDBACK=0;
                                                                                                  }
     //ZMINUS1_B LP_PRGT_Z FALTA REALIZARLO
     
     //DELAY LP_PRG_TMR (DLY_TIME=*30.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //ZMINUS1_B DN_PRGT_Z FALTA REALIZARLO
     
     //DELAY DN_PRG_TMR (DLY_TIME=*30.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_JIMMY_SW2
     if(SPRINT_HP_2_LP_3_SFC_STEP==1||SPRINT_OFF_4_SFC_STEP==1){
                                                                OUT_OR_SPRINT_JIMMY_SW2_NC=1;
                                                                }
                                                                else{
                                                                     OUT_OR_SPRINT_JIMMY_SW2_NC=0;
                                                                     }
     //SWITCH SPRINT_JIMMY_SW2
     if(FALSE_SPRINT_JIMMY_SPRT==1){
                                    OUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK=SPRINT_MASK_PURGE;
                                    }
                                    else{
                                         OUT_B_SW_SPRINT_HP_PRGT_Z_FEEDBACK=OUT_OR_SPRINT_JIMMY_SW2_NC;
                                         }
                                         //EL SWITCH TIENE DOS SALIDAS UNA A UN BLOQUE ZMINUS Y OTRA "SPRINT.JIMMY_SW3.NO"
     //ZMINUS1_B HP_PRGT_Z FALTA REALIZARLO
     
     //DELAY HP_PRG_TMR (DLY_TIME=*30.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //OR SPRINT_LP_PRG_HLD
     if(SPRINT_LP_2_HP_4_SFC_STEP==1||SPRINT_LP_OFF_4_SFC_STEP==1){
                                                                   OUT_OR_SPRINT_LP_PRG_Z_FEEDBACK=1;
                                                                   }
                                                                   else{
                                                                        OUT_OR_SPRINT_LP_PRG_Z_FEEDBACK=0;
                                                                        }
     //ZMINUS1_B LP_PRG_Z FALTA REALIZARLO
     
     //DELAY DLY_LPPHLD (DLY_TIME=*0.0 (0.0, 300.0)) FALTA REALIZARLO TIENE SALIDA EN "DELAY" Y "EN R_TIME"
     
     //I_TO_AN SPRINT_TMR_CNVT
     SPRINT_TIMERS_IN_1=(float)out_DLY_SPRINT_FILL_DN_IN_1;
     SPRINT_TIMERS_IN_2=(float)SPRINT_TMR_CNVT_IN_2;
     SPRINT_TIMERS_IN_3=(float)SPRINT_TMR_CNVT_IN_3;
     SPRINT_TIMERS_IN_4=(float)SPRINT_TMR_CNVT_IN_4;
     SPRINT_TIMERS_IN_5=(float)SPRINT_TMR_CNVT_IN_5;
     SPRINT_TIMERS_IN_6=(float)SPRINT_TMR_CNVT_IN_6;
     SPRINT_TIMERS_IN_7=(float)SPRINT_TMR_CNVT_IN_7;
     SPRINT_TIMERS_IN_8=(float)SPRINT_TMR_CNVT_IN_8;
     SPRINT_TIMERS_IN_9=(float)SPRINT_TMR_CNVT_IN_9;
     //A_MUX_HSS SPRINT_TIMERS FALTA REALIZAR ESTE BLOQUE
     
     //I_TO_AN TMR_ANLG
     SPRINT_TMR_ANGL=(float)SPRINT_TMR_ANGL_IN_1;
     //EL BLOQUE NO TIENE SALIDAS SE USÒ SU NOMBRE PARA DECLARAR LA VARIABLE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 284 SPRINT SYSTEM (LP SEQUENCE LOGIC)//

     //AND SPRINT_SEL_SPRINT
     if(IFACE_SPRINT_C_LPSPRTEN==0&& SPRINT_SPRINTENBL==1&& SPRINT_HP_SPRNTOK==1){
                                                                              OUT_AND_SPRINT_SPRT_READY_T_COND_2=1;
                                                                              }
                                                                              else{
                                                                                   OUT_AND_SPRINT_SPRT_READY_T_COND_2=0;
                                                                                   }
     //AND SPRINT_SEL_SPRAY
     if(SPRINT_C_LPSPRTEN==1&& SPRINT_SPRINTENBL==1){
                                                   OUT_AND_SPRINT_SPRT_READY_T_COND_3=1;
                                                   }
                                                   else{
                                                        OUT_AND_SPRINT_SPRT_READY_T_COND_3=0;
                                                        }
     //OR SPRINT_BACK_TO_LP
     if(SPRINT_LP_OFF_2_TRAN_2==1||SPRINT_LP_OFF_3_TRAN_2==1||SPRINT_LP_OFF_4_TRAN_2==1||SPRINT_LP_OFF_5_TRAN_2==1||SPRINT_HP_OFF_2_TRAN_2==1||SPRINT_OFF_1_TRAN_2==1||SPRINT_OFF_2_TRAN_2==1||SPRINT_OFF_3_TRAN_2==1||SPRINT_OFF_4_TRAN_2==1){
                                                                                                                                                                                                                                               OUT_OR_SPRINT_LP_ON_1_SF_SEL_2=1;
                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                               else{
                                                                                                                                                                                                                                                    OUT_OR_SPRINT_LP_ON_1_SF_SEL_2=0;
                                                                                                                                                                                                                                                    }
     //OR SPRINT_TRANS_OFF
     if(SPRINT_SDLATCHLP==1||CORE_DIGITAL_FUELOFF==1||SPRINT_SPRT_OFF==1||SPRINT_OFF_MASK==1||SPRINT_TNK_VACSW==1||CORE_ALM_SPRT1_SPRSDALM1==1||CORE_ALM_SPRT2_SPRSDALM2==1||CORE_ALM_SPRT3_SPRSDALM3==1){
                                                                                                                                                                                                          OUT_OR_SPRINT_TRANSOFF_IN_1=1;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          else{
                                                                                                                                                                                                               OUT_OR_SPRINT_TRANSOFF_IN_1=0;
                                                                                                                                                                                                               }
     //AND SPRINT_TRANSOFF
     if(OUT_OR_SPRINT_TRANSOFF_IN_1==1&&SPRINT_NOTTEST==1){
                                                          OUT_AND_SPRINT_HP_2_LP_1_T_COND_1=1;
                                                          }
                                                          else{
                                                               OUT_AND_SPRINT_HP_2_LP_1_T_COND_1=0;
                                                               }
     //OR SPRINT_STRT_ESPRT
     if(SPRINT_LP_2_HP_1_TRAN_2==1||SPRINT_LP_2_HP_2_TRAN_2==1||SPRINT_LP_2_HP_3_TRAN_2==1||SPRINT_LP_2_HP_4_TRAN_2==1||SPRINT_LP_2_HP_5_TRAN_2==1||SPRINT_HP_ON_3_TRAN_2==1||SPRINT_LP_OFF_1_TRAN_2==1||SPRINT_HP_OFF_1_TRAN_2==1){
                                                                                                                                                                                                                                    OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1=1;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    else{
                                                                                                                                                                                                                                         OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1=0;
                                                                                                                                                                                                                                         }
     //GRAFCET LP SPRINT SEQUENCE
     //SECUENCIA1
     //ETAPA1 SPRINT SYSTEM READY TO START
     if(SPRINT_NOTREADY_TRAN_1==1){
                                  OUT_S1_ET1_SPRINT_ACTIVE_IN_1=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                  }
                                  else{
                                       OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                       if(OUT_S1_ET2_SPRINT_ACTIVE_IN_2==1){
                                                                            OUT_S1_ET1_SPRINT_ACTIVE_IN_1=1;
                                                                            }                                                                                 
                                       }
     //ETAPA2 LP ON SEQ1: ACTIVATE FORWARDING PUMP
     if(OUT_S1_ET1_SPRINT_ACTIVE_IN_1==1&& SPRINT_TRANSOFF==1&& OUT_AND_SPRINT_SPRT_READY_T_COND_2==1&& OUT_AND_SPRINT_SPRT_READY_T_COND_3==1&& SPRINT_SIM_SPRT==1&& SPRINT_SIM_SPRAY==1&& OUT_OR_SPRINT_LP_ON_1_SF_SEL_2==1&& SPRINT_SPRT_READY_TRAN_5==1){
                                                                                                                                                                                                                                              OUT_S1_ET2_SPRINT_ACTIVE_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                                                                                                                                              OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              else{
                                                                                                                                                                                                                                                   OUT_S1_ET2_SPRINT_ACTIVE_IN_2=0;
                                                                                                                                                                                                                                                   if(OUT_S1_ET3_SPRINT_FILL_OR_IN_2==1){
                                                                                                                                                                                                                                                                                         OUT_S1_ET2_SPRINT_ACTIVE_IN_2=1;
                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                         if(SPRINT_NOTREADY_TRAN_1==0){
                                                                                                                                                                                                                                                                                                                       OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                   }
     //ETAPA3 LP ON SEQ2: FILL LP SPRINT SYSTEM
     if(OUT_S1_ET2_SPRINT_ACTIVE_IN_2==1&& SPRINT_TRANSOFF==1&& TRUE_SPRINT_PSL_OK==1&& SPRINT_HP_ON_2_TRAN_2==1){
                                                                                                            OUT_S1_ET3_SPRINT_FILL_OR_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                            OUT_S1_ET2_SPRINT_ACTIVE_IN_2=0;
                                                                                                            OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                                                                                            }
                                                                                                            else{
                                                                                                                 OUT_S1_ET3_SPRINT_FILL_OR_IN_2=0;
                                                                                                                 if(SPRINT_TRANSOFF==0||OUT_AND_SPRINT_SPRT_READY_T_COND_2==0||OUT_AND_SPRINT_SPRT_READY_T_COND_3==0||SPRINT_SIM_SPRT==0||SPRINT_SIM_SPRAY==0||OUT_OR_SPRINT_LP_ON_1_SF_SEL_2==0||SPRINT_SPRT_READY_TRAN_5==0){
                                                                                                                                                                                                                                                                                                                               OUT_S1_ET2_SPRINT_ACTIVE_IN_2=0;
                                                                                                                                                                                                                                                                                                                               }                                                                                                                                                                                                                                                                                                                                                                                                
                                                                                                                 }
     //SECUENCIA2
     //ETAPA1 HP OFF SEQ1: LP ACTIVE HP WAIT FOR XFER DONE
     if(OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1==1){
                                             OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=1;
                                             }
                                             else{
                                                  OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=0;
                                                  if(OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3==1){
                                                                                             OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=1;
                                                                                             }
                                                  }
     //ETAPA2 HP OFF SEQ2: LP ACTIVE HOLD TO DRAIN HP
     if(OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2==1&& SPRINT_TRANSOFF==1&& SPRINT_N_LPSPRTEN==1&& SPRINT_H2OXFRDONE==1){
                                                                                                             OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                             OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=0;
                                                                                                             }
                                                                                                             else{
                                                                                                                  OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=0;
                                                                                                                  if(OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4==1){
                                                                                                                                                             OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=1;
                                                                                                                                                             }
                                                                                                                                                             if(OUT_OR_SPRINT_HP_2_LP_1_SF_SEL_1==0){
                                                                                                                                                                                                     OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=0;
                                                                                                                                                                                                     }
                                                                                                                  }
                                                                                                              
     //ETAPA3 HP OFF SEQ3: LP ACTIVE DRAINHP/PURGE
     if(OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3==1&& SPRINT_TRANSOFF==1&& SPRINT_N_LPSPRTEN==1&& SPRINT_DLY_HPHLD==1){
                                                                                                            OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                            OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=0;
                                                                                                            OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=0;
                                                                                                            }
                                                                                                            else{
                                                                                                                 OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4=0;
                                                                                                                 if(SPRINT_TRANSOFF==0||SPRINT_N_LPSPRTEN==0||SPRINT_H2OXFRDONE==0){
                                                                                                                                                                                    OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=0;
                                                                                                                                                                                    }
                                                                                                                                                                                                                              
                                                                                                                 }                                                                                                     
     //SECUENCIA3 UNION DE LAS SECUENCIAS
     //ETAPA FINAL
     if(OUT_S1_ET3_SPRINT_FILL_OR_IN_2==1&& OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4==1&& SPRINT_TRANSOFF==1&& SPRINT_N_LPSPRTEN==1&& SPRINT_FILL_DN==1&& SPRINT_DRAINHP_TM==1){
                                                                                                                                                                 OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                                                                 OUT_S1_ET3_SPRINT_FILL_OR_IN_2=0;
                                                                                                                                                                 OUT_S2_ET3_IFACE_CORE_ZPRTONOR_IN_4=0;
                                                                                                                                                                 OUT_S1_ET2_SPRINT_ACTIVE_IN_2=0;
                                                                                                                                                                 OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                                                                                                                                                 OUT_S2_ET2_IFACE_CORE_ZPRTONOR_IN_3=0;
                                                                                                                                                                 OUT_S2_ET1_IFACE_CORE_ZPRTONOR_IN_2=0;
                                                                                                                                                                 }
                                                                                                                                                                 else{
                                                                                                                                                                      OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1=0;
                                                                                                                                                                      if(SPRINT_TRANSOFF==0||SPRINT_N_LPSPRTEN==0||SPRINT_FILL_DN==0||SPRINT_DRAINHP_TM==0){
                                                                                                                                                                                                                                                            OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1=0;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            
                                                                                                                                                                      }
     //FIN DE PROCESO
     if(OUT_S3_ETF_IFACE_CORE_ZPRTONOR_IN_1==1&& OUT_AND_SPRINT_HP_2_LP_1_T_COND_1==1&& SPRINT_N_LPSPRTEN==1){
                                                                                                          FIN_DE_PROCESO=1;
                                                                                                          }
                                                                                                          else{
                                                                                                               FIN_DE_PROCESO=0;
                                                                                                               }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 285 SPRINT SYSTEM (HP SEQUENCE LOGIC)//

      //AND SPRINT_OFF_MASK
      if(SPRINT_N_LPSPRTEN==1&& FALSE_SPRINT_HP_SPRNTOK==0){
                                                          OUT_AND_SPRINT_TRANS_OFF_IN_4=1;
                                                          }
                                                          else{
                                                               OUT_AND_SPRINT_TRANS_OFF_IN_4=0;
                                                               }
      //OR SPRINT_BACK_TO_HP
      if(SPRINT_LP_OFF_2_TRAN_1==1||SPRINT_LP_OFF_3_TRAN_1==1||SPRINT_LP_OFF_4_TRAN_1==1||SPRINT_LP_OFF_5_TRAN_1==1||SPRINT_HP_OFF_2_TRAN_1==1||SPRINT_OFF_1_TRAN_1==1||SPRINT_OFF_2_TRAN_1==1||SPRINT_OFF_3_TRAN_1==1||SPRINT_OFF_4_TRAN_1==1){
                                                                                                                                                                                                                                                OUT_OR_SPRINT_HP_ON_1_SF_SEL_3=1;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                else{
                                                                                                                                                                                                                                                     OUT_OR_SPRINT_HP_ON_1_SF_SEL_3=0;
                                                                                                                                                                                                                                                     }
      //OR SPRINT STRT_SPRT
      if(SPRINT_LP_ON_3_TRAN_2==1||SPRINT_HP_2_LP_1_TRAN_2==1||SPRINT_HP_2_LP_2_TRAN_2==1||SPRINT_HP_2_LP_3_TRAN_2==1||SPRINT_LP_OFF_1_TRAN_1==1||SPRINT_HP_OFF_1_TRAN_1==1){
                                                                                                                                                                             OUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1=1;
                                                                                                                                                                             }
                                                                                                                                                                             else{
                                                                                                                                                                                  OUT_OR_SPRINT_LP_2_HP_1_SF_SEL_1=0;
                                                                                                                                                                                  }
      //SWITCH SPRINT_EVAC_SW1
      if(SPRINT_JIMMY_SPRT==1){
                               OUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3=SPRINT_EVAC_TMR;
                               }
                               else{
                                    OUT_B_SW_SPRINT_LP_2_HP_3_T_COND_3=TRUE_SPRINT_EVAC_SW1;
                                    }
      //GRAFCET FALTA DE REALIZAR
 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 286 SPRINT SYSTEM (SHUTDOWN LOGIC)//

     //OR SPRINT_SPRYRMPOFF
     if(SPRINT_HP_2_LP_1_TRAN_1==1||SPRINT_HP_2_LP_2_TRAN_1==1||SPRINT_HP_2_LP_3_TRAN_1==1||SPRINT_LP_ON_1_TRAN_1==1||SPRINT_LP_ON_2_TRAN_1==1||SPRINT_LP_ON_3_TRAN_1==1){
                                                                                                                                                                          OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1=1;
                                                                                                                                                                          }
                                                                                                                                                                          else
                                                                                                                                                                              {
                                                                                                                                                                              OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1=0;
                                                                                                                                                                              }
     //OR SPRINT_GAS_OR_LIQ
     if(FUEL_SYS_GAS100==1||CORE_DIGITAL_FUELOFF==1){
                                                     OUT_OR_SPRINT_LP_XFR_WT_T_COND_1=1;
                                                     }
                                                     else{
                                                          OUT_OR_SPRINT_LP_XFR_WT_T_COND_1=0;
                                                          }
     //OR SPRINT_SPRTRMPOFF
     if(SPRINT_LP_2_HP_1_TRAN_1==1||SPRINT_LP_2_HP_2_TRAN_1==1||SPRINT_LP_2_HP_3_TRAN_1==1||SPRINT_LP_2_HP_4_TRAN_1==1||SPRINT_LP_2_HP_5_TRAN_1==1||SPRINT_HP_ON_3_TRAN_1==1){
                                                                                                                                                                              OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1=1;
                                                                                                                                                                              }
                                                                                                                                                                              else{
                                                                                                                                                                                   OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1=0;
                                                                                                                                                                                   }
     //OR SPRNTOFFOR
     if(SPRINT_HP_ON_1_TRAN_1==1||SPRINT_HP_ON_2_TRAN_1==1){
                                                            OUT_OR_SPRINT_OFF_1_SF_SEL_2=1;
                                                            }
                                                            else{
                                                                 OUT_OR_SPRINT_OFF_1_SF_SEL_2=0;
                                                                 }
     //OR TRAN_4_OR
     if(SPRINT_HP_PRG_TMR==1||FALSE_SPRINT_TRAN_4_OR==1){
                                                         OUT_OR_SPRINT_OFF_4_T_COND_3=1;
                                                         }
                                                         else{
                                                              OUT_OR_SPRINT_OFF_4_T_COND_3=0;
                                                              }
     //AND SPRINT_MASK_PURGE
     if(SPRINT_OFF_4_SFC_STEP==1&& FALSE_SPRINT_NOT_RUNNIN==0){
                                                             OUT_AND_SPRINT_JIMMY_SW2_NO=1;
                                                             }
                                                             else{
                                                                  OUT_AND_SPRINT_JIMMY_SW2_NO=0;
                                                                  }
                                                                  //EL BLOQUE TIENE VARIAS SALIDAS
     //OR SPRINT_SPRNT_O_OR
     if(SPRINT_HP_OFF_2_SFC_STEP==1||SPRINT_LP_OFF_3_SFC_STEP==1||SPRINT_LP_OFF_5_SFC_STEP==1||SPRINT_OFF_1_SFC_STEP==1||SPRINT_OFF_2_SFC_STEP==1||SPRINT_OFF_3_SFC_STEP==1||SPRINT_MASK_PURGE==1||SPRINT_NOTREADY_SFC_STEP==1){
                                                                                                                                                                                                                                OUT_OR_SPRINT_SPRINT_OUT_IN=1;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                else{
                                                                                                                                                                                                                                     OUT_OR_SPRINT_SPRINT_OUT_IN=0;
                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                     //LA SALIDA VA A UN BLOQUE BNAME SIN SALIDAS (SYSTEM DE-ACTIVATING NO SPRINT WATER INTO TURBINE)
     //GRAFCET1 //LP OFF DRAIN PATH
     /*
     int SPRINT_SEL_SPRINT;
       int SPRINT_SEL_SPRAY;
       int SPRINT_RAMP_DOWN_P_LIM_1;
       int SPRINT_DLY_LPEHLD;
       int TRUE_EVACUATE_LP_SPRINT_MANIFOLD;
       int SPRINT_DLY_LPPHLD;
       int SPRINT_LP_PRG_TMR;
       
       int SPRINT_DRAINHP_TM;
       
       int SPRINT_EVAC_SW1;
       
       int SPRINT_GAS_OR_LIQ;
       int SPRINT_DN_PRG_TMR;
       int SPRINT_SPRT_READY_TRAN_1;
       int SPRINT_TRANSOFF;
       
       int OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5;
       int OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2;
       int OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2;
       int OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1;
       int OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2;
       int OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2;
       
       int OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12;
       int OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2;
       
       int OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3;
       int OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2;
       int OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3;
       int OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK;
       int OUT_S3_ET5_SPRINT_PURGE_HP_IN_2;
       int OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3;
       */
       
     //SECUENCIA1
     //ETAPA1 HOLD FOR SPRAY RAMP DOWN
     if(OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1==1){
                                            OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                            }
                                            else{
                                                 OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;
                                                 if(OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2==1){
                                                                                        OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=1;
                                                                                        }                                                                                 
                                            }
     //ETAPA2 HOLD PRIOR TO LP EVACUATION
     if(OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_RAMP_DOWN_P_LIM_1==1){
                                                                                                                      OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                      OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;                                                                                                                                                                                                                                              
                                                                                                                      }
                                                                                                                      else{
                                                                                                                           OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                                                           if(OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2==1){
                                                                                                                                                                   OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=1;
                                                                                                                                                                   }
                                                                                                                                                                   if(OUT_OR_SPRINT_LP_OFF_1_SF_SEL_1==0){
                                                                                                                                                                                                          OUT_S1_ET1_SPRINT_ACTIVE_IN_1=0;
                                                                                                                                                                                                          }
                                                                                                                           }
     //ETAPA3 EVACUATE LP SPRINT MANIFOLD
     if(OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_DLY_LPEHLD==1){
                                                                                                          OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                          OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                                          OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;
                                                                                                          }
                                                                                                          else{
                                                                                                               OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=0;
                                                                                                               if(OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1==1){
                                                                                                                                                       OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=1;
                                                                                                                                                       }
                                                                                                               if(SPRINT_SEL_SPRINT==0||SPRINT_SEL_SPRAY==0||SPRINT_RAMP_DOWN_P_LIM_1==0){
                                                                                                                                                                                          OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                                                                                                                          }                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                          }
     //ETAPA4 WAIT FOR FUEL XFER
     if(OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& TRUE_EVACUATE_LP_SPRINT_MANIFOLD==1){
                                                                                                                          OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                          OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=0; 
                                                                                                                          OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                                                          OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;
                                                                                                                          }
                                                                                                                          else{
                                                                                                                               OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=0;
                                                                                                                               if(OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2==1){
                                                                                                                                                                        OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=1;
                                                                                                                                                                        }
                                                                                                                               if(SPRINT_SEL_SPRINT==0||SPRINT_SEL_SPRAY==0||SPRINT_DLY_LPEHLD==0){
                                                                                                                                                                                                   OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=0;
                                                                                                                                                                                                   } 
                                                                                                                          }
     //ETAPA5 HOLD PRIOR TO LP PURGE
     if(OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1==1&& OUT_OR_SPRINT_LP_XFR_WT_T_COND_1==1){
                                                                                 OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                 OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=0; 
                                                                                 OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=0; 
                                                                                 OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                 OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;
                                                                                 }
                                                                                 else{
                                                                                      OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2=0;
                                                                                      if(OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2==1){
                                                                                                                               OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2=1;
                                                                                                                               }
                                                                                                                               if(SPRINT_SEL_SPRINT==0||SPRINT_SEL_SPRAY==0||TRUE_EVACUATE_LP_SPRINT_MANIFOLD==0){
                                                                                                                                                                                                                  OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=0;
                                                                                                                                                                                                                  }
                                                                                      }
     //ETAPA6 PURGE LP SPRINT MANIFOLD
     if(OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_DLY_LPPHLD==1){
                                                                                                            OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                            OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2=0; 
                                                                                                            OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1=0; 
                                                                                                            OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2=0; 
                                                                                                            OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2=0;
                                                                                                            OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5=0;
                                                                                                            }
                                                                                                            else{
                                                                                                                 OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2=0;
                                                                                                                 }
     //GRAFCET2 HP OFF DRAIN PATH//
     //SECUENCIA2
     //ETAPA1 HOLD FOR SPRINT RAMP DOWN
     if(OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1==1){
                                            OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                            }
                                            else{
                                                 OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=0;
                                                 if(OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2==1){
                                                                                          OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=1;
                                                                                          }                                                                                
                                                 }
     //ETAPA2 DRAIN HP SPRINT PATH
     if(OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_RAMP_DOWN_P_LIM_1==1){
                                                                                                                      OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                      OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=0;                                                                                                                                                                                                                                              
                                                                                                                      }
                                                                                                                      else{
                                                                                                                           OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2=0;
                                                                                                                           if(OUT_OR_SPRINT_HP_OFF_1_SF_SEL_1==0){
                                                                                                                                                                  OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12=0;
                                                                                                                                                                  }
                                                                                                                                                                 
                                                                                                                           }
     //GRAFCET3 HP SYSTEM OFF JUMPS HERE//
     /*
     int SPRINT_SEL_SPRINT;
       int SPRINT_SEL_SPRAY;
       int SPRINT_RAMP_DOWN_P_LIM_1;
       int SPRINT_DLY_LPEHLD;
       int TRUE_EVACUATE_LP_SPRINT_MANIFOLD;
       int SPRINT_DLY_LPPHLD;
       int SPRINT_LP_PRG_TMR;
       int SPRINT_LP_OFF_5_TRAN_3;
       
       int SPRINT_DRAINHP_TM;
       
       int SPRINT_HP_OFF_2_TRAN_3;
       int SPRINT_EVAC_SW1;
       
       int SPRINT_GAS_OR_LIQ;
       int SPRINT_DN_PRG_TMR;
       int SPRINT_SPRT_READY_TRAN_1;
       int SPRINT_TRANSOFF;
       
       int OUT_S1_ET1_IFACE_CORE_ZSPRTONOR_IN_5;
       int OUT_S1_ET2_SPRINT_LP_E_HLD_IN_2;
       int OUT_S1_ET3_SPRINT_EV_TM_OR_IN_2;
       int OUT_S1_ET4_SPRINT_OK_TO_XFR_IN_1;
       int OUT_S1_ET5_SPRINT_LP_PRG_HLD_IN_2;
       int OUT_S1_ET6_SPRINT_LP_PRGT_OR_IN_2;
       
       int OUT_S2_ET1_IFACE_CORE_ZSPRTONOR_IN_12;
       int OUT_S2_ET2_SPRINT_DRN_TMR_OR_IN_2;
       
       int OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3;
       int OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2;
       int OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3;
       int OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK;
       int OUT_S3_ET5_SPRINT_PURGE_HP_IN_2;
       int OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3;
       */
     //SECUENCIA3
     //ETAPA1 HOLD FOR SPRAY RAMP DOWN
     if(SPRINT_HP_OFF_2_TRAN_3==1&& OUT_OR_SPRINT_OFF_1_SF_SEL_2==1){
                                                                   OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                   }
                                                                   else{
                                                                        OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                        if(OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2==1){
                                                                                                                OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=1;
                                                                                                                }                                                                                 
                                                                        }
     //ETAPA2 HOLD PRIOR TO LP EVACUATION
     if(OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_EVAC_SW1==1){
                                                                                                        OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                        OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;                                                                                                                                                                                                                                              
                                                                                                        }
                                                                                                        else{
                                                                                                             OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                                                             if(OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3==1){
                                                                                                                                                      OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=1;
                                                                                                                                                      }
                                                                                                                                                      if(SPRINT_HP_OFF_2_TRAN_3==0||OUT_OR_SPRINT_OFF_1_SF_SEL_2==0){
                                                                                                                                                                                                                     OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                                                                                                                                                                     }
                                                                                                             }
     //ETAPA3 EVACUATE LP SPRINT MANIFOLD
     if(OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2==1&& SPRINT_GAS_OR_LIQ==1){
                                                                  OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                  OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                  OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                  }
                                                                  else{
                                                                       OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=0;
                                                                       if(OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK==1){
                                                                                                                   OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=1;
                                                                                                                   }
                                                                                                                   if(SPRINT_SEL_SPRINT==0||SPRINT_SEL_SPRAY==0||SPRINT_EVAC_SW1==0){
                                                                                                                                                                                     OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                                                                                                                                     }                                                                                                                                                                                                                                                                                                                                                                                              
                                                                       }
     //ETAPA4 WAIT FOR FUEL XFER
     if(OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_LP_PRG_TMR==1&& SPRINT_LP_OFF_5_TRAN_3==1){
                                                                                                                                      OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                                      OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=0; 
                                                                                                                                      OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                                                                                      OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                                                                                      }
                                                                                                                                      else{
                                                                                                                                           OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=0;
                                                                                                                                           if(OUT_S3_ET5_SPRINT_PURGE_HP_IN_2==1){
                                                                                                                                                                                  OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=1;
                                                                                                                                                                                  }
                                                                                                                                                                                  if(SPRINT_GAS_OR_LIQ==0){
                                                                                                                                                                                                           OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=0;
                                                                                                                                                                                                           } 
                                                                                                                                           }
     //ETAPA5 HOLD PRIOR TO LP PURGE
     if(OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& SPRINT_DN_PRG_TMR==1){
                                                                                                               OUT_S3_ET5_SPRINT_PURGE_HP_IN_2=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                               OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=0; 
                                                                                                               OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=0; 
                                                                                                               OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                                                               OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                                                               }
                                                                                                               else{
                                                                                                                    OUT_S3_ET5_SPRINT_PURGE_HP_IN_2=0;
                                                                                                                    if(OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3==1){
                                                                                                                                                            OUT_S3_ET5_SPRINT_PURGE_HP_IN_2=1;
                                                                                                                                                            }
                                                                                                                                                            if(SPRINT_SEL_SPRINT==0||SPRINT_SEL_SPRAY==0||SPRINT_LP_PRG_TMR==0||SPRINT_LP_OFF_5_TRAN_3==0){
                                                                                                                                                                                                                                                           OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=0;
                                                                                                                                                                                                                                                           }
                                                                                      }
     //ETAPA6 PURGE LP SPRINT MANIFOLD
     if(OUT_S3_ET5_SPRINT_PURGE_HP_IN_2==1&& SPRINT_SEL_SPRINT==1&& SPRINT_SEL_SPRAY==1&& OUT_OR_SPRINT_OFF_4_T_COND_3==1&& SPRINT_SPRT_READY_TRAN_1==1){
                                                                                                                                                 OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                                                 OUT_S3_ET5_SPRINT_PURGE_HP_IN_2=0; 
                                                                                                                                                 OUT_S3_ET4_SPRINT_DN_PRGT_Z_FEEDBACK=0; 
                                                                                                                                                 OUT_S3_ET3_SPRINT_LP_PRGT_OR_IN_3=0; 
                                                                                                                                                 OUT_S3_ET2_SPRINT_OK_TO_XFR_IN_2=0;
                                                                                                                                                 OUT_S3_ET1_SPRINT_EV_TM_OR_IN_3=0;
                                                                                                                                                 }
                                                                                                                                                 else{
                                                                                                                                                      OUT_S3_ET6_SPRINT_OK_TO_XFR_IN_3=0;
                                                                                                                                                      }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 287 SPRINT SYSTEM (SPRINT FULL SYSTEM TEST)//

     //BLOQUE AND SPRINT_ALLOWTEST
     if(FALSE_SPRINT_TEST_SPRT==1&& SFC_STEP_OUTOFOP==1){
                                                       OUT_SPRINT_ALLOWTEST_AND=1;
                                                       }
                                                       else{
                                                            OUT_SPRINT_ALLOWTEST_AND=0;
                                                            }
     //BLOQUE NOT SPRINT_NOTTEST
     //Llamada de funcion para invertir la entrada OUT_SPRINT_ALLOWTEST_AND
     NOUT_SPRINT_ALLOWTEST_AND=NOT(OUT_SPRINT_ALLOWTEST_AND);
     //Salida del inversor UNA SALIDA "SPRINT.TRANSOFF.IN_2
     //* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     //BLOQUE NOR SPRINT ACT_OR_INI (SPRINT ACTIVE)
     if(SPRINT_SPRT_READY==1||SPRINT_NOTREADY==1||SPRINT_LP_ON_1==1||SPRINT_LP_OFF_1==1||SPRINT_LP_OFF_3==1||SPRINT_LP_OFF_5==1||SPRINT_HP_ON_1==1||SPRINT_HP_OFF_1==1||SPRINT_HP_OFF_2==1||SPRINT_OFF_1==1||SPRINT_OFF_2==1||SPRINT_OFF_3==1||SPRINT_MASK_PURGE==1){
                                                                                                                                                                                                                                                                     OUT_SPRINT_ACT_OR_INI_NOR=0;
                                                                                                                                                                                                                                                                     }
                                                                                                                                                                                                                                                                     else{
                                                                                                                                                                                                                                                                          OUT_SPRINT_ACT_OR_INI_NOR=1;
                                                                                                                                                                                                                                                                          }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCIONES HOJA 288 SPRINT SYSTEM (RAMP AND CONTROL LOGIC)//

     //ZMINUS1_B SPRINT_H20DMD_Z FALTA POR REALIZAR
     
     //OR SPRINT_DEC_OR
     if(HMI_BO_BW_V_125==1||FALSE_SPRINT_DEC_OR==1){
                                                    OUT_OR_SPRINT_LOWER_AND_IN_2=1;
                                                    }
                                                    else{
                                                         OUT_OR_SPRINT_LOWER_AND_IN_2=0;
                                                         }
     //AND SPRINT_LOWER_AND
     if(IFACE_CORE_Z_MANMODE==1&& OUT_OR_SPRINT_LOWER_AND_IN_2==1){
                                                                 OUT_AND_SPRINT_MAN_RAMP_P_SEL_2=1;
                                                                 }
                                                                 else
                                                                     {
                                                                      OUT_AND_SPRINT_MAN_RAMP_P_SEL_2=0;
                                                                      }
     //OR SPRINT_INC_OR
     if(HMI_BO_BW_V_126==1||FALSE_SPRINT_INC_OR==1){
                                                    OUT_OR_SPRINT_RAISE_AND_IN_2=1;
                                                    }
                                                    else{
                                                         OUT_OR_SPRINT_RAISE_AND_IN_2=0;
                                                         }
     //AND SPRINT_RAISE_AND
     if(IFACE_CORE_Z_MANMODE==1&& OUT_OR_SPRINT_RAISE_AND_IN_2==1){
                                                                 OUT_AND_SPRINT_MAN_RAMP_P_SEL_3=1;
                                                                 }
                                                                 else{
                                                                      OUT_AND_SPRINT_MAN_RAMP_P_SEL_3=0;
                                                                      }
     //RAMP SPRINT_MAN_RAMP FALTA REALIZAR ESTE BLOQUE
     
     //AND SPRINT_MASK_SEL
     if(SFC_STEP_OUTOFOP_SFC_STEP==1&& FALSE_SPRINT_MAN_STRK==1){
                                                               OUT_AND_SPRINT_CNTL_SW_CTRL=1;
                                                               }
                                                               else{
                                                                    OUT_AND_SPRINT_CNTL_SW_CTRL=0;
                                                                    }
     //SWITCH CNTL_SW
     if(OUT_AND_SPRINT_CNTL_SW_CTRL==1){
                                        OUT_I_SW_SPRINT_CNTRL_OUT_SEL=1;
                                        }
                                        else{
                                             OUT_I_SW_SPRINT_CNTRL_OUT_SEL=2;
                                             }
     //A_MUX_N_1 SPRINT CNTRL_OUT FALTA POR REALIZAR
     
     //SWITCH MINFLOW_SW (NC=*5.0 (0.0, 10.0) , NO=*2.0 (0.0, 3.0))
     //PARA PRUEBAS SE USARA UN NC=5.0 Y UN NO=2.0 PERO HAY QUE CAMBIARLOS POR LOS DATOS MENCIONADOS EN LA DESCRIPCION
     if(SPRINT_ACT_OR_INI==1){
                              OUT_A_SW_SPRINT_MINFLOW_IN_1=2.0;
                              }
                              else{
                                   OUT_A_SW_SPRINT_MINFLOW_IN_1=5.0;
                                   }
     //LAG_2 SPRINT_FT62231LAG FALTA REALIZAR ESTE BLOQUE
     
     //A_MAX SPRINT_MINFLOW FALTA REALIZAR ESTE BLOQUE
     
     //SWITCH MAXFLOW_SW (NC=20.0 , NO=8.0)
     if(SPRINT_HP_ON_3_SFC_STEP==1){
                                    OUT_A_SW_SPRINT_FLOW_LIM_IN_2=8.0;
                                    }
                                    else{
                                         OUT_A_SW_SPRINT_FLOW_LIM_IN_2=20.0;
                                         }
     //A_MIN SPRINT_FLOW_LIM FALTA REALIZAR ESTE BLOQUE
     
     //SWITCH H2ODMDSW (NC=SPRINT_H2ODMDSW_NC, NO=*4.0 (0.0, 30.0))
     //PARA PRUEBAS SE USARA UN NO=4.0 PERO HAY QUE CAMBIARLO POR EL MENCIONADO EN LA DESCRIPCION
     if(SPRINT_ALLOWTEST==1){
                             OUT_A_SW_SPRINT_SPRINT_PID_DB_SP=4.0;
                             }
                             else{
                                  OUT_A_SW_SPRINT_SPRINT_PID_DB_SP=SPRINT_H2ODMDSW_NC;
                                  }
     //ZMINUS1_B SPRINT_OFF_Z FALTA POR RELAIZAR ESTE BLOQUE
     
     //PID_DB SPRINT_PID_DB FALTA POR REALIZARLO
     
     //CALCULATE SPRINT_FAST_R_DN FALTA POR RELAIZAR ESTE BLOQUE
     
     //CALCULATE SLOW_R_DN FALTA POR RELAIZAR ESTE BLOQUE
     
     //A_MIN SPRINT_MIN_BUS FALTA POR RELAIZAR ESTE BLOQUE
     
     //RAMP SPRINT_RAMP_DOWN FALTA POR RELAIZAR ESTE BLOQUE
     
     //ONE_SHOT SPRINT_DOWN_OS FALTA POR RELAIZAR ESTE BLOQUE

     //OR SPRINT_DOWN_OR
     if(OUT_O_SHOT_SPRINT_DOWN_OR_IN_1==1||SPRINT_NOTREADY_SFC_STEP==1){
                                                                        OUT_OR_SPRINT_SPRT_DOWN_IN=1;
                                                                        }
                                                                        else{
                                                                             OUT_OR_SPRINT_SPRT_DOWN_IN=0;
                                                                             }
                                                                             //LA SALIDA VA A UN BLOQUE BNAME SIN SALIDAS (SPRINT OFF LINK TO FUEL SYSTEM)



 printf(" ");

////////////////////////////////////////////////////////////////////////////////////

//////////////////////////FUEL SYSTEM///////////////////////////////////////////////

  printf(" ");
   
  


//printf("\n         TLO_TLUB_GT100_B_NAME %d",  TLO_TLUB_GT100_B_NAME);

printf("\n    FUEL_READY_TO_START__AND_XFER     %d",  FUEL_READY_TO_START__AND_XFER);
printf("\n     WAIT_FOR_PURGE_TIMER_DONE    %d",   WAIT_FOR_PURGE_TIMER_DONE);
printf("\n    ACCEL_TO_LITE_OFF   %d",   ACCEL_TO_LITE_OFF);
printf("\n    VERIFY_FUEL_VALVE_AT_MIN_POSITIN   %d",   VERIFY_FUEL_VALVE_AT_MIN_POSITIN);
printf("\n   ACTIVATE_IGNITORS  %d",  ACTIVATE_IGNITORS);
printf("\n   OPN_VNT_SOV6208  %d",  OPN_VNT_SOV6208);
printf("\n   WAIT_FOR_LITE_OFF  %d",  WAIT_FOR_LITE_OFF);
printf("\n   DE_ACTIVATE_GAS_FUEL  %d",  DE_ACTIVATE_GAS_FUEL);
  

//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

FUEL_SYS_START_INI=SFC_STEP_START_INIT;  
FUEL_SYS_HOT_START=SFC_STEP_MOTOR_6;
FUEL_SYS_UNITREADY=SHUTDOWN_NO_SHTDNS;                          

if(FUEL_SYS_START_INI==1 || FUEL_SYS_HOT_START==1){
                                FUEL_SYS_START_OR=1;}else{
                                FUEL_SYS_START_OR=0;}

if(FUEL_SYS_START_OR==1 && FUEL_SYS_UNITREADY==1){
       FUEL_SYS_GAS_START=1;                    }else{FUEL_SYS_GAS_START=0;}

if(FUEL_SYS_HOLD_TRAN_1==1 && FUEL_SYS_GASSTRT_06_TRAN_2==1){
                           FUEL_READY_TO_START__AND_XFER=1;
}else{FUEL_READY_TO_START__AND_XFER=0;
}
      
 if(FUEL_READY_TO_START__AND_XFER==1 &&  FUEL_SYS_CHOPFUEL==1 && out_FUEL_SYS_GAS_STRTOS_ONE_SHOT[1]==1 ){
                                      WAIT_FOR_PURGE_TIMER_DONE=1;
                                      FUEL_READY_TO_START__AND_XFER=0;
                                      }else{ WAIT_FOR_PURGE_TIMER_DONE=0;}


if(WAIT_FOR_PURGE_TIMER_DONE==1 && SFC_STEP_HI_SPDSEL2==1 && FUEL_SYS_CHOPFUEL==1 ){
          ACCEL_TO_LITE_OFF=1;                      
           WAIT_FOR_PURGE_TIMER_DONE=0;                     }else{
                                      ACCEL_TO_LITE_OFF=0;
                                      }
                                      //OR 
if(SFC_STEP_HI_SPDSEL2==1 && FUEL_SYS_CHOPFUEL==1){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}




   if(ACCEL_TO_LITE_OFF==1 && FUEL_SYS_CHOPFUEL==1 && TRUE_ACEL_TO_LITE_OFF==1 ){
                            VERIFY_FUEL_VALVE_AT_MIN_POSITIN=1;
                            ACCEL_TO_LITE_OFF=0;
                            
                            }else {
                               VERIFY_FUEL_VALVE_AT_MIN_POSITIN=0;  
                                  }
                                  // OR
                                  if(FUEL_SYS_CHOPFUEL==1 && TRUE_ACEL_TO_LITE_OFF==1){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}


if( VERIFY_FUEL_VALVE_AT_MIN_POSITIN==1 && START_PERM_VMIN_STOP==1 &&  FUEL_SYS_CHOPFUEL==1){
    ACTIVATE_IGNITORS=1;
    VERIFY_FUEL_VALVE_AT_MIN_POSITIN=0;
    }else{ACTIVATE_IGNITORS=0;}


   if( START_PERM_VMIN_STOP==1 &&  FUEL_SYS_CHOPFUEL==1 ){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}




    
    
    if(ACTIVATE_IGNITORS==1 && FUEL_SYS_CHOPFUEL==1 && out_FUEL_SYS_IGNITORDLY_DELAY[1]==1 ){
                            OPN_VNT_SOV6208=1;
                            ACTIVATE_IGNITORS=0;
                            }else{ OPN_VNT_SOV6208=0;}


      if( FUEL_SYS_CHOPFUEL==1 && out_FUEL_SYS_IGNITORDLY_DELAY[1]==1 ){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}



if(FUEL_SYS_ZS6249OPEN==1 && FUEL_SYS_ZS6204OPEN==1){
                FUEL_SYS_BLKS_OPN=1;              
                              }else{
                        FUEL_SYS_BLKS_OPN=0;            
                                    }

if(FUEL_SYS_BLKS_OPN==1 &&  FUEL_SYS_CHOPFUEL==1 && OPN_VNT_SOV6208==1){
                    WAIT_FOR_LITE_OFF=1;
                         OPN_VNT_SOV6208=0;   
                            }else{WAIT_FOR_LITE_OFF=0;}


      if( FUEL_SYS_BLKS_OPN==1 &&  FUEL_SYS_CHOPFUEL==1 ){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}


if(WAIT_FOR_LITE_OFF==1 && CORE_DIGITAL_LITEOFF==1  ){
             FUEL_READY_TO_START__AND_XFER=1;
             WAIT_FOR_LITE_OFF=0;           
                        }
     if( CORE_DIGITAL_LITEOFF==1  &&  FUEL_SYS_CHOPFUEL==1 ){
                     FUEL_SYS_DACTGAS=1;            
                                 }else{FUEL_SYS_DACTGAS=0;}



if(!FUEL_SYS_SOV6249==1){
          FUEL_SYS_GASNOT_ON=1;                      }else{FUEL_SYS_GASNOT_ON=0;}

if(FUEL_SYS_GASNOT_ON==1 && FUEL_SYS_N_CHOPFUEL==1 ){
    FUEL_SYS_G_MASKOFF2=1;                         }else{FUEL_SYS_G_MASKOFF2=0;}

if(FUEL_SYS_DACTGAS==1){
                           
         DE_ACTIVATE_GAS_FUEL=1;                  }else{DE_ACTIVATE_GAS_FUEL=0;}









   printf(" ");

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////TURBINE OIL//////////////////////////////////////////

   printf(" ");

//Llamada de funcion para el timer TLO_SD1_A_DLY de tipo TOND
TLO_SD1_A_DLY=TLO_PLBLT15ENA_AND;
TOND(TLO_SD1_A_DLY,TP_TLO_SD1_A_DLY,Time_factor,out_TLO_SD1_A_DLY);
//Llamada de funcion para el timer TLO_SD2_A_DLY de tipo TOND
TLO_SD2_A_DLY=TLO_PLUBLT6ENA_AND;
   TOND(TLO_SD2_A_DLY,TP_TLO_SD2_A_DLY,Time_factor,out_TLO_SD2_A_DLY);
//Llamada de funcion para el timer TLO_SD1_B_DLY de tipo TOND
TLO_SD1_B_DLY=TLO_PLBLT15ENB_AND;
   TOND(TLO_SD1_B_DLY,TP_TLO_SD1_B_DLY,Time_factor,out_TLO_SD1_B_DLY);
//Llamada de funcion para el timer TLO_SD2_B_DLY de tipo TOND
TLO_SD2_B_DLY=TLO_PLUBLT6ENB_AND;
   TOND(TLO_SD2_B_DLY,TP_TLO_SD2_B_DLY,Time_factor,out_TLO_SD2_B_DLY);
//Llamada de funcion para el timer TLO_XN25DLY de tipo TOND
TLO_XN25DLY=SPEED_SW_N25GT6050_A_COMPARE;
   TOND(TLO_XN25DLY,TP_TLO_XN25DLY,Time_factor,out_TLO_XN25DLY);
//HOJA 247
TLO_PDSH6146D_DELAY=TLO_PDSH6146NT_NOT;
   TOND(TLO_PDSH6146D_DELAY,TP_TLO_PDSH6146D_DELAY,Time_factor,out_TLO_PDSH6146D_DELAY);
   //printf("\nout_TLO_PDSH6146D_DELAY %d",out_TLO_PDSH6146D_DELAY[1]);
//Llamada de funcion para el timer TLO_PDSH6148D_DELAY de tipo TOND
TLO_PDSH6148D_DELAY=TLO_PDSH6148NT_NOT;
   TOND(TLO_PDSH6148D_DELAY,TP_TLO_PDSH6148D_DELAY,Time_factor,out_TLO_PDSH6148D_DELAY);
   //printf("\n out_TLO_PDSH6148D_DELAY %d",out_TLO_PDSH6148D_DELAY[1]);
//Llamada de funcion para el timer TLO_PDSH6120D_DELAY de tipo TOND
TLO_PDSH6120D_DELAY= TLO_PDSH6120NT_NOT;
   TOND(TLO_PDSH6120D_DELAY,TP_TLO_PDSH6120D_DELAY,Time_factor,out_TLO_PDSH6120D_DELAY);
   //printf("\nout_TLO_PDSH6120D_DELAY %d",out_TLO_PDSH6120D_DELAY[1]);
//Llamada de funcion para el timer TLO_PDSHH6144D_DELAY de tipo TOND
TLO_PDSHH6144D_DELAY=TLO_PDSHH6144N_NOT;
   TOND(TLO_PDSHH6144D_DELAY,TP_TLO_PDSHH6144D_DELAY,Time_factor,out_TLO_PDSHH6144D_DELAY);
   //printf("\nout_TLO_PDSHH6144D_DELAY %d",out_TLO_PDSHH6144D_DELAY[1]);
//Llamada de funcion para el timer TLO_PDSH6118D_DELAY de tipo TOND
TLO_PDSH6118D_DELAY=TLO_PDSH6118NT_NOT;
   TOND(TLO_PDSH6118D_DELAY,TP_TLO_PDSH6118D_DELAY,Time_factor,out_TLO_PDSH6118D_DELAY);
   //printf("\nout_TLO_PDSH6118D_DELAY %d",out_TLO_PDSH6118D_DELAY[1]);
//Llamada de funcion para el timer TLO_PDSHH6119D_DELAY de tipo TOND
TLO_PDSHH6119D_DELAY=TLO_PDSHH6119N_NOT;
   TOND(TLO_PDSHH6119D_DELAY,TP_TLO_PDSHH6119D_DELAY,Time_factor,out_TLO_PDSHH6119D_DELAY);
   //printf("\nout_TLO_PDSHH6119D_DELAY %d",out_TLO_PDSHH6119D_DELAY[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

        
        
   printf(" ");

//Funcion para imprimir
// SEÑALES DE SALIDA DEL PRESION DE ACEITE LUBRICANTE  
//******************************************************************************
   // TRANSMISOR DE PRESION PT-6121A
//LUBE LO LO PRESS (XN25>7.8K RPM)
printf("\n TLO_PT6121ASD1_B_NAME %d", TLO_PT6121ASD1_B_NAME);
//LUBE LO LO PRESS (4.5<XN25>7.8K RPM)
printf("\n TLO_PT6121ASD2_B_NAME %d", TLO_PT6121ASD2_B_NAME);
   // TRANSMISOR DE PRESION PT-6121B
//LUBE LO LO PRESS (XN25>7.8K RPM) DESACELERACION LENTA
printf("\n TLO_PT6121BSD1_B_NAME %d", TLO_PT6121BSD1_B_NAME);                                                                               
//LUBE LO LO PRESS (4.5<XN25>7.8K RPM) DISPARO RAPIDO SIN MOTORIZACION
printf("\n TLO_PT6121BSD2_B_NAME %d", TLO_PT6121BSD2_B_NAME);   
//******************************************************************************  
  
//IMPRESION DEL TRANSMISOT PT-6121 SELECCION, FALLA Y DIFERENCIA
printf("\n PLUBSEL %d", PLUBSEL);
printf("\n PLUB_AB_SENSORS_HI_DIFFERENCE %d", PLUB_AB_SENSORS_HI_DIFFERENCE);
printf("\n PLUB_AB_SENSORS_FAILED %d", PLUB_AB_SENSORS_FAILED);
printf("\n TURB_LUBE_OIL_BOTH_SNSR_FLT %d", TURB_LUBE_OIL_BOTH_SNSR_FLT);

  // ALARMAS_DISPAROS POR PRESION Y TEMPERATURA DEL NIVEL DE ACIETE LUB TANQUE90  HOJA 246

printf("\n      TLO_TLUB_GT90_NOR; %d",  TLO_TLUB_GT90_NOR); 
printf("\n      TLO_TLUBLOAL2_B_NAME %d", TLO_TLUBLOAL2_B_NAME);
printf("\n      TLO_TLUBLOAL1_B_NAME %d", TLO_TLUBLOAL1_B_NAME); 
printf("\n      TLO_USE_SYNC_NOT %d", TLO_USE_SYNC_NOT);
printf("\n      TTLO_PSH6117ALM_B_NAME %d", TLO_PSH6117ALM_B_NAME);
printf("\n      TLO_PSCVALM_SW_A_SW %d", TLO_PSCV_SW_A_SW);
 
 // PARTE DE A_SW
printf("\n      TLO_PSCVALM_SW_A_SW %d", TLO_PSCVALM_SW_A_SW);
printf("\n      TLO_PSCV_SW1_A_SW %d", TLO_PSCV_SW1_A_SW);
printf("\n      TLO_PSCVMASK_AND %d", TLO_PSCVMASK_AND);


  // ALARMAS_DISPAROS POR SWITCH DE PRESION HOJA 247
  
   printf("\n         TLO_TSL6113ALM_B_NAME; %d",  TLO_TSL6113ALM_B_NAME); 
   printf("\n         TLO_MOT6135_B_NAME; %d",  TLO_MOT6135_B_NAME);
   printf("\n         TLO_PDSH6146AL_B_NAME %d", TLO_PDSH6146AL_B_NAME);
   printf("\n         TLO_PDSH6148AL_B_NAME %d", TLO_PDSH6148AL_B_NAME);
   printf("\n         TLO_LSL6102ALM_B_NAME %d", TLO_LSL6102ALM_B_NAME);
   printf("\n         TLO_HE6104_B_NAME %d", TLO_HE6104_B_NAME);
   printf("\n         TLO_PDSH6120AL_B_NAME %d", TLO_PDSH6120AL_B_NAME); 
   printf("\n         TLO_PDSHH6144S_B_NAME %d", TLO_PDSHH6144S_B_NAME);
   printf("\n         TLO_PDSH6118AL_B_NAME %d", TLO_PDSH6118AL_B_NAME);
   printf("\n         TLO_PDSHH6119S_B_NAME %d", TLO_PDSHH6119S_B_NAME);
   printf("\n         TLO_TLUB_GT100_B_NAME %d",  TLO_TLUB_GT100_B_NAME);
   printf("\n		  out_TLO_XN25DLY %d",out_TLO_XN25DLY[1]);
  
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

N1N1_AI_PT6121A_AI_420_L;

if(N1N1_AI_PT6121A_AI_420_L==1){
               TLO_PT6121A_A_NAME=10; }else{TLO_PT6121A_A_NAME=0;}


if(TLO_PT6121A_A_NAME<=15 && TLO_PT6121A_A_NAME>=0){ TLO_PLUBLT15A_A_COMPARE=1;}else{TLO_PLUBLT15A_A_COMPARE=0;}

CORE_ANALOG_N25SEL=50;
if(CORE_ANALOG_N25SEL<=78 && CORE_ANALOG_N25SEL>=0){ TLO_N25LT7800_A_COMPARE=1;}else{TLO_N25LT7800_A_COMPARE=0;}

if(CORE_ANALOG_N25SEL<=45 && CORE_ANALOG_N25SEL>=0 ){TLO_N25GT4500_A_COMPARE=1;}else{TLO_N25GT4500_A_COMPARE=0;}

if(TLO_PT6121A_A_NAME<=6 && TLO_PT6121A_A_NAME>=0){  TLO_PLUBLT6A_A_COMPARE=1;}else{ TLO_PLUBLT6A_A_COMPARE=0;}


if(!N1N1_AI_PT6121A_LATCH_OR==1){TLO_PT6121AOK_NOT=1; }  else{TLO_PT6121AOK_NOT=0;}

if(!IFACE_CNFG_LUBPRS_OPT_B_NAME==1){TLO_USE_2NDRNG_NOT=1;}else{TLO_USE_2NDRNG_NOT=0;}


if(!TLO_N25LT7800_A_COMPARE==1){TLO_N25GT7800_NOT=1;}else{TLO_N25GT7800_NOT=0;}
 





// COMIENZA `PARTE B

N1N1_AI_PT6121B_AI_420_L;


if(N1N1_AI_PT6121B_AI_420_L==1){
               TLO_PT6121B_A_NAME=5; }else{TLO_PT6121B_A_NAME=0;}



if(TLO_PT6121B_A_NAME<=15 && TLO_PT6121A_A_NAME>=0){  TLO_PLUBLT15B_A_COMPARE=1;}else{ TLO_PLUBLT15B_A_COMPARE=0;}

if(TLO_PT6121B_A_NAME<=6 && TLO_PT6121A_A_NAME>=0){  TLO_PLUBLT6B_A_COMPARE=1;}else{  TLO_PLUBLT6B_A_COMPARE=0;}

if(N1N1_AI_PT6121B_LATCH_OR==1){TLO_PT6121BOK_NOT=1;}else{TLO_PT6121BOK_NOT=0;}


//SECCION AND
if(TLO_PLUBLT15A_A_COMPARE==1 && TLO_PT6121AOK_NOT==1 && TLO_N25GT7800_NOT==1 && TLO_USE_2NDRNG_NOT==1){
                     TLO_PLBLT15ENA_AND=1;         
                              }else {TLO_PLBLT15ENA_AND=0;}



if(TLO_N25LT7800_A_COMPARE==1 && TLO_N25GT4500_A_COMPARE==1 && TLO_PLUBLT6A_A_COMPARE==1 && TLO_USE_2NDRNG_NOT==1){
                    TLO_PLUBLT6ENA_AND=1;          }else{TLO_PLUBLT6ENA_AND=0;  }


if(TLO_N25GT7800_NOT==1 && TLO_USE_2NDRNG_NOT==1 && TLO_PLUBLT15B_A_COMPARE==1 && TLO_PT6121AOK_NOT==1){
              TLO_PLBLT15ENB_AND=1;  }else {TLO_PLBLT15ENB_AND=0;}

if(TLO_N25GT4500_A_COMPARE==1 && TLO_N25GT4500_A_COMPARE==1 && TLO_PLUBLT6B_A_COMPARE==1 && TLO_USE_2NDRNG_NOT==1 && TLO_USE_2NDRNG_NOT==1 && TLO_PT6121BOK_NOT==1){
             TLO_PLUBLT6ENB_AND=1;    }else {TLO_PLUBLT6ENB_AND=0;}

out_TLO_SD1_A_DLY[5]=TLO_PT6121ASD1_B_NAME;
out_TLO_SD2_A_DLY[5]=TLO_PT6121ASD2_B_NAME;
out_TLO_SD1_B_DLY[5]=TLO_PT6121BSD1_B_NAME;
out_TLO_SD2_B_DLY[5]=TLO_PT6121BSD2_B_NAME;

//Opciones  para el MONITOREO DE LA PRESION DE ACEITE (Por SELECCION, ALTA PRESION, FALLA DE SENSORES)
 


if(N1N1_AI_PT6121A_AI_420_L==68 || N1N1_AI_PT6121B_AI_420_L==68)PLUBSEL=1;else PLUBSEL=0;
if(N1N1_AI_PT6121A_AI_420_L==15 && N1N1_AI_PT6121B_AI_420_L==1)PLUB_AB_SENSORS_HI_DIFFERENCE=1;else PLUB_AB_SENSORS_HI_DIFFERENCE=0;
if(N1N1_AI_PT6121A_AI_420_L==0  || N1N1_AI_PT6121B_AI_420_L==0)PLUB_AB_SENSORS_FAILED=1;else PLUB_AB_SENSORS_FAILED=0;
if(N1N1_AI_PT6121A_AI_420_L==0  && N1N1_AI_PT6121B_AI_420_L==0)TURB_LUBE_OIL_BOTH_SNSR_FLT=1;else TURB_LUBE_OIL_BOTH_SNSR_FLT=0;

//HOJA 246

N1N6_RTD_TE6128A_AI_RTD_L==TLO_TE6128A_A_NAME;
TLO_TE6128A_A_NAME=30;


if(TLO_TE6128A_A_NAME<=90 && TLO_TE6128A_A_NAME>=0){
                  TLO_TLUBLT90A_A_COMPARE=1;        }else{TLO_TLUBLT90A_A_COMPARE=0;}


if(!N1N6_RTD_TE6128A_LATCH_OR==1){
                TLO_TE6128A_OK_NOT=1;    }else{TLO_TE6128A_OK_NOT=0;}


if(TLO_TLUBLT90A_A_COMPARE==1 && TLO_TE6128A_OK_NOT==1){
      TLO_TE6218AMSK_AND=1;        }else{TLO_TE6218AMSK_AND=0;}


N1N6_RTD_TE6128B_AI_RTD_L=TLO_TE6128B_A_NAME;
TLO_TE6128B_A_NAME=45;

if(TLO_TE6128B_A_NAME==45){
TLO_TLUBLT90B_A_COMPARE=1;}else{TLO_TLUBLT90B_A_COMPARE=0;}

if(!N1N6_RTD_TE6128B_LATCH_OR==1){TLO_TE6128A_OK_NOT=1;}else{TLO_TE6128A_OK_NOT=0;}

if(TLO_TE6128A_OK_NOT==1 && TLO_TLUBLT90B_A_COMPARE==1){
                       TLO_TE6218BMSK_AND=1;  }else{TLO_TE6218BMSK_AND=0;}

if(!TLO_TE6218BMSK_AND==1 && !TLO_TE6218AMSK_AND==1){TLO_TLUB_GT90_NOR=1;}else{TLO_TLUB_GT90_NOR=0;}

if( TRUE_USE_CORE==1){TLO_USE_CORE_B_NAME=1;}else{TLO_USE_CORE_B_NAME=0;}

if(TLO_TE6218AMSK_AND==1 && out_TLO_XN25DLY[5]==1 && TLO_USE_CORE_B_NAME==1 ){TLO_TLUB_AND2_AND=1;}else{TLO_TLUB_AND2_AND=0;}

if(TLO_TLUB_AND2_AND==1){TLO_TLUBLOAL2_B_NAME=1;}else{TLO_TLUBLOAL2_B_NAME=0;}//Salida de ALARMA POR BAJA PRESION TANQUE 90.

if(TLO_TE6218BMSK_AND==1 && out_TLO_XN25DLY[1]==1 && TLO_USE_CORE_B_NAME==1){TLO_TLUB_AND1_AND=1;}else{TLO_TLUB_AND1_AND=0;}

if( !TLO_USE_CORE_B_NAME==1){TLO_USE_SYNC_NOT=1;
    }else {TLO_USE_SYNC_NOT=0;}



if(N1N31_BI_PSH6117_BI_L==1){PSH6117_B_NAME=1;}else{PSH6117_B_NAME=0;}
if(!PSH6117_B_NAME==1){TLO_PSH6117NT_NOT=1;}else{ TLO_PSH6117NT_NOT=0;}

FALSE_TLO_PSCVALMOVR=10;
// FALSE
if(TLO_USE_PSCV_B_NAME==1){
                    TLO_PSCVALMOVR_B_SW=TLO_PSH6117NT_NOT;}else if(TLO_USE_PSCV_B_NAME==0){TLO_PSCVALMOVR_B_SW=FALSE_TLO_PSCVALMOVR;}


TLO_PSH6117ALM_B_NAME= TLO_PSCVALMOVR_B_SW;


if(TLO_PSH6117NT_NOT==1 && TLO_USE_PSCV_B_NAME==1){
            TLO_PSCVMASK_AND=1;            
                        }else{TLO_PSCVMASK_AND=0;}

if(TLO_PSCVMASK_AND==1){
          TLO_PSCVALM_SW_A_SW=800;             
                        }else if(TLO_PSCVMASK_AND==0){TLO_PSCVALM_SW_A_SW=100; }


N1N1_AI_PT6122_AI_420_L=25;
if( TLO_USE_PSCV_B_NAME==1){TLO_PSCV_SW1_A_SW=20;}else if(TLO_USE_PSCV_B_NAME==0){TLO_PSCV_SW1_A_SW=N1N1_AI_PT6122_AI_420_L;}
// ULTIMO
if( TLO_USE_PSCVSW_B_NAME==1){
    TLO_PSCV_SW_A_SW=TLO_PSCV_SW1_A_SW;
    }else if(TLO_USE_PSCVSW_B_NAME==0){ TLO_PSCV_SW_A_SW=TLO_PSCVALM_SW_A_SW;
              }
// HOJA 247

if(N1N34_BI_TSL6113_BI_L==1){
         TLO_TSL6113_B_NAME=1;                     
                              }else{TLO_TSL6113_B_NAME=0;}
if(!TLO_TSL6113_B_NAME==1){
  TLO_TSL6113NT_NOT=1;                          
}else{
       TLO_TSL6113NT_NOT=0;}

if(TLO_TSL6113NT_NOT==1){
    TLO_TSL6113ALM_B_NAME=1;}else{
                               TLO_TSL6113ALM_B_NAME=0;}


CORE_ANALOG_N25SEL=600;
if(CORE_ANALOG_N25SEL<=4500 && CORE_ANALOG_N25SEL>=0){TLO_N25GT4600_A_COMPARE=1;}else{
                            TLO_N25GT4600_A_COMPARE=0;}
                            
TLO_MOT6135_B_NAME=TLO_N25GT4600_A_COMPARE;


TLO_PDSH6146_B_NAME=N1N31_BI_PDSH6146_BI_L;

if(!TLO_PDSH6146_B_NAME==1){TLO_PDSH6146NT_NOT=1;}else{TLO_PDSH6146NT_NOT=0;}


TLO_PDSH6146AL_B_NAME=out_TLO_PDSH6146D_DELAY[1];



TLO_PDSH6148B_NAME=N1N31_BI_PDSH6148_BI_L;

if(!TLO_PDSH6148B_NAME==1){TLO_PDSH6148NT_NOT=1;}else{TLO_PDSH6148NT_NOT=0;}


TLO_PDSH6148AL_B_NAME=out_TLO_PDSH6148D_DELAY[1];


TLO_LSL6102_B_NAME=N1N34_BI_LSL6102_BI_L;

if(!TLO_LSL6102_B_NAME==1){
        TLO_LSL6102NT_NOT=1; }else{TLO_LSL6102NT_NOT=0;}

TLO_LSL6102ALM_B_NAME=TLO_LSL6102NT_NOT;
TLO_HE6104_B_NAME=TLO_LSL6102_B_NAME;


TLO_PDSH6120_B_NAME=N1N34_BI_PDSH6120_BI_L;

if(!TLO_PDSH6120_B_NAME==1){
                        TLO_PDSH6120NT_NOT=1;   }else{
                                                TLO_PDSH6120NT_NOT=0;}
 TLO_PDSH6120AL_B_NAME=out_TLO_PDSH6120D_DELAY[1];

TLO_PDSHH6144_B_NAME=N1N34_BI_PDSHH6144_BI_L;
TRUE1_PDSHH_6144=10;
if(TRUE_PDSHH_6144=1){
                       TLO_PDSHH_6144_B_SW=1;
         } else if(TRUE_PDSHH_6144=0){
         
}
if(TLO_PDSHH_6144_B_SW=1){
 TLO_PDSHH6144N_NOT=1;}else {
                         TLO_PDSHH6144N_NOT==0; }
                         TLO_PDSHH6144S_B_NAME=out_TLO_PDSHH6144D_DELAY[1];
 
TLO_PDSH6118_B_NAME=N1N34_BI_PDSH6118_BI_L;

if(TLO_PDSH6118_B_NAME=1){
         TLO_PDSH6118NT_NOT=1;                  
                           }else{
                                TLO_PDSH6118NT_NOT=0; 
                                 }

 TLO_PDSH6118AL_B_NAME=out_TLO_PDSH6118D_DELAY[1];


N1N34_BI_PDSHH6119_BI_L=1;

TLO_PDSHH6119_B_NAME=N1N34_BI_PDSHH6119_BI_L;
TRUE1_PDSHH_6119=0;
if(TRUE_PDSHH_6119==1){
   TLO_PDSHH_6119_B_SW=TLO_PDSHH6119_B_NAME ;    }else if(TRUE_PDSHH_6119==0){
                    TLO_PDSHH_6119_B_SW=TRUE1_PDSHH_6119;                           
                                                }

if(!TLO_PDSHH_6119_B_SW==1){ TLO_PDSHH6119N_NOT=1;}else{ TLO_PDSHH6119N_NOT=0;}
TLO_PDSHH6119S_B_NAME=out_TLO_PDSHH6119D_DELAY[1];




 CORE_ANALOG_TLUBSEL=56;
TLO_TLUBSEL_A_NAME= CORE_ANALOG_TLUBSEL;



if(TLO_TLUBSEL_A_NAME<=100 && TLO_TLUBSEL_A_NAME>=-5){
               TLO_TLUBGT100_A_COMPARE=1;            
                           }else{TLO_TLUBGT100_A_COMPARE=0;}
                           
     TLO_TLUB_GT100_B_NAME=TLO_TLUBGT100_A_COMPARE;         





   printf(" ");

////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////PERMISIVOS////////////////////////////////////////////

    printf(" ");
     printf("\nout_FASTSTRTL %d",out_FASTSTRTL[1]);
	//VARIABLES DE SALIDA SHEET 203
//STATOR TEMP GT68(STATOR_PRM)
if(VENT_TE6421LALM==0||VENT_TE6421LALM==0||VENT_TE6421LALM==0||VENT_TE6421LALM==0||VENT_TE6421LALM==0||VENT_TE6421LALM==0)
{
   START_PERM_STATOR_OK=1;
   START_PERM_STATOR_PRM=START_PERM_STATOR_OK;
}
else{
     START_PERM_STATOR_OK=0;
     START_PERM_STATOR_PRM=START_PERM_STATOR_OK;
     }
if(TLO_TSL6113==1)
{
START_PERM_TLUB_OK=1;
}else{
	START_PERM_TLUB_OK=0;
}
if(GLUB_LT6045_OK==0)
{
	START_PERM_GLUBTNKLVL=1;
}else{
	START_PERM_GLUBTNKLVL=0;
}
if(GLUB_TNKSTRTPRM==1)
{
	START_PERM_GLUBTNKTMP=1;
}else{
	START_PERM_GLUBTNKTMP=0;
}
if(GLUB_PSH6089ALM==0)
{
	START_PERM_PSH6089_OK=1;
}else{
	START_PERM_PSH6089_OK=0;
}
//ALL FANS OK TO START(FANS_OK)
if(FIN_FAN_FANS_OK==1&&VENT_STOPFANS==0)
{
  START_PERM_FANS_MSK=1;
  START_PERM_FANS_OK=START_PERM_FANS_MSK;
}
else{
     START_PERM_FANS_MSK=0;
     START_PERM_FANS_OK=START_PERM_FANS_MSK;
     }
//REMOTE FAST START SELECTED(FASTSTART)
if(N3N40_BI_LOC_REM==1&&FALSE_FAST_START==1)
{
 OUT_FAST_START=1;
}
else{
     OUT_FAST_START=0;
     }
if(FALSE_FST_ST_OR==1||OUT_FAST_START==1)
{
 OUT_FST_ST_OR=1;
}
else{
     OUT_FST_ST_OR=0;
     }
if(OUT_FST_ST_OR==1&&SPEED_SW_N25LT1000==1)
{
 OUT_FASTSTRENB=1;
}
else{
     OUT_FASTSTRENB=0;
     }
if(XNSD_REF_NPTSTPT_MOVING==1&&IFACE_CORE_Z_SWGRID==1)
{
 OUT_MVGDNRST=1;
}
else{
     OUT_MVGDNRST=0;
     }
if(XNSD_REF_NPTMAXPOS==1||OUT_MVGDNRST==1||SHUTDOWN_ANY_SD==1)
{
  OUT_FASTSTRDIS=1;
}
else{
     OUT_FASTSTRDIS=0;
     }

FASTSTRTL[1]=OUT_FASTSTRENB;
FASTSTRTL[2]=OUT_FASTSTRDIS;
   SR(FASTSTRTL,out_FASTSTRTL);
   START_PERM_FASTSTART=out_FASTSTRTL[1];
if(N3N40_BI_VIB_SYSMAL==1)
{
	START_PERM_VIB_SYS_OK=1;
}else{
	START_PERM_VIB_SYS_OK=0;
}
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//VARIABLES DE SALIDA SHEET 204
if(A1_A06_AIO_BE6822==0||A1_A06_AIO_BE6823==0)
{
 START_PERM_FLMDTHLTHY=1;
 START_PERM_FLMDT_OK=START_PERM_FLMDTHLTHY;
}
else{
     START_PERM_FLMDTHLTHY=0;
     START_PERM_FLMDT_OK=START_PERM_FLMDTHLTHY;
     }
if(A2_A12_GR1_FLT==0||A2_A12_GR2_FLT==0||A2_A12_GR3_FLT==0)
{
 OUT_GH_HDWR_OK=1;
}
else{
     OUT_GH_HDWR_OK=0;
     }
if(FALSE_B_SW_REV==1)
{
 START_PERM_LH_OK=TRUE_B_SW_REV;
}
else{
     START_PERM_LH_OK=OUT_GH_HDWR_OK; 
     }                   
if(TIMERS_TEST_TRUE==1)
{
 OUT_PI_PERMSW1=FALSE_PI_PERMSW1;
 OUT_PI_PERMSW2=FALSE_PI_PERMSW2;
}
else{
     OUT_PI_PERMSW1=A2_A04_PI_FLT;
     OUT_PI_PERMSW2=A2_A05_PI_FLT;
     }
if(A1_A04_MPU_FLT==0||
   A1_A06_AIO_FLT==0||
   A1_A07_AIO_FLT==0||
   A1_A08_D0_FLT==0||
   A1_A09_ACT_FLT==0||
   A1_A10_ACT_FLT==0||
   A1_A12_BI1_FLT==0||
   A1_A12_BI2_FLT==0||
   A1_A12_BI3_FLT==0||
   A1_A12_BO1_FLT==0||
   A1_A12_BO2_FLT==0||
   A2_A03_ACT_FLT==0||
   OUT_PI_PERMSW1==0||
   OUT_PI_PERMSW2==0||
   A2_A06_DVR_FLT==0||
   A2_A12_GR1_FLT==0)
   {
    START_PERM_M_HDWR_OK=1;//MICRONET HARDWARE OK(SHEET 208,175,177,33)
    START_PERM_MNET_OK=START_PERM_M_HDWR_OK;
   }
   else{
        START_PERM_M_HDWR_OK=0;
        START_PERM_MNET_OK=START_PERM_M_HDWR_OK;
        }       
if(SFC_STEP_RUNNING==0||
   GLUB_HICNKACTIV==0||
   SFC_STEP_LOSPD_OR==0||
   GLUB_WW_ACTIVE==0)       
   {
    OUT_OFFRUN_EN=1;
   }
   else{
        OUT_OFFRUN_EN=0;
        }
if(OUT_OFFRUN_EN==1&&OP_INTRFC_OFF_RUN==1)
{
 OUT_OFFRUNMASK=1;
}
else{
     OUT_OFFRUNMASK=0;
     }
//*********************************************
if(HYD_STRT_LSLL1601==1)
{
	START_PERM_HYDTNKLVL=1;
}else{
	START_PERM_HYDTNKLVL=1;
}
if(N3N40_BI_CUST_PERM==1)
{
	START_PERM_CUSTPRM=1;
}else{
	START_PERM_CUSTPRM=0;
}
if(START_PERM_OFF_RUN==0||B==1){
         E=1;
         }else{E=0;}
if(((OUT_OFFRUNMASK==1&&FALSE_OFFRUN_FF==0)||(FALSE_OFFRUN_FF==1&& OUT_OFFRUNMASK==0))&& E==1&& C==0){
                   B=1;}
                   else{B=0;}
if(B==1||START_PERM_OFF_RUN==1){
               F=1;
               }
               else{F=0;}
if(C==1||START_PERM_OFF_RUN==1){
         G=1;
         }else{G=0;}
if(((OUT_OFFRUNMASK==1&& FALSE_OFFRUN_FF==0)||(FALSE_OFFRUN_FF==1&& OUT_OFFRUNMASK==0))&& G==1&& B==0){
                   C=1;}
                   else{C=0;}
if(F==1&& C==0){
               START_PERM_OFF_RUN=1;
               }
               else{START_PERM_OFF_RUN=0;}
//*********************************************                      
if(TRUE_N_TMPOFF2==1&&HYD_STRT_TSL1603==1)
{
 START_PERM_N_TMPOFF2=1;
 START_PERM_HYTEMP_L=START_PERM_N_TMPOFF2;
}
else{
     START_PERM_N_TMPOFF2=0;
     START_PERM_HYTEMP_L=START_PERM_N_TMPOFF2;
     }
if(WTR_WASH_WW_ACTIVE==0)
{
	START_PERM_WW_OFF=1;
}else{
	START_PERM_WW_OFF=0;
}
if(ENGMODE_CRANKING==0)
{
	START_PERM_CRANK_OFF=1;
}else{
	START_PERM_CRANK_OFF=0;
}
if(TEMP_SW_T48LT200==0)
{
	START_PERM_T48LT200=1;
}else{
	START_PERM_T48LT200=0;
}
if(TEMP_SW_T3LT200==0)
{
	START_PERM_T3LT200=1;
}else{
	START_PERM_T3LT200=0;
}
//VARIABLES SALIDA SHEET 205
if(START_PERM_HYDTNKLVL==1&& START_PERM_HYTEMP_L==1)
{
 START_PERM_HYD_ST_OK=1;
}
else{
     START_PERM_HYD_ST_OK=0;
     }
if(400.0>CORE_ANALOG_T48SEL)
{
 START_PERM_T48_LT400=1;
}
else{
     START_PERM_T48_LT400=0;
     }
if(TRUE_START_PERM_G_STATUSOK==1)
{
	START_PERM_G_STATUSOK=1;
}else{
	START_PERM_G_STATUSOK=0;
}
if(TRUE_START_PERM_SFTY_ST_OK==1)
{
	START_PERM_SFTY_ST_OK=1;
}else{
	START_PERM_SFTY_ST_OK=0;
}
if(FUEL_SYS_FUEL_RDY==1)
{
	START_PERM_FUELSYSOK=1;
}else{
	START_PERM_FUELSYSOK=0;
}
if(CORE_DIGITAL_CALMODE==0)
{
	START_PERM_CAL_MODE=1;
}else{
	START_PERM_CAL_MODE=0;
}
if(A_B_FORCE_FRC_ST_PRM==1)
{
	START_PERM_FORCE_MODE=1;
}else{
	START_PERM_FORCE_MODE=0;
}
if(SPEED_SW_N25LT300==0)
{
	START_PERM_N25LT300=1;
}else{
	START_PERM_N25LT300=0;
}
if(SHUTDOWN_NO_SHTDNS==1)
{
	START_PERM_NO_SHTDNS=1;
}else{
	START_PERM_NO_SHTDNS=0;
}
if(TLO_LSL6102==1)
{
	START_PERM_TLO_TNKLVL=1;
}else{
	START_PERM_TLO_TNKLVL=0;
}
if(WTR_WASH_WW_NTACTIV==0)
{
	START_PERM_WWNOTACTIV=1;
}else{
	START_PERM_WWNOTACTIV=0;
}

//VARIABLES DE SALIDA SHEET 206
//NOR START_PERM_TE6232OK
if(FUEL_SYS_TGS_GT_275==0||CORE_ALARM_ALMCORE154==0)
{
START_PERM_TE6232_SW=1;
}
else{
START_PERM_TE6232_SW=0;
}
//SWITCH START_PERM_TE6232_SW
if(FALSE_START_PERM_TE6232_SW)
{
START_PERM_TE6232_OK=START_PERM_TE6232_SW;
}
else{
START_PERM_TE6232_OK=TRUE_START_PERM_TE6232_SW; 
}
//SALIDA DE SWITCH A BNAME (T13 - GAS SUPPLY TEMP OK)(STARTPERM) SALIDA DE BNAME A HOJAS 175,177,33
//NOR START_PERM_DVRS_OK
if(IFACE_HDWR_GMVPDRFLT==0||IFACE_HDWR_GMVIDRFLT==0||IFACE_HDWR_GMVODRFLT==0)
{
START_PERM_DRVRS_OKOR=1;
}
else{
START_PERM_DRVRS_OKOR=0;
}
//OR START_PERM_DRVRS_OKOR
if(START_PERM_DRVRS_OKOR==1||TIMERS_TEST_TRUE==1){
START_PERM_FUELDVR_OK=1;
}
else{
START_PERM_FUELDVR_OK=0;
}
//SALIDA DE OR A BNAME (FUEL DRIVER OK)(STARTPERM) SALIDA DE BNAME A HOJAS 208,175,177,33
//AND START_PERM_GLUB_OK
if(GLUB_TE6021PERM==1&& GLUB_TE6023PERM==1)
{
START_PERM_GLUBTMP_OK=1;
}
else{
START_PERM_GLUBTMP_OK=0;
}
//SALIDA DE AND A BNAME (GEN BEARING TEMPS OK)(STARTPERM) SALIDA DE BNAME A HOJAS 175,177,33
//AND START_PERM_NO_SDN_NS
if(SHUTDOWN_SDN_CORE==0&& SFC_STEP_NOT_NS==1)
{
START_PERM_SDNNS_OK=1;
}
else{
START_PERM_SDNNS_OK=0;
}
//SALIDA DE AND A BNAME (SDNs AND NS CLEARED)(CRANK PERM) SALIDA DE BNAME A HOJAS 208,175,177,33
//NOR START_PERM_VLVS_NOTSD
if(CORE_DIGITAL_GMVIVLVSD==0||CORE_DIGITAL_GMVPVLVSD==0||CORE_DIGITAL_GMVOVLVSD==0)
{
START_PERM_GAS_OK_IN_1=1;
}
else{
START_PERM_GAS_OK_IN_1=0;
}
//AND START_PERM_VLVS_CLSD
if(A2_A06_DVR_FCV62107MN==1&& A2_A06_DVR_FCV62108MN==1&& A2_A06_DVR_FCV62109MN==1)
{
START_PERM_GAS_OK_IN_2=1;
}
else{
START_PERM_GAS_OK_IN_2=0;
}
//AND START_PERM_GAS_OK
if(START_PERM_GAS_OK_IN_1==1&& START_PERM_GAS_OK_IN_2==1)
{
START_PERM_VMIN_STOP=1;
}
else{
START_PERM_VMIN_STOP=0;
}
if(FUEL_SYS_GAS100==1)
{
	START_PERM_FUEL_SEL=1;
}else{
	START_PERM_FUEL_SEL=0;
}
//SALIDA DE AND A BNAME (T10 - FUEL VLV ON MIN STOP)(STARTPERM) SALIDA DE BNAME A HOJAS 208,253,175,177,33
//AND START_PERM_PGASOKMASK
if(FUEL_SYS_PGS_GT_200==1&& FUEL_SYS_PGS_LT_700==1)
{
START_PERM_FUELPRSOK=1;
}
else{
START_PERM_FUELPRSOK=0;
}
//SALIDA DE AND A BNAME (FUEL GAS PRESSURE OK)(STARTPERM) SALIDA DE BNAME A HOJAS 208,175,177,33
//AND START_PERM_GASSOVCLSD
if(FUEL_SYS_ZS6204==1&& FUEL_SYS_ZS6249==1)
{
START_PERM_SOV_CLSD=1;
}
else{
START_PERM_SOV_CLSD=0;
}
if(SHUTDOWN_FOURHRLOK==0)
{
	START_PERM_LOK_4HROFF=1;
}else{
	START_PERM_LOK_4HROFF=0;
}
if(TRUE_START_PERM_GC_OK==1)
{
	START_PERM_GC_OK=1;
}else{
	START_PERM_GC_OK=0;
}
//SALIDA DE AND A BNAME (GAS FUEL SUPPLY SOV CLOSED) SALIDA DE BNAME A HOJAS 208,175,177,33

//*******************************************************************************
//VARIABLES DE SALIDA SHEET 207
if(IFACE_OK2START_OK2START01==0)
{
	START_PERM_OK2START01=1;
}else{
	START_PERM_OK2START01=0;
}
if(IFACE_OK2START_OK2START02==0)
{
	START_PERM_OK2START02=1;
}else{
	START_PERM_OK2START02=0;
}
if(IFACE_OK2START_OK2START03==0)
{
	START_PERM_OK2START03=1;
}else{
	START_PERM_OK2START03=0;
}
if(IFACE_OK2START_OK2START04==0)
{
	START_PERM_OK2START04=1;
}else{
	START_PERM_OK2START04=0;
}
if(IFACE_OK2START_OK2START05==0)
{
	START_PERM_OK2START05=1;
}else{
	START_PERM_OK2START05=0;
}
if(IFACE_OK2START_OK2START06==0)
{
	START_PERM_OK2START06=1;
}else{
	START_PERM_OK2START06=0;
}
if(IFACE_OK2START_OK2START07==0)
{
	START_PERM_OK2START07=1;
}else{
	START_PERM_OK2START07=0;
}
if(IFACE_OK2START_OK2START08==0)
{
	START_PERM_OK2START08=1;
}else{
	START_PERM_OK2START08=0;
}
if(IFACE_OK2START_OK2START09==0)
{
	START_PERM_OK2START09=1;
}else{
	START_PERM_OK2START09=0;
}
if(IFACE_OK2START_OK2START10==0)
{
	START_PERM_OK2START10=1;
}else{
	START_PERM_OK2START10=0;
}
if(IFACE_OK2START_OK2START11==0)
{
	START_PERM_OK2START11=1;
}else{
	START_PERM_OK2START11=0;
}
if(IFACE_OK2START_OK2START12==0)
{
	START_PERM_OK2START12=1;
}else{
	START_PERM_OK2START12=0;
}
if(IFACE_OK2START_OK2START13==0)
{
	START_PERM_OK2START13=1;
}else{
	START_PERM_OK2START13=0;
}
if(IFACE_OK2START_OK2START14==0)
{
	START_PERM_OK2START14=1;
}else{
	START_PERM_OK2START14=0;
}
if(IFACE_OK2START_OK2START15==0)
{
	START_PERM_OK2START15=1;
}else{
	START_PERM_OK2START15=0;
}
if(IFACE_OK2START_OK2START==0)
{
	START_PERM_OK2START=1;
}else{
	START_PERM_OK2START=0;
}
//VARIABLES DE SALIDA SHEET 208
if(XN25_REF_XN25MINPOS==1&& XNSD_REF_NPTSYNCPOS==1)
{
 OUT_REFSATMIN=1;
}
else{
     OUT_REFSATMIN=0;
     }
if(SFC_STEP_MOTOR_5==1)
{
 OUT_N25LT300SW=GLUB_DC_OFF;
}
else{
     OUT_N25LT300SW=START_PERM_N25LT300;
     }
if(START_PERM_NO_SHTDNS==1&& 
   START_PERM_VMIN_STOP==1&& 
   OUT_REFSATMIN==1&& 
   OUT_N25LT300SW==1&& 
   START_PERM_FUELPRSOK==1&& 
   START_PERM_LOK_4HROFF==1&& 
   START_PERM_CAL_MODE==1&& 
   START_PERM_TLUB_OK==1&& 
   START_PERM_G_STATUSOK==1&& 
   START_PERM_STATOR_PRM==1&& 
   START_PERM_HYD_ST_OK==1&& 
   START_PERM_FUELSYSOK==1&& 
   START_PERM_GLUBTNKTMP==1&& 
   START_PERM_SOV_CLSD==1&& 
   START_PERM_FORCE_MODE==1&& 
   START_PERM_FUELDVR_OK==1&&   
   START_PERM_TLO_TNKLVL==1&& 
   START_PERM_T48_LT400==1&& 
   START_PERM_CUSTPRM==1&& 
   START_PERM_MNET_OK==1&& 
   START_PERM_LH_OK==1&& 
   START_PERM_GC_OK==1&& 
   START_PERM_FANS_OK==1&& 
   START_PERM_VIB_SYS_OK==1&& 
   START_PERM_WWNOTACTIV==1&& 
   START_PERM_OK2START==1&& 
   SFC_STEP_RUNNING==0&& 
   START_PERM_GLUBTNKLVL==1&& 
   START_PERM_FLMDT_OK==1&& 
   START_PERM_OFF_RUN==1)
{
   START_PERM_T_READY=1;
}
else{
     START_PERM_T_READY=0;
     }
if(SFC_STEP_RUNNING==0&& 
 START_PERM_MNET_OK==1&& 
 START_PERM_LH_OK==1&& 
 START_PERM_HYD_ST_OK==1&& 
 START_PERM_WW_OFF==1&& 
 START_PERM_CRANK_OFF==1&& 
 START_PERM_FORCE_MODE==1&& 
 START_PERM_N25LT300==1&& 
 START_PERM_SDNNS_OK==1&& 
 START_PERM_TLO_TNKLVL==1&& 
 START_PERM_LOK_4HROFF==1&& 
 START_PERM_WWNOTACTIV==1&& 
 START_PERM_STATOR_PRM==1&& 
 START_PERM_TLUB_OK==1&& 
 START_PERM_SOV_CLSD==1&& 
 START_PERM_VMIN_STOP==1&& 
 START_PERM_GLUBTNKLVL==1&& 
 START_PERM_GLUBTNKTMP==1&& 
 START_PERM_OFF_RUN==0)
 {
 START_PERM_C_READY=1;
 }
 else{
      START_PERM_C_READY=0;
      }
 if(START_PERM_C_READY==1&&WTR_WASH_LS6543==1)
 {
	 START_PERM_WW_PERM=1;
 }else{
	 START_PERM_WW_PERM=0;
 }

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////RECONOCIMIENTO_DISPAROS//////////////////////////////

  printf(" ");

//Funcion para imprimir
 /* printf("\n B_SW_RESET ACKN= %d",LOC_REM_LOCAL);
printf("\n OUT_ORACKN_OR= %d",OUT_ORACKN_OR);
printf("\n OUT_OR_RESETACKN=%d",OUT_OR_RESETACKN);
printf("\n IFACE_CORE_ACKN_OR=%d",IFACE_CORE_ACKN_OR);
printf("\n LCKOUTMSK1_OR=%d",LCKOUTMSK1_OR);
printf("\n LCKOUTMSK1_AND=%d",LCKOUTMSK1_AND);
printf("\n FALSE_RESET_HMI_SW=%d",FALSE_RESET_HMI_SW);
printf("\n N3N40_BI_RESET=%d",N3N40_BI_RESET);
printf("\n IFACE_CORE_MASK_Z=%d",IFACE_CORE_MASK_Z);
printf("\n DATA_IO_LCR_BR_V_1908=%d",DATA_IO_LCR_BR_V_1908);
printf("\n B_FORCE_HORN=%d",B_FORCE_HORN);
printf("\n ALARM_HMISTI_OR=%d",ALARM_HMISTI_OR);
printf("\n ALARM_HMISTIRST_OR=%d",ALARM_HMISTIRST_OR);
printf("\n GENERATOR_TRIP_IN_9=%d",GENERATOR_TRIP_IN_9);
printf("\n ALARM_HMIDM_OR=%d",ALARM_HMIDM_OR);
printf("\n ALARM_HMIDMRST_OR=%d",ALARM_HMIDMRST_OR);
printf("\n XNSD_REF_DMREFSEL2=%d",XNSD_REF_DMREFSEL2);
printf("\n SHUTDOWN_ONLINE_RST=%d",SHUTDOWN_ONLINE_RST);
printf("\n SHUTDOWN_DMTIMEADJ_CTRL=%d",SHUTDOWN_DMTIMEADJ_CTRL);
printf("\n OUT_SHUTDOWN_DIS_CONDEN=%d",OUT_SHUTDOWN_DIS_CONDEN);
printf("\n SHUTDOWN_NOT_ESSTI=%d",SHUTDOWN_NOT_ESSTI);
printf("\n SFC_STEP_CORE_1250=%d",SFC_STEP_CORE_1250);
printf("\n SHUTDOWN_ABORT_SDN_OVRD=%d",SHUTDOWN_ABORT_SDN_OVRD);
printf("\n DATA_IO_LCR_BR_V_1909=%d",DATA_IO_LCR_BR_V_1909);
printf("\n ENGMODE_CLR_LAT=%d",ENGMODE_CLR_LAT);
printf("\n B_FORCE_SUM_SD=%d",B_FORCE_SUM_SD);
printf("\n IFACE_CORE_Z_SDN=%d",IFACE_CORE_Z_SDN);
printf("\n IFACE_CORE_Z_SHUTDOWN=%d",IFACE_CORE_Z_SHUTDOWN);
printf("\n IFACE_CORE_STEPIDLOR=%d",IFACE_CORE_STEPIDLOR);
printf("\n SHUTDOWN_STNKYS_MSK_OUT_OR=%d",SHUTDOWN_STNKYS_MSK_OUT_OR);
printf("\n ENGMODE_ENGMODE21_TRIGGER=%d",ENGMODE_ENGMODE21_TRIGGER);
printf("\n IFACE_CORE_DECEL_OR=%d",IFACE_CORE_DECEL_OR);
printf("\n SHUTDOWN_FRLCKOVRDE=%d",SHUTDOWN_FRLCKOVRDE);
printf("\n SHUTDOWN_DLY1150_TRIGGER=%d",SHUTDOWN_DLY1150_TRIGGER);
printf("\n SHUTDOWN_T48GT1150L_TRIGGER=%d",SHUTDOWN_T48GT1150L_TRIGGER);
printf("\n SHUTDOWN_RST_4HRLK_IN_1=%d",SHUTDOWN_RST_4HRLK_IN_1);
printf("\n SHUTDOWN_T48GT1150L_RST=%d",SHUTDOWN_T48GT1150L_RST);
printf("\n SFC_TIMER_HOT_COOLDN_CTRL=%d",SFC_TIMER_HOT_COOLDN_CTRL);
printf("\n SHUTDOWN_TRPFRMPWR_TRIGGER=%d",SHUTDOWN_TRPFRMPWR_TRIGGER);
printf("\n SHUTDOWN_TMRRSTOR_IN1=%d",SHUTDOWN_TMRRSTOR_IN1);
printf("\n SHUTDOWN_TMRRSTOR_IN2=%d",SHUTDOWN_TMRRSTOR_IN2);
printf("\n SHUTDOWN_TRPFRMPWR_RST=%d",SHUTDOWN_TRPFRMPWR_RST);
printf("\n SHUTDOWN_EIGHTMNCLR_CTRL=%d",SHUTDOWN_EIGHTMNCLR_CTRL);
printf("\n SHUTDOWN_TENMNTMRON=%d",SHUTDOWN_TENMNTMRON);
printf("\n SHUTDOWN_R64_LAT_TRIGGER=%d",SHUTDOWN_R64_LAT_TRIGGER);
printf("\n SHUTDOWN_R64_TIME=%f",SHUTDOWN_R64_TIME);
printf("\n SHUTDOWN_R64TM_SW=%f",SHUTDOWN_R64TM_SW);
printf("\n SHUTDOWN_R64_NSTIME_IN2=%f",SHUTDOWN_R64_NSTIME_IN2);
printf("\n SHUTDOWN_R64_ALM_IN_140=%d",SHUTDOWN_R64_ALM_IN_140);
printf("\n SHUTDOWN_R64_DLY_DLY_TIME=%f",SHUTDOWN_R64_DLY_DLY_TIME);
printf("\n XN25_REF_XN25MINPOS=%d",XN25_REF_XN25MINPOS);
printf("\n TRUE_SHUTDOWN_N25MIN_SW=%d",TRUE_SHUTDOWN_N25MIN_SW);
printf("\n SHUTDOWN_FUELCHOPOR_IN_7=%d",SHUTDOWN_FUELCHOPOR_IN_7);
printf("\n SHUTDOWN_FUELCHPLAT_TRIGGER=%d",SHUTDOWN_FUELCHPLAT_TRIGGER);
printf("\n SHUTDOWN_CHOP_FUEL_IN=%d",SHUTDOWN_CHOP_FUEL_IN);
printf("\n SHUTDOWN_STPIDLORNS_IN_2=%d",SHUTDOWN_STPIDLORNS_IN_2);
printf("\n XN25_REF_SI_NOT_IN=%d",XN25_REF_SI_NOT_IN);
printf("\n SHUTDOWN_MINLDOS_TRIGGER=%d",SHUTDOWN_MINLDOS_TRIGGER);
printf("\n SHUTDOWN_MINLDLAT_RST=%d",SHUTDOWN_MINLDLAT_RST);
printf("\n XNSD_REF_MINREFOR_IN_1=%d",XNSD_REF_MINREFOR_IN_1);
printf("\n OUT_XN25_REF_N25PLUS=%f",OUT_XN25_REF_N25PLUS);
printf("\n XN25_REF_XN25RTMSK2_IN_2=%d",XN25_REF_XN25RTMSK2_IN_2);        
printf("\n SHUTDOWN_N25_LWR_OR=%d",SHUTDOWN_N25_LWR_OR);                        
printf("\n XN25_REF_XN25LWROR_IN_1=%d",XN25_REF_XN25LWROR_IN_1);                      
printf("\n SHUTDOWN_STRT_TMR_RST=%d",SHUTDOWN_STRT_TMR_RST);                          
printf("\n SHUTDOWN_STRTCLDNTM_IN_2=%d",SHUTDOWN_STRTCLDNTM_IN_2);                     
 printf("\n SHUTDOWN_CLDNTMR_TRIGGER=%d",SHUTDOWN_CLDNTMR_TRIGGER);                    
printf("\n SHUTDOWN_MINLDSTTMR_IN_1=%d",SHUTDOWN_MINLDSTTMR_IN_1);                         
printf("\n SHUTDOWN_DMINTIMER_TRIGGER=%d",SHUTDOWN_DMINTIMER_TRIGGER);   
printf("\n SHUTDOWN_ONLINE=%d",SHUTDOWN_ONLINE); 
printf("\n SHUTDOWN_DMINTIMER_DLY_TIME=%f",SHUTDOWN_DMINTIMER_DLY_TIME);  
printf("\n SHUTDOWN_SMTIMEADJ=%f",SHUTDOWN_SMTIMEADJ);  

//302 
printf("\n SHUTDOWN_SDN_IN_13=%d",SHUTDOWN_SDN_IN_13);  
printf("\n SHUTDOWN_SDN_IN_11=%d",SHUTDOWN_SDN_IN_11);  
printf("\n A1_A01_CPU_VIB_SD_SEL=%d",A1_A01_CPU_VIB_SD_SEL);  
printf("\n SHUTDOWN_SDN_IN_5=%d",SHUTDOWN_SDN_IN_5);  
printf("\n SHUTDOWN_SISD_IN_1=%d",SHUTDOWN_SISD_IN_1);  
printf("\n SHUTDOWN_SDN_GEN_IN_29=%d",SHUTDOWN_SDN_GEN_IN_29);  
printf("\n SHUTDOWN_SISD_IN_2=%d",SHUTDOWN_SISD_IN_2);  
printf("\n B_FORCE_SOV6185_IN=%d",B_FORCE_SOV6185_IN);
printf("\n NB_FORCE_CRITPATHSD_IN=%d",NB_FORCE_CRITPATHSD_IN);
printf("\n FALSE_SHUTDOWN_STOP_SW=%d",FALSE_SHUTDOWN_STOP_SW);
printf("\n N3N41_BI_LOC_STOP=%d",N3N41_BI_LOC_STOP);
printf("\n SHUTDOWN_NS_LAT_IN_1=%d",SHUTDOWN_NS_LAT_IN_1);

*/
printf("\n SHUTDOWN_ACC_AND_1_IN_1=%d",SHUTDOWN_ACC_AND_1_IN_1);
printf("\n SHUTDOWN_ACC_AND_1_IN_2=%d",SHUTDOWN_ACC_AND_1_IN_2);
printf("\n SHUTDOWN_BP_AND_1_IN_1=%d",SHUTDOWN_BP_AND_1_IN_1);
printf("\n SHUTDOWN_ACC_AND_3_IN_2=%d",SHUTDOWN_ACC_AND_3_IN_2);
printf("\n SHUTDOWN_ACC_AND_2_IN_1=%d",SHUTDOWN_ACC_AND_2_IN_1);
printf("\n SHUTDOWN_SDN_IN_7=%d",SHUTDOWN_SDN_IN_7);
printf("\n SHUTDOWN_ACC_2_DLY_TRIGGER=%d",SHUTDOWN_ACC_2_DLY_TRIGGER);  
printf("\n SHUTDOWN_STRDLY_TRIGGER=%d",SHUTDOWN_STRDLY_TRIGGER);
printf("\n SHUTDOWN_BPDLY_TRIGGER=%d",SHUTDOWN_BPDLY_TRIGGER);
printf("\n SHUTDOWN_N25LT46DLY_TRIGGER=%d",SHUTDOWN_N25LT46DLY_TRIGGER);
printf("\n SHUTDOWN_N256050DLY_TRIGGER=%d",SHUTDOWN_N256050DLY_TRIGGER);
printf("\n SHUTDOWN_ACC_5_DLY_TRIGGER=%d",SHUTDOWN_ACC_5_DLY_TRIGGER);
printf("\n SHUTDOWN_ACC_6_DLY_TRIGGER=%d",SHUTDOWN_ACC_6_DLY_TRIGGER);
printf("\n SHUTDOWN_LTMP_AND_IN_3=%d",SHUTDOWN_LTMP_AND_IN_3);
printf("\n SHUTDOWN_LTMP_DLY_TRIGGER=%d",SHUTDOWN_LTMP_DLY_TRIGGER);
printf("\n SHUTDOWN_LTMP_DLY_TRIGGER=%d",SHUTDOWN_LTMP_DLY_TRIGGER);
printf("\n ALARM_ALM_LAT_IN_86=%d",ALARM_ALM_LAT_IN_86);
















//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCIONES PARA BLOQUES
//LLAMADA DE FUNCION B_SW RESET ACKN  pag 297
if (LOC_REM_LOCAL==1)
  {
                OP_INTRFC_ACKN_H=1;
            
                    }
                    else
                    {
                        FALSE_RESETACKN_LOCAL=0;    
                    OP_INTRFC_ACKN_H=0;
                        }
     if(OP_INTRFC_ACKN==1||FALSE_RESET_ACKN==1||OP_INTRFC_ACKN_H==1)
     {
     OUT_ORACKN_OR=1;
     }
     else
     {
      OUT_ORACKN_OR=0;
      }            
         if(TRUE_RESET_ACKN==1||RESET_ACKN_RESET_Z==1)
         {
         OUT_OR_RESETACKN=1;
         }
         else 
         {
              OUT_OR_RESETACKN=0;
              }
      
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para invertir la entrada OUT_OR_RESETACKN
  NOUT_OR_RESETACKN=NOT(OUT_OR_RESETACKN);
  printf("\nNOUT_OR_RESETACKN %d",NOUT_OR_RESETACKN);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer DLYALMACK de tipo TOND
  DLYALMACK=NOUT_OR_RESETACKN;
  TOND(DLYALMACK,TP_DLYALMACK,Time_factor,out_DLYALMACK);
  printf("\nout_DLYALMACK %d",out_DLYALMACK[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   if(out_DLYALMACK[1]==1|| OUT_ORACKN_OR==1)
   {
   IFACE_CORE_ACKN_OR=1;
  }
   else 
   {
   IFACE_CORE_ACKN_OR=0;
   }
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   if(SHUTDOWN_CDLO_LAT==1||SHUTDOWN_CDLO_GEN==1||SHUTDOWN_SDN_CORE==1||SHUTDOWN_SD_CORE==1)
   {
   LCKOUTMSK1_OR=1;
   }
   else 
   {
        LCKOUTMSK1_OR=0;
   }
   if(LCKOUTMSK1_OR==1 && FALSE_RESET_LCKOUTMSK1==1)
        {
        LCKOUTMSK1_AND=1;
        }
   else 
        {
        LCKOUTMSK1_AND=0;
        }

        if (LCKOUTMSK1_AND==1)
            {
                FALSE_RESET_HMI_SW=1;
                    }
                    else
                    {
                    OP_INTRFC_RESET=0;    
                    FALSE_RESET_HMI_SW=0;
                        }
                        if (LOC_REM_LOCAL==1)
                        {
                         N3N40_BI_RESET=1;
            
                           }
                            else
                             {
                               FALSE_RESET_SW=0;    
                                N3N40_BI_RESET=0;
                                 }
                                 if(N3N40_BI_RESET==1||FALSE_LOC_RESET_OR==1||FALSE_RESET_HMI_SW==1)
                                 {
                                 IFACE_CORE_MASK_Z=1;
                                 }
                                 else 
                                 {
                                 IFACE_CORE_MASK_Z=0;
                                 }


//* * * * * * * * * * INICIO PAG 298 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ALARM ANY ALM OR
  
 if(ALARM_ALM_LAT==1||NEVADA_ALARMS==1||CORE_DIGITAL_ALARM==1)
 {
 DATA_IO_LCR_BR_V_1908=1;
 }
 else
 {
  DATA_IO_LCR_BR_V_1908=0;
  }

// ALARM HORN
  if(ALARM_ALM_LAT==1||CORE_DIGITAL_DM_HORN==1||CORE_DIGITAL_ALM_HORN==1||CORE_DIGITAL_SI_HORN==1||CORE_DIGITAL_SD_HORN==1||SHUTDOWN_CDLO_GEN==1||SHUTDOWN_NS_LAT==1||NEVADA_ALARMS==1||FALSE_IN9_ALARM_HORN==1||SHUTDOWN_CDLO_LAT==1||FALSE_IN11_ALARM_HORN==1||FALSE_IN12_ALARM_HORN==1)
  {
  B_FORCE_HORN=1;
  }
  else 
  {
  B_FORCE_HORN=0;
  }
// ALARM HMI STI LATCH
if(DATA_IO_LL2_BW_V_32==1||DATA_IO_RL2_BW_V_32==1)
{
ALARM_HMISTI_OR=1;
}
else 
{
ALARM_HMISTI_OR=0;
}
if(DATA_IO_LL2_BW_V_27==1||DATA_IO_RL2_BW_V_27==1)
{
ALARM_HMISTIRST_OR=1;
}
else 
{
ALARM_HMISTIRST_OR=0;
}
if(ALARM_HMISTI_OR==1)
   {
GENERATOR_TRIP_IN_9=1;
}

if  (ALARM_HMISTIRST_OR==1)
{
     GENERATOR_TRIP_IN_9=0;   
        }

  // ALARM HMI DM LATCH
if(DATA_IO_LL2_BW_V_9==1||DATA_IO_RL2_BW_V_9==1)
{
ALARM_HMIDM_OR=1;
}
else 
{
ALARM_HMIDM_OR=0;
}
if(DATA_IO_LL2_BW_V_8==1||DATA_IO_RL2_BW_V_8==1)
{
ALARM_HMIDMRST_OR=1;
}
else 
{
ALARM_HMIDMRST_OR=0;
}
if(ALARM_HMIDM_OR==1)
   {
XNSD_REF_DMREFSEL2=1;
}

if  (ALARM_HMIDMRST_OR==1)
{
     XNSD_REF_DMREFSEL2=0;   
        }
        
//* * * * * * * * * * INICIO PAG 299 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        
//Llamada de funcion para el timer CORE_DIGITAL_N25CTRL de tipo TOND
CORE_DIGITAL_N25CTRL=1;
  TOND(CORE_DIGITAL_N25CTRL,TP_CORE_DIGITAL_N25CTRL,Time_factor,out_CORE_DIGITAL_N25CTRL);
  printf("\nout_CORE_DIGITAL_N25CTRL %d",out_CORE_DIGITAL_N25CTRL[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//LLAMADA DE FUNCION OR SHUTDOWN

if(GENERATOR_ISOCH==1||out_CORE_DIGITAL_N25CTRL[1]==1)
{
SHUTDOWN_ONLINE_RST=1;
}
else 
{
SHUTDOWN_ONLINE_RST=0;
}
 // SHUTDOWN ONLINE LATCH
if(IFACE_CORE_Z_SWGRID==1)
   {
SHUTDOWN_DMTIMEADJ_CTRL=1;
}

if  (SHUTDOWN_ONLINE_RST==1)
{
     SHUTDOWN_DMTIMEADJ_CTRL=0;   
        }
//LLAMADA DE FUNCION OR SHUTDOWN_DIS_CONDEN

         if(FALSE_SHUTDOWN_DIS_CONDEN_IN1==1||FALSE_SHUTDOWN_DIS_CONDEN_IN2==1||FALSE_SHUTDOWN_DIS_CONDEN_IN3==1||FALSE_SHUTDOWN_DIS_CONDEN_IN4==1)
         {
         OUT_SHUTDOWN_DIS_CONDEN=1;
         }
         else 
         {
         OUT_SHUTDOWN_DIS_CONDEN=0;
         }
//LLAMADA DE FUNCION OR SHUTDOWN STI ES ESN

         if(SHUTDOWN_SDN_CORE==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_STEPIDLE==1)
         {
         SHUTDOWN_NOT_ESSTI=1;
         }
         else
         {
              SHUTDOWN_NOT_ESSTI=0;
              }

// SHUTDOWN ONLINE LATCH

if(CORE_DIGITAL_N25CTRL==1)
   {
SFC_STEP_CORE_1250=1;
}

if  (SHUTDOWN_CHOP_FUEL==1)
{
     SFC_STEP_CORE_1250=0;   
        }
//LLAMADA DE FUNCION OR SHUTDOWN ABORTOVRD

if(SPEED_SW_NSDGT3590==1||GENERATOR_GEN_BKRCLS==1)
{
SHUTDOWN_ABORT_SDN_OVRD=1;
}
else 
{
SHUTDOWN_ABORT_SDN_OVRD=0;
} 
//LLAMADA DE FUNCION OR SHUTDOWN NOTAVAIL

if(START_PERM_T_NOTREADY==1||GENERATOR_ANY_SD==1)
{
DATA_IO_LCR_BR_V_1909=1;
}
else 
{
DATA_IO_LCR_BR_V_1909=0;
}
//LLAMADA DE FUNCION SHUTDOWN ANY SD OR

if(SHUTDOWN_CDLO==1||SHUTDOWN_DECELMIN==1||SHUTDOWN_SDN_CORE==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_STEPIDLE==1)
{
ENGMODE_CLR_LAT=1;
B_FORCE_SUM_SD=0;
}
else 
{
ENGMODE_CLR_LAT=0;
B_FORCE_SUM_SD=1;
}
//LLAMADA DE FUNCION SHUTDOWN STI OR
if(SHUTDOWN_ABORT_SDN==1||SHUTDOWN_SDN==1||SHUTDOWN_SDN_GEN==1)
{
IFACE_CORE_Z_SDN=1;
}
else
{
IFACE_CORE_Z_SDN=0;
}

//LLAMADA DE FUNCION SHUTDOWN SD OR

if(FALSE_SHUTDOWN_SD_OR==1||SHUTDOWN_SD==1||SHUTDOWN_SD_GEN==1)
{
IFACE_CORE_Z_SHUTDOWN=1;
}
else 
{
IFACE_CORE_Z_SHUTDOWN=0;
}
//LLAMADA DE FUNCION SHUTDOWN SD OR

if(SHUTDOWN_SI==1||SHUTDOWN_SISD==1||FALSE_SHUTDOWN_STI_OR==1)
{
IFACE_CORE_STEPIDLOR=1;
}
else 
{
IFACE_CORE_STEPIDLOR=0;
}
//LLAMADA DE FUNCION SHUTDOWN STNKYS MSK NOR

if(SHUTDOWN_CDLO_LAT==0||SHUTDOWN_CDLO_GEN==0||SHUTDOWN_SD_CORE==0||SHUTDOWN_SDN_CORE==0||SHUTDOWN_STEPIDLE==0)
{
SHUTDOWN_STNKYS_MSK_OUT_OR=1;
}
else 
{
SHUTDOWN_STNKYS_MSK_OUT_OR=0;
}

//LLAMADA DE FUNCION SHUTDOWN CDLO OR

if(SHUTDOWN_CDLO_LAT==1||SHUTDOWN_CDLO_GEN==1||SHUTDOWN_NS_LAT==1)
{
ENGMODE_ENGMODE21_TRIGGER=1;
}
else 
{
ENGMODE_ENGMODE21_TRIGGER=0;
}
 //LLAMADA DE FUNCION SHUTDOWN CDLO OR
if(SHUTDOWN_DM==1||SHUTDOWN_DM_GEN==1)
{
IFACE_CORE_DECEL_OR=1;
}
else 
{
IFACE_CORE_DECEL_OR=0;
}

//* * * * * * * * * * INICIO PAG 300* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCION SHUTDOWN SETSAMPLE OR
if(SHUTDOWN_CHOP_FUEL==1||SHUTDOWN_STEPIDLE==1||ALARM_HMI_STI==1)
{
SHUTDOWN_FRLCKOVRDE=1;
}
else 
{
SHUTDOWN_FRLCKOVRDE=0;
}
//SHUTDOWN T48GT1150;
CORE_ANALOG_T48SEL=1150;
if (CORE_ANALOG_T48SEL==1150)
{
SHUTDOWN_DLY1150_TRIGGER=1;
}
else
{
    SHUTDOWN_DLY1150_TRIGGER=0;
    }

//Llamada de funcion para el timer SHUTDOWNDLY1150 de tipo TOFD
  SHUTDOWNDLY1150=SHUTDOWN_DLY1150_TRIGGER;
  TOFD(SHUTDOWNDLY1150,TP_SHUTDOWNDLY1150,Time_factor,out_SHUTDOWNDLY1150);
  printf("\nout_SHUTDOWNDLY1150 %d",out_SHUTDOWNDLY1150[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//SHUTDOWN FRLCKOVRDE;

if(TRUE_SHUTDOWN_FRLCKOVRDE==1||SHUTDOWN_FRLCKOVRDE==1||SHUTDOWN_DLY1150_TRIGGER==1)
{
SHUTDOWN_T48GT1150L_TRIGGER=1;
}
else
{
SHUTDOWN_T48GT1150L_TRIGGER=0;
}
//Llamada de funcion para el timer SHUTDOWN_RUN_AGAIN de tipo TOND

SHUTDOWN_RUN_AGAIN=SPEED_SW_N25GT4600;
  TOND(SHUTDOWN_RUN_AGAIN,TP_SHUTDOWN_RUN_AGAIN,Time_factor,out_SHUTDOWN_RUN_AGAIN);
  printf("\nout_SHUTDOWN_RUN_AGAIN %d",out_SHUTDOWN_RUN_AGAIN[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//SHUTDOWN FUEL ON;
if(CORE_DIGITAL_FUEL_ON==1 && out_SHUTDOWN_RUN_AGAIN[1]==1)
{
SHUTDOWN_RST_4HRLK_IN_1=1;
}
else 
{
SHUTDOWN_RST_4HRLK_IN_1=0;
} 
//SHUTDOWN RST 4HRLK
if(SHUTDOWN_LOCKLOOP==1||SFC_TIMER_CDC_DN==1||SHUTDOWN_RST_4HRLK_IN_1==1)
{
SHUTDOWN_T48GT1150L_RST=1;
}
else
{
 SHUTDOWN_T48GT1150L_RST=0;
 }

// SHUTDOWN ONLINE LATCH
if(SHUTDOWN_T48GT1150L_TRIGGER==1)
   {
SFC_TIMER_HOT_COOLDN_CTRL=1;
}

if  (SHUTDOWN_T48GT1150L_RST==1)
{
     SFC_TIMER_HOT_COOLDN_CTRL=0;   
        }
//Llamada de funcion para invertir la entrada SFC_TIMER_HOT_COOLDN_CTRL
  NSFC_TIMER_HOT_COOLDN_CTRL=NOT(SFC_TIMER_HOT_COOLDN_CTRL);
  printf("\nNSFC_TIMER_HOT_COOLDN_CTRL %d",NSFC_TIMER_HOT_COOLDN_CTRL);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// SHUTDOWN MASK4STRT

if(SPEED_SW_N25LT300==1&&SFC_TIMER_HOT_COOLDN_CTRL==1)
{
SHUTDOWN_TRPFRMPWR_TRIGGER=1;
}
else 
{
SHUTDOWN_TRPFRMPWR_TRIGGER=0;
}

//Llamada de funcion para invertir la entrada SHUTDOWN_LOCKLOOP
  NSHUTDOWN_LOCKLOOP=NOT(SHUTDOWN_LOCKLOOP);
  printf("\nNSHUTDOWN_LOCKLOOP %d",NSHUTDOWN_LOCKLOOP);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// SHUTDOWN STPTMR AND
if(HYD_STRT_SOV1619RMP==1&&SHUTDOWN_LOCKLOOP==1&&SPEED_SW_N25GT1700==1)
{
SHUTDOWN_TMRRSTOR_IN1=1;
}
else 
{
SHUTDOWN_TMRRSTOR_IN1=0;
}


// SHUTDOWN FRHRLOKRST

if(SHUTDOWN_FRLKTMRDN==1&&SHUTDOWN_SD_RESET==1)
{
SHUTDOWN_TMRRSTOR_IN2=1;
}
else
{
 SHUTDOWN_TMRRSTOR_IN2=0;
}
 
 // SHUTDOWN TMRRSTOR
if(SHUTDOWN_TMRRSTOR_IN1==1||SHUTDOWN_TMRRSTOR_IN2==1)
{
SHUTDOWN_TRPFRMPWR_RST=1;
}
else 
{
SHUTDOWN_TRPFRMPWR_RST=0;
}



// SHUTDOWN ONLINE LATCH
if(SHUTDOWN_TRPFRMPWR_TRIGGER==1)
   {
SHUTDOWN_EIGHTMNCLR_CTRL=1;
}

if  (SHUTDOWN_TRPFRMPWR_RST==1)
{
     SHUTDOWN_EIGHTMNCLR_CTRL=0;   
        }
//Llamada de funcion para el timer SHUTDOWN_TENMINCLR de tipo TOND
SHUTDOWN_TENMINCLR=SHUTDOWN_EIGHTMNCLR_CTRL;
  TOND(SHUTDOWN_TENMINCLR,TP_SHUTDOWN_TENMINCLR,Time_factor,out_SHUTDOWN_TENMINCLR);
  printf("\nout_SHUTDOWN_TENMINCLR %d",out_SHUTDOWN_TENMINCLR[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


//Llamada de funcion para invertir la entrada SHUTDOWN_FOURHRLOK
  NSHUTDOWN_FOURHRLOK=NOT(SHUTDOWN_FOURHRLOK);
  printf("\nNSHUTDOWN_FOURHRLOK %d",NSHUTDOWN_FOURHRLOK);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// SHUTDOWN MASK_1 AND

if(SHUTDOWN_EIGHTMNCLR_CTRL==1 && NSHUTDOWN_FOURHRLOK==1)
{
SHUTDOWN_TENMNTMRON=1;
}
else 
{
SHUTDOWN_TENMNTMRON=0;
}
// SHUTDOWN R64 OR
if(FALSE_SHUTDOWN_R64_EARTH==1||FALSE_SHUTDOWN_TEST_R64==1||SHUTDOWN_R64_EARTHB==1)
{
SHUTDOWN_R64_LAT_TRIGGER=1;
}
else 
{
SHUTDOWN_R64_LAT_TRIGGER=0;
}
// SHUTDOWN R64TM SW

if (TIMERS_TEST_TRUE==1)
  {
                SHUTDOWN_R64_TIME=0.01;

                    }
                    else
                    {
                       SHUTDOWN_R64_NSTIME_IN2=SHUTDOWN_R64_TIME;
                        }
if (TIMERS_TEST_TRUE==0)
  {
                SHUTDOWN_R64TM_SW=12.0;

                    }
                    else
                    {
                       SHUTDOWN_R64_NSTIME_IN2=SHUTDOWN_R64TM_SW;
                        }


// SHUTDOWN R64_LAT LATCH

if(SHUTDOWN_R64_LAT_TRIGGER==1)
   {
SHUTDOWN_R64_ALM_IN_140=1;
}

if  (ALARM_RESET==1)
{
     SHUTDOWN_R64_ALM_IN_140=0;   
        }

// SHUTDOWN R64_MULTIPLY


SHUTDOWN_R64_NSTIME=3600;

SHUTDOWN_R64_DLY_DLY_TIME=SHUTDOWN_R64_NSTIME*SHUTDOWN_R64_NSTIME_IN2;

// SHUTDOWN N25MIN SW
if ( SFC_STEP_CNFG_CLDWN==1)
  {
                TRUE_SHUTDOWN_N25MIN_SW=1;
            
                    }
                    else
                    {
                        XN25_REF_XN25MINPOS=0;    
                    TRUE_SHUTDOWN_N25MIN_SW=0;
                        }

// SHUTDOWN CLDN DONE AND
if(SHUTDOWN_CLDNTMR==1&&TRUE_SHUTDOWN_N25MIN_SW==1)
{
SHUTDOWN_FUELCHOPOR_IN_7=1;
}
else 
{
SHUTDOWN_FUELCHOPOR_IN_7=0;
}
// SHUTDOWN FUELCHOPOR
if(SHUTDOWN_SDN_CORE==1||SHUTDOWN_SD_CORE==1||SFC_STEP_STI_3==1||SFC_STEP_ESN==1||SFC_STEP_ES_1==1||SFC_STEP_FUELOFF==1||SHUTDOWN_FUELCHOPOR_IN_7==1)
{
SHUTDOWN_FUELCHPLAT_TRIGGER=1;
}
else 
{
SHUTDOWN_FUELCHPLAT_TRIGGER=0;
}

// SHUTDOWN FUEL_CHPLAT LATCH

if(SHUTDOWN_FUELCHPLAT_TRIGGER==1)
   {
SHUTDOWN_CHOP_FUEL_IN=1;
}

if  (ALARM_RESET_LATCH==1)
{
     SHUTDOWN_CHOP_FUEL_IN=0;   
        }
//Llamada de funcion para invertir la entrada SHUTDOWN_CHOP_FUEL_IN
  NSHUTDOWN_CHOP_FUEL_IN=NOT(SHUTDOWN_CHOP_FUEL_IN);
  printf("\nNSHUTDOWN_CHOP_FUEL_IN %d",NSHUTDOWN_CHOP_FUEL_IN);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// SHUTDOWN NSTP UTLOP AND

if(GENERATOR_UTIL_BKROP==1&&SFC_STEP_NORM_1==1&&SHUTDOWN_GENCLSD==1&&SHUTDOWN_COREREACHD==1)
{
SHUTDOWN_STPIDLORNS_IN_2=1;
}
else
{
 SHUTDOWN_STPIDLORNS_IN_2=0;
}
// SHUTDOWN STPLORNS OR

if(SHUTDOWN_STEPIDLE==1||ALARM_HMI_STI==1||SHUTDOWN_STPIDLORNS_IN_2==1)
{
XN25_REF_SI_NOT_IN=1;
}
else 
{
XN25_REF_SI_NOT_IN=0;
}
// SHUTDOWN NSTP MASK AND

if(SFC_STEP_NORM_1==1&&GENERATOR_GEN_BKRCLS==1&&NSHUTDOWN_LTMINLD==1)
{
SHUTDOWN_MINLDOS_TRIGGER=1;
}
else 
{
SHUTDOWN_MINLDOS_TRIGGER=0;
}
//Llamada de funcion para invertir la entrada SHUTDOWN_LTMINLD
  NSHUTDOWN_LTMINLD=NOT(SHUTDOWN_LTMINLD);
  printf("\nNSHUTDOWN_LTMINLD %d",NSHUTDOWN_LTMINLD);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//Llamada de funcion para el timer SHUTDOWN_MINLDOS de tipo TOND
SHUTDOWN_MINLDOS=SHUTDOWN_MINLDOS_TRIGGER;
  TOND(SHUTDOWN_MINLDOS,TP_SHUTDOWN_MINLDOS,Time_factor,out_SHUTDOWN_MINLDOS);
  printf("\nout_SHUTDOWN_MINLDOS %d",out_SHUTDOWN_MINLDOS[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//SHUTDOWN RSTREFLAT OR

if(SFC_STEP_RST_AND_ST==1||SHUTDOWN_LTMINLD==1)
{
SHUTDOWN_MINLDLAT_RST=1;
}
else 
{
SHUTDOWN_MINLDLAT_RST=0;
}
// SHUTDOWN MINLDLAT LATCH

if(out_SHUTDOWN_MINLDOS[1]==1)
   {
XNSD_REF_MINREFOR_IN_1=1;
}

if  (SHUTDOWN_MINLDLAT_RST==1)
{
     XNSD_REF_MINREFOR_IN_1=0;   
        }
        
//XN25REF PLUS 

CORE_ANALOG_N25SEL=200;//NO SE ESPECIFICA EL VALOR EN GAP
XN25_REF_N25PLUS=200;// EL VALOR NO ES BIEN ESTABLECIDO HAY MAS VALORES
OUT_XN25_REF_N25PLUS=CORE_ANALOG_N25SEL + XN25_REF_N25PLUS;

//XN25 REF REF CMPR

XN25_REF_XN25REF=400;

if(XN25_REF_XN25REF==OUT_XN25_REF_N25PLUS)
{
XN25_REF_XN25RTMSK2_IN_2=1;
}
else
{        
 XN25_REF_XN25RTMSK2_IN_2=0;       
}        
 //XN25 REF XN25RTMSK2 AND       

if(SFC_STEP_NORM_4==1&&FALSE_XN25_REF_XN25RTMSK2==1&&XN25_REF_XN25RTMSK2_IN_2==1)
{
SHUTDOWN_N25_LWR_OR=1;
}
else
{
SHUTDOWN_N25_LWR_OR=0;
}

// SHUTDOWN N25LWR OR
if(SFC_STEP_NORM_5==1||SHUTDOWN_N25_LWR_OR==1)
{
XN25_REF_XN25LWROR_IN_1=1;
}
else 
{
XN25_REF_XN25LWROR_IN_1=0;
}
//SHUTDOWN TMRRST OR
if(SHUTDOWN_CLDN_DONE==1||SFC_STEP_RST_AND_ST==1)
{
SHUTDOWN_STRT_TMR_RST=1;
}
else 
{
SHUTDOWN_STRT_TMR_RST=0;
}

//SHUTDOWN STRT TMR LATCH 
 if(SFC_STEP_NORM_4==1)
   {
SHUTDOWN_STRTCLDNTM_IN_2=1;
}

if  (SHUTDOWN_STRT_TMR_RST==1)
{
     SHUTDOWN_STRTCLDNTM_IN_2=0;   
        }
//SHUTDOWN STRTCLDNTM AND
if(XNSD_REF_NPTSYNCPOS==1&&SHUTDOWN_STRTCLDNTM_IN_2==1)
{
SHUTDOWN_CLDNTMR_TRIGGER=1;
}
else 
{
SHUTDOWN_CLDNTMR_TRIGGER=0;
}
//Llamada de funcion para el timer SHUTDOWN_CLDNTMR de tipo TOND
  SHUTDOWN_CLDNTMR=SHUTDOWN_CLDNTMR_TRIGGER;
  TOND(SHUTDOWN_CLDNTMR,TP_SHUTDOWN_CLDNTMR,Time_factor,out_SHUTDOWN_CLDNTMR);
  printf("\nout_SHUTDOWN_CLDNTMR %d",out_SHUTDOWN_CLDNTMR[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SHUTDOWN_MINLD OR
if(SHUTDOWN_LTMINLD==1||SHUTDOWN_RSTONLINE==1)
{
SHUTDOWN_MINLDSTTMR_IN_1=1;
}
else 
{
SHUTDOWN_MINLDSTTMR_IN_1=0;
}
//SHUTDOWN MINLDSTTMR AND

if(SHUTDOWN_DECELMIN==1&&SHUTDOWN_STI_ES_ESN==1&&SHUTDOWN_MINLDSTTMR_IN_1==1)
{
SHUTDOWN_DMINTIMER_TRIGGER=1;
}
else 
{
SHUTDOWN_DMINTIMER_TRIGGER=0;
}
//Llamada de funcion para el timer SHUTDOWN_DMINTIMER de tipo TOND
SHUTDOWN_DMINTIMER=SHUTDOWN_DMINTIMER_TRIGGER;
  TOND(SHUTDOWN_DMINTIMER,TP_SHUTDOWN_DMINTIMER,Time_factor,out_SHUTDOWN_DMINTIMER);
  printf("\nout_SHUTDOWN_DMINTIMER %d",out_SHUTDOWN_DMINTIMER[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// SHUTDOWN R64_MULTIPLY

SHUTDOWN_SML_MIN=60;
DATA_IO_AW_V_6=2;//ESTE VALOR NO ES EL VERDADERO

SHUTDOWN_DMTIMEADJ_NO=SHUTDOWN_SML_MIN*DATA_IO_AW_V_6;

//SHUTDOWN DMTIMEADJ A_SW

if (SHUTDOWN_ONLINE==1)
  {
                SHUTDOWN_SMTIMEADJ=0.01;

                    }
                    else
                    {
                       SHUTDOWN_DMINTIMER_DLY_TIME=0.01;
                        }
if (SHUTDOWN_ONLINE==0)
  {
                SHUTDOWN_DMINTIMER_DLY_TIME=SHUTDOWN_DMTIMEADJ_NO;

                    }
                    else
                    {
                       SHUTDOWN_R64_NSTIME_IN2=0.03;
                        }
//* * * * * * * * * * INICIO PAG 302* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//Llamada de funcion para invertir la entrada A1_A12_BI1_CRIT_PATH
  NA1_A12_BI1_CRIT_PATH=NOT(A1_A12_BI1_CRIT_PATH);
  printf("\nNA1_A12_BI1_CRIT_PATH %d",NA1_A12_BI1_CRIT_PATH);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para invertir la entrada A1_A12_BI1_SD_FUEL
  NA1_A12_BI1_SD_FUEL=NOT(A1_A12_BI1_SD_FUEL);
  printf("\nNA1_A12_BI1_SD_FUEL %d",NA1_A12_BI1_SD_FUEL);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//A1_A12_BI1_CRIT_PATH
if (NA1_A12_BI1_CRIT_PATH==1)
{
SHUTDOWN_SDN_IN_13=1;
}
else 
{
     SHUTDOWN_SDN_IN_13=0;
     }
     
//A1_A12_BI1_SD_FUEL
if (NA1_A12_BI1_SD_FUEL==1)
{
SHUTDOWN_SDN_IN_11=1;
}
else 
{
     SHUTDOWN_SDN_IN_11=0;
     }
     
//SHUTDOWN_GENGBDLT12 AND
     
if(N3N40_BI_VIB_GB_SD==1&&FALSE_SHUTDOWN_GENGBDLT12==1)
{
A1_A01_CPU_VIB_SD_SEL=1;
}
else 
{
A1_A01_CPU_VIB_SD_SEL=0;
}
//SHUTDOWN_VIB_SD_SEL_BSW_REV
if (TRUE_SHUTDOWN_MUYFM_PLSE==1&&FALSE_SHUTDOWN_VIB_SD_FUEL==1&&N3N40_BI_VIB_SUM_SD==1)
  {
                SHUTDOWN_SDN_IN_5=1;

                    }
                    else
                    {
                       SHUTDOWN_SDN_IN_5=0;
                        }
if (TRUE_SHUTDOWN_MUYFM_PLSE==0&&FALSE_SHUTDOWN_VIB_SD_FUEL==1&&N3N40_BI_VIB_SUM_SD==1)
  {
                SHUTDOWN_SISD_IN_1=1;

                    }
                    else
                    {
                       SHUTDOWN_SISD_IN_1=0;
                        }

//SHUTDOWN_VIB_SD_SEL_BSW_REV
if (TRUE_SHUTDOWN_MUYFM_PLSE==1&&A1_A01_CPU_VIB_SD_SEL==1&&FALSE_A1_A01_CPU_VIB_SD_SEL==1)
  {
                SHUTDOWN_SDN_GEN_IN_29=1;

                    }
                    else
                    {
                       SHUTDOWN_SDN_GEN_IN_29=0;
                        }

if (TRUE_SHUTDOWN_MUYFM_PLSE==0&&A1_A01_CPU_VIB_SD_SEL==1&&FALSE_A1_A01_CPU_VIB_SD_SEL==1)
  {
                SHUTDOWN_SISD_IN_2=1;

                    }
                    else
                    {
                       SHUTDOWN_SISD_IN_2=0;
                        }

//Llamada de funcion para el timer SHUTDOWN_COOLAIRTMR de tipo TOND
SHUTDOWN_COOLAIRTMR=SPEED_SW_GENCSTDOWN;
  TOND(SHUTDOWN_COOLAIRTMR,TP_SHUTDOWN_COOLAIRTMR,Time_factor,out_SHUTDOWN_COOLAIRTMR);
  printf("\nout_SHUTDOWN_COOLAIRTMR %d",out_SHUTDOWN_COOLAIRTMR[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

SHUTDOWN_CLTMR_DONE_IN=out_SHUTDOWN_COOLAIRTMR[1]; 
//Llamada de funcion para invertir la entrada SHUTDOWN_CLTMR_DONE_IN
  NSHUTDOWN_CLTMR_DONE_IN=NOT(SHUTDOWN_CLTMR_DONE_IN);
  printf("\nNSHUTDOWN_CLTMR_DONE_IN %d",NSHUTDOWN_CLTMR_DONE_IN);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

if(CORE_DIGITAL_FUELOFF==1&&SFC_STEP_NOTSTARTIN==1&&NSHUTDOWN_CLTMR_DONE_IN==1)
{
B_FORCE_SOV6185_IN=1;
}
else 
{
B_FORCE_SOV6185_IN=0;
}
//SHUTDOWN_CRIT_MASK NOR
if(TIMERS_TEST_TRUE==1||SHUTDOWN_EXOVRSPDSD==1||CORE_SHTDN_SD_CORE005==1||CORE_SHTDN_SD_CORE006==1||CORE_SHTDN_SD_CORE007==1||CORE_SHTDN_SD_CORE008==1||CORE_SHTDN_SD_CORE009==1||CORE_SHTDN_SD_CORE010==1)
{
B_FORCE_CRITPATHSD_IN=1;
}
else 
{
B_FORCE_CRITPATHSD_IN=0;
}
//Llamada de funcion para invertir la entrada B_FORCE_CRITPATHSD_IN
  NB_FORCE_CRITPATHSD_IN=NOT(B_FORCE_CRITPATHSD_IN);
  printf("\nNB_FORCE_CRITPATHSD_IN %d",NB_FORCE_CRITPATHSD_IN);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SHUTDOWN_STOP_SW
if (LOC_REM_LOCAL==1)
  {
                N3N41_BI_LOC_STOP=1;

                    }
                    else
                    {
                       N3N41_BI_LOC_STOP=0;
                        }

if (LOC_REM_LOCAL==0)
  {
                FALSE_SHUTDOWN_STOP_SW=1;

                    }
                    else
                    {
                       FALSE_SHUTDOWN_STOP_SW=0;
                        }
//SHUTDOWN_NSTOP_OR
if(OP_INTRFC_STOP==1||N3N41_BI_LOC_STOP==1)
{
SHUTDOWN_NS_LAT_IN_1=1;
}
else 
{
SHUTDOWN_NS_LAT_IN_1=0;
}
//* * * * * * * * * * INICIO PAG 303 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//SHUTDOWN_N25DLT10
CORE_ANALOG_N25DOT=10;//VALOR DE PRUEBA NO ES REAL
SHUTDOWN_N25DLT10=10;
if (CORE_ANALOG_N25DOT==SHUTDOWN_N25DLT10)
{
SHUTDOWN_ACC_AND_1_IN_1=1;
}
else
{
    SHUTDOWN_ACC_AND_1_IN_1=0;
    }
    
//SHUTDOWN_N25LT6050
CORE_ANALOG_N25SEL=1700;//VALOR DE PRUEBA NO ES REAL ESTE CONTROLA A LOS 3 COMPARADORES
SHUTDOWN_N25LT6050=6050;
if (CORE_ANALOG_N25SEL==SHUTDOWN_N25LT6050)
{
SHUTDOWN_ACC_AND_1_IN_2=1;
}
else
{
    SHUTDOWN_ACC_AND_1_IN_2=0;
    }
//SHUTDOWN_N25DLT1700

SHUTDOWN_N25LT1700=1700;
if (CORE_ANALOG_N25SEL==SHUTDOWN_N25LT1700)
{
SHUTDOWN_BP_AND_1_IN_1=1;
}
else
{
    SHUTDOWN_BP_AND_1_IN_1=0;
    }

//SHUTDOWN_N25DLT4600

SHUTDOWN_N25LT4600=4600;
if (CORE_ANALOG_N25SEL==SHUTDOWN_N25LT4600)
{
SHUTDOWN_ACC_AND_3_IN_2=1;
}
else
{
    SHUTDOWN_ACC_AND_3_IN_2=0;
    }
//SHUTDOWN_N25RLT6407
CORE_ANALOG_N25R=6407;//VALOR DE PRUEBA NO ES REAL
SHUTDOWN_N25RLT6407=6407;
if (CORE_ANALOG_N25R==SHUTDOWN_N25RLT6407)
{
SHUTDOWN_ACC_AND_2_IN_1=1;
}
else
{
    SHUTDOWN_ACC_AND_2_IN_1=0;
    }
    
//SHUTDOWN_ACC_AND_1
if(CORE_DIGITAL_LITEOFF==1&&FALSE_SHUTDOWN_ACC_AND_1==1&&SHUTDOWN_ACC_AND_1_IN_1==1&&SHUTDOWN_ACC_AND_1_IN_2==1)
{
SHUTDOWN_SDN_IN_7=1;
}
else
{
SHUTDOWN_SDN_IN_7=0;
}
//SHUTDOWN_ACC_AND_2
if(CORE_DIGITAL_FUELON==1&&SHUTDOWN_ACC_AND_2_IN_1==1)
{
SHUTDOWN_ACC_2_DLY_TRIGGER=1;
}
else 
{
SHUTDOWN_ACC_2_DLY_TRIGGER=0;
}

//SHUTDOWN_ACC_AND_1

if(HYD_STRT_CRANK_HI==1&&SHUTDOWN_BP_AND_1_IN_1==1)
{
SHUTDOWN_STRDLY_TRIGGER=1;
}
else 
{
SHUTDOWN_STRDLY_TRIGGER=0;
}

//SHUTDOWN_BP_AND_1
if(FALSE_SHUTDOWN_BP_AND_1==1&&HYD_STRT_CRANK_HI==1&&FUEL_SYS_PRGDN==1&&SHUTDOWN_BP_AND_1_IN_1==1)
{
SHUTDOWN_BPDLY_TRIGGER=1;
}
else 
{
SHUTDOWN_BPDLY_TRIGGER=0;
}

//SHUTDOWN_ACC_AND_3

if(CORE_DIGITAL_FUELON==1&&SHUTDOWN_ACC_AND_3_IN_2==1)
{
SHUTDOWN_N25LT46DLY_TRIGGER=1;
}
else
{
SHUTDOWN_N25LT46DLY_TRIGGER=0;
}
//SHUTDOWN_ACC_AND_4

if(CORE_DIGITAL_FUELON==1&&SHUTDOWN_ACC_AND_1_IN_2==1)
{
SHUTDOWN_N256050DLY_TRIGGER=1;
}
else 
{
SHUTDOWN_N256050DLY_TRIGGER=0;
}
//Llamada de funcion para el timer SHUTDOWN_ACC_2_DLY de tipo TOND
SHUTDOWN_ACC_2_DLY=SHUTDOWN_ACC_2_DLY_TRIGGER;
  TOND(SHUTDOWN_ACC_2_DLY,TP_SHUTDOWN_ACC_2_DLY,Time_factor,out_SHUTDOWN_ACC_2_DLY);
  printf("\nout_SHUTDOWN_ACC_2_DLY %d",out_SHUTDOWN_ACC_2_DLY[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SHUTDOWN_ACC_AND_1 de tipo TOND
SHUTDOWN_ACC_AND_1=SHUTDOWN_STRDLY_TRIGGER;
  TOND(SHUTDOWN_ACC_AND_1,TP_SHUTDOWN_ACC_AND_1,Time_factor,out_SHUTDOWN_ACC_AND_1);
  printf("\nout_SHUTDOWN_ACC_AND_1 %d",out_SHUTDOWN_ACC_AND_1[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SHUTDOWN_BP_AND_1 de tipo TOND
  SHUTDOWN_BP_AND_1=SHUTDOWN_BPDLY_TRIGGER;
  TOND(SHUTDOWN_BP_AND_1,TP_SHUTDOWN_BP_AND_1,Time_factor,out_SHUTDOWN_BP_AND_1);
  printf("\nout_SHUTDOWN_BP_AND_1 %d",out_SHUTDOWN_BP_AND_1[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SHUTDOWN_ACC_AND_3 de tipo TOND
  SHUTDOWN_ACC_AND_3=SHUTDOWN_N25LT46DLY_TRIGGER;
  TOND(SHUTDOWN_ACC_AND_3,TP_SHUTDOWN_ACC_AND_3,Time_factor,out_SHUTDOWN_ACC_AND_3);
  printf("\nout_SHUTDOWN_ACC_AND_3 %d",out_SHUTDOWN_ACC_AND_3[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SHUTDOWN_ACC_AND_4 de tipo TOND
  SHUTDOWN_ACC_AND_4=SHUTDOWN_N256050DLY_TRIGGER;
  TOND(SHUTDOWN_ACC_AND_4,TP_SHUTDOWN_ACC_AND_4,Time_factor,out_SHUTDOWN_ACC_AND_4);
  printf("\nout_SHUTDOWN_ACC_AND_4 %d",out_SHUTDOWN_ACC_AND_4[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//Llamada de funcion para invertir la entrada SHUTDOWN_COREREACHD
  NSHUTDOWN_COREREACHD=NOT(SHUTDOWN_COREREACHD);
  printf("\nNSHUTDOWN_COREREACHD %d",NSHUTDOWN_COREREACHD);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SHUTDOWN_ACC_AND_5

if(CORE_DIGITAL_FUELON==1&&CORE_DIGITAL_LITEOFF==1&&NSHUTDOWN_COREREACHD==1)
{
SHUTDOWN_ACC_5_DLY_TRIGGER=1;
}
else
{
SHUTDOWN_ACC_5_DLY_TRIGGER=0;
}
//SHUTDOWN_ACC_AND_6

if(SPEED_SW_NSDLT1250==1&&CORE_DIGITAL_FUELON==1&&SHUTDOWN_COREREACHD==1)
{
SHUTDOWN_ACC_6_DLY_TRIGGER=1;
}
else 
{
SHUTDOWN_ACC_6_DLY_TRIGGER=0;
}
//Llamada de funcion para el timer SHUTDOWN_ACC_AND_5 de tipo TOND
  SHUTDOWN_ACC_AND_5=SHUTDOWN_ACC_5_DLY_TRIGGER;
  TOND(SHUTDOWN_ACC_AND_5,TP_SHUTDOWN_ACC_AND_5,Time_factor,out_SHUTDOWN_ACC_AND_5);
  printf("\nout_SHUTDOWN_ACC_AND_5 %d",out_SHUTDOWN_ACC_AND_5[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SHUTDOWN_ACC_AND_6 de tipo TOND
  SHUTDOWN_ACC_AND_6=SHUTDOWN_ACC_6_DLY_TRIGGER;
  TOND(SHUTDOWN_ACC_AND_6,TP_SHUTDOWN_ACC_AND_6,Time_factor,out_SHUTDOWN_ACC_AND_6);
  printf("\nout_SHUTDOWN_ACC_AND_6 %d",out_SHUTDOWN_ACC_AND_6[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SHUTDOWN_XNSDLT1250

CORE_ANALOG_TLUBLEL=90;//VALOR DE PRUEBA NO ES REAL
SHUTDOWN_TLUBLT90C=90;
if (CORE_ANALOG_TLUBLEL==SHUTDOWN_TLUBLT90C)
{
SHUTDOWN_LTMP_AND_IN_3=1;
}
else
{
    SHUTDOWN_LTMP_AND_IN_3=0;
    }
if(FALSE_SHUTDOWN_LTMP==1&&SHUTDOWN_LTMP_AND_IN_3==1&&CORE_DIGITAL_FUELON==1)
{
SHUTDOWN_LTMP_DLY_TRIGGER=1;
}
else 
{
SHUTDOWN_LTMP_DLY_TRIGGER=0;
}

//Llamada de funcion para el timer SHUTDOWN_SD_IN_9 de tipo TOND
  SHUTDOWN_SD_IN_9=SHUTDOWN_LTMP_DLY_TRIGGER;
  TOND(SHUTDOWN_SD_IN_9,TP_SHUTDOWN_SD_IN_9,Time_factor,out_SHUTDOWN_SD_IN_9);
  printf("\nout_SHUTDOWN_SD_IN_9 %d",out_SHUTDOWN_SD_IN_9[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//SHUTDOWN_MASKTLB90_AND

if(SPEED_SW_NSDGT3590==1&&TLO_USE_SYNC==1&&SHUTDOWN_LTMP_AND_IN_3==1)
{
ALARM_ALM_LAT_IN_86=1;
}
else 
{ 
ALARM_ALM_LAT_IN_86=0;
}

////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////SECUENCIA DE ARRANQUE////////////////////////////////

printf(" ");
	 printf("\nSFC_STEP_OUTOFOP=%d",SFC_STEP_OUTOFOP);
       /*printf("\nSFC_STEP_OUTOFOP_T_COND_1=%d",SFC_STEP_OUTOFOP_T_COND_1);
       printf("\nSFC_STEP_WW_ENBL_TRIGGER=%d",SFC_STEP_WW_ENBL_TRIGGER);
       printf("\nSFC_STEP_WW_ENBL_RST=%d",SFC_STEP_WW_ENBL_RST);
       printf("\nout_SFC_STEP_NOTOFFLINE=%d",out_SFC_STEP_NOTOFFLINE[1]);
       printf("\nNout_SFC_STEP_NOTOFFLINE=%d",Nout_SFC_STEP_NOTOFFLINE[1]);
       printf("\nSFC_STEP_OUTOFOP_T_COND_2=%d",SFC_STEP_OUTOFOP_T_COND_2);
       printf("\nSFC_STEP_HCSEL_NOSD=%d",SFC_STEP_HCSEL_NOSD);
       printf("\nSFC_STEP_OUTOFOP_T_COND_3=%d",SFC_STEP_OUTOFOP_T_COND_3);
       printf("\nSFC_STEP_LCSEL_NOSD=%d",SFC_STEP_LCSEL_NOSD);
       printf("\nSFC_STEP_OUTOFOP_T_COND_4=%d",SFC_STEP_OUTOFOP_T_COND_4);
       printf("\nLOC_REM_LOCAL=%d",LOC_REM_LOCAL);
       printf("\nSFC_STEP_START_OR=%d",SFC_STEP_START_OR);
       printf("\nSFC_STEP_NSEL_NOSD=%d",SFC_STEP_NSEL_NOSD);
       printf("\nSFC_STEP_OUTOFOP_T_COND_5=%d",SFC_STEP_OUTOFOP_T_COND_5);
       */printf("\nSFC_STEP_SFC_S_INIT=%d",SFC_STEP_SFC_S_INIT);
       /*printf("\nSFC_STEP_START_INIT=%d",SFC_STEP_START_INIT);
       printf("\nGLUB_HICNKACTIV=%d",GLUB_HICNKACTIV);
       printf("\nENGMODE_CRANKING=%d",ENGMODE_CRANKING);
       printf("\nSFC_STEP_STARTINITL=%d",SFC_STEP_STARTINITL);
       printf("\nout_SFC_STEP_RUN_OR_IN_1=%d",out_SFC_STEP_RUN_OR_IN_1[1]);
       printf("\nSFC_STEP_RUN_OR_IN_2=%d",SFC_STEP_RUN_OR_IN_2);
       printf("\nSFC_STEP_RUNNINGLP=%d",SFC_STEP_RUNNINGLP);
       printf("\nSFC_STEP_ST_SRNKLT=%d",SFC_STEP_ST_SRNKLT);
       printf("\nSFC_STEP_SDRESETDLY=%d",SFC_STEP_SDRESETDLY);
       printf("\nout_SFC_STEP_STRTFL_RST=%d",out_SFC_STEP_STRTFL_RST[1]);
       printf("\nSFC_STEP_LOSPD_OR=%d",SFC_STEP_LOSPD_OR);
       printf("\nSFC_STEP_TMR_RESET=%f",SFC_STEP_TMR_RESET);
       printf("\nSFC_STEP_STRTFL_RST_IN_2=%d",SFC_STEP_STRTFL_RST_IN_2);
       printf("\nSFC_STEP_ST_CRNKLT_RST=%d",SFC_STEP_ST_CRNKLT_RST);
       printf("\nout_SFC_STEP_SRTFL_DLY=%d",out_SFC_STEP_SRTFL_DLY[1]);
       printf("\nout_SFC_STEP_STR_FAIL=%d",out_SFC_STEP_STR_FAIL[1]);*/
   //VARIABLES HOJA 210
   printf("\nSFC_STEP_VENT=%d",SFC_STEP_VENT);
   printf("\nSFC_STEP_GLUB=%d",SFC_STEP_GLUB);
   printf("\nSFC_STEP_HYD_STRT=%d",SFC_STEP_HYD_STRT);
   printf("\nSFC_STEP_HI_SPDSEL1=%d",SFC_STEP_HI_SPDSEL1);
   printf("\nSFC_STEP_NGGGT1700=%d",SFC_STEP_NGGGT1700);
   printf("\nSFC_STEP_TURB_PRG=%d",SFC_STEP_TURB_PRG);
   printf("\nSFC_STEP_HI_SPDSEL2=%d",SFC_STEP_HI_SPDSEL2);
   printf("\nSFC_STEP_HI_SPDSEL3=%d",SFC_STEP_HI_SPDSEL3);
   printf("\nSFC_STEP_ATCORE=%d",SFC_STEP_ATCORE);
   printf("\nSFC_STEP_ACCTOSYNC=%d",SFC_STEP_ACCTOSYNC);
   printf("\nSFC_STEP_WARMUP=%d",SFC_STEP_WARMUP);
   printf("\nSFC_STEP_FSNL=%d",SFC_STEP_FSNL);
   printf("\nSFC_STEP_READY2SYNC=%d",SFC_STEP_READY2SYNC);
   printf("\nSFC_STEP_UNITONLINE=%d",SFC_STEP_UNITONLINE);
   printf("\nOUT_MW_ENBWTR=%d",OUT_MW_ENBWTR);
   printf("\nSFC_STEP_WATER_INJ=%d",SFC_STEP_WATER_INJ);
   //LLAMADA DE FUNCIONES PARA BLOQUES

//AQUI EMPIEZAN MIS FUNCIONES//

//FUNCIONES HOJA 209 SFC - TURBINE OPERATION SEQUENCE//

       //OR SFC_STEP SD_COND_OR
       if(FALSE_SD_COND_OR==1||SHUTDOWN_ANY_SD==1||SHUTDOWN_SDN_CORE==1){
                                                                         SFC_STEP_OUTOFOP_T_COND_1=1;
                                                                         }
                                                                         else{
                                                                              SFC_STEP_OUTOFOP_T_COND_1=0;
                                                                              }
       //AND SFC_STEP WWSEL_NOSD
       if(START_PERM_WW_PERM==1&OP_INTRFC_WW_ENABLE==1){
                                                        SFC_STEP_WW_ENBL_TRIGGER=1;
                                                        }
                                                        else{
                                                             SFC_STEP_WW_ENBL_TRIGGER=0;
                                                             }
       //OR SFC_STEP WW_DISABLE
       if(SFC_STEP_WW_ABORT==1||WTR_WASH_SOAK_DONE==1){
                                                       SFC_STEP_WW_ENBL_RST=1;
                                                       }
                                                       else{
                                                            SFC_STEP_WW_ENBL_RST=0;
                                                            }
       //LATCH SFC_STEP_WW_ENBL
       //Llamada de funcion para el flip-flop SFC_STEP_NOTOFFLINE de tipo RS
       SFC_STEP_NOTOFFLINE[1]=SFC_STEP_WW_ENBL_TRIGGER;
       SFC_STEP_NOTOFFLINE[2]=SFC_STEP_WW_ENBL_RST;
       RS(SFC_STEP_NOTOFFLINE,out_SFC_STEP_NOTOFFLINE);
       //NOT SFC_STEP NOTOFFLINE
       Nout_SFC_STEP_NOTOFFLINE[1]=NOT(out_SFC_STEP_NOTOFFLINE[1]);
       //AND SFC_STEP WW_SEL_AND
       if(out_SFC_STEP_NOTOFFLINE[1]==1&WTR_WASH_HS6505_SW==1){
                                                               SFC_STEP_OUTOFOP_T_COND_2=1;
                                                               }
                                                               else{
                                                                    SFC_STEP_OUTOFOP_T_COND_2=0;
                                                                    }
       //OR SFC_STEP HI_CNK_OR
       if(OP_INTRFC_HISPD_CRNK==1||FALSE_HI_CNK_OR==1){
                                                       SFC_STEP_HCSEL_NOSD=1;
                                                       }
                                                       else{
                                                            SFC_STEP_HCSEL_NOSD=0;
                                                            }
       //AND SFC_STEP HCSEL_NOSD
       if(START_PERM_C_READY==1&SFC_STEP_HCSEL_NOSD==1){
                                                        SFC_STEP_OUTOFOP_T_COND_3=1;
                                                        }
                                                        else{
                                                             SFC_STEP_OUTOFOP_T_COND_3=0;
                                                             }
       //OR SFC_STEP LO_CNK_OR
       if(OP_INTRFC_LO_SPDCRNK==1||FALSE_LO_CNK_OR==1){
                                                       SFC_STEP_LCSEL_NOSD=1;
                                                       }
                                                       else{
                                                            SFC_STEP_LCSEL_NOSD=0;
                                                            }
       //AND SFC_STEP LCSEL_NOSD
       if(START_PERM_C_READY==1&SFC_STEP_LCSEL_NOSD==1){
                                                        SFC_STEP_OUTOFOP_T_COND_4=1;
                                                        }
                                                        else{
                                                             SFC_STEP_OUTOFOP_T_COND_4=0;
                                                             }
       //SWITCH SFC_STEP START_SW
       if(LOC_REM_LOCAL==1){
                            SFC_STEP_START_OR=N3N41_BI_LOC_START_BI_L;
                            }
                            else{
                                 SFC_STEP_START_OR=FALSE_START_SW;
                                 }
       //OR SFC_STEP START_OR
       if(OP_INTRFC_START==1||FALSE_START_OR==1||SFC_STEP_START_OR==1){
                                                                       SFC_STEP_NSEL_NOSD=1;
                                                                       }
                                                                       else{
                                                                            SFC_STEP_NSEL_NOSD=0;
                                                                            }
       //AND SFC_STEP NSEL_NOSD
       if(START_PERM_T_READY==1&SFC_STEP_NSEL_NOSD==1){
                                                       SFC_STEP_OUTOFOP_T_COND_5=1;
                                                       }
                                                       else{
                                                            SFC_STEP_OUTOFOP_T_COND_5=0;
                                                            }
       //GRAFCET
       //ETAPA1 OUT OF OPERATION
       if(SFC_STEP_LOCRANK_4_TRAN_2==1&SFC_STEP_HICRANK_4_TRAN_2==1&SFC_STEP_ESN_TRAN_1==1&SFC_STEP_HOLD_OFF_TRAN_1==1){
                                                                                                                        SFC_STEP_OUTOFOP=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                        }
                                                                                                                        //if(SFC_STEP_SFC_S_INIT==1){
                                                                                                                                                   //SFC_STEP_OUTOFOP=1;
                                                                                                                                                   //}
       //ETAPA2 SET START INIT BIT
       if(SFC_STEP_OUTOFOP==1&SFC_STEP_OUTOFOP_T_COND_1==1&SFC_STEP_OUTOFOP_T_COND_2==1&SFC_STEP_OUTOFOP_T_COND_3==1&SFC_STEP_OUTOFOP_T_COND_4==1&SFC_STEP_OUTOFOP_T_COND_5==1){
                                                                                                                                                                                  SFC_STEP_SFC_S_INIT=1; //LA ETAPA TIENE VARIAS SALIDAS SE USO UNA DE ELLAS COMO VARIABLE
                                                                                                                                                                                  //SFC_STEP_START_INIT=1; //ULTIMA TRANSICION
                                                                                                                                                                                  //SFC_STEP_OUTOFOP=0;                                                                                                                                                                                                                                              
                                                                                                                                                                                  }
                                                                                                                                                                                  /*else{
                                                                                                                                                                                       SFC_STEP_SFC_S_INIT=0;
                                                                                                                                                                                       SFC_STEP_START_INIT=0;
                                                                                                                                                                                       }*/ //AQUI SOLO FALTA PONER QUE ES LO QUE VA A RESETEAR LA ETAPA 2
       //OR SFC_STEP HICNKACTIV
       if(SFC_STEP_HICRANK_1_SFC_STEP==1||SFC_STEP_HICRANK_2_SFC_STEP==1||SFC_STEP_HICRANK_3_SFC_STEP==1||SFC_STEP_HICRANK_4_SFC_STEP==1){
                                                                                                                                          GLUB_HICNKACTIV=1;
                                                                                                                                          }
                                                                                                                                          else{
                                                                                                                                               GLUB_HICNKACTIV=0;
                                                                                                                                               }
       //OR SFC_STEP LOSPD_OR
       if(SFC_STEP_LOCRANK_1_SFC_STEP==1||SFC_STEP_LOCRANK_2_SFC_STEP==1||SFC_STEP_LOCRANK_3_SFC_STEP==1||SFC_STEP_LOCRANK_4_SFC_STEP==1){
                                                                                                                                          ENGMODE_CRANKING=1;
                                                                                                                                          }
                                                                                                                                          else{
                                                                                                                                               ENGMODE_CRANKING=0;
                                                                                                                                               }
       //OR SFC_STEP CLRINIT
       if(SPEED_SW_N25GT4600==1||SHUTDOWN_ANY_SD==1||SHUTDOWN_FOURHRLOK==1){
                                                                            SFC_STEP_STARTINITL=1;
                                                                            }
                                                                            else{
                                                                                 SFC_STEP_STARTINITL=0;
                                                                                 }
       //LATCH SFC_STEP STARTINITL
       //Llamada de funcion para el flip-flop SFC_STEP_RUN_OR_IN_1 de tipo RS
       SFC_STEP_RUN_OR_IN_1[1]=SFC_STEP_SFC_S_INIT;
       SFC_STEP_RUN_OR_IN_1[2]=SFC_STEP_STARTINITL;
       RS(SFC_STEP_RUN_OR_IN_1,out_SFC_STEP_RUN_OR_IN_1);
       //ZMINUS1_B SFC_STEP STARTINILP
	   //Llamada de funcion para el timer SFC_STEP_STARTINILP de tipo TOND
       SFC_STEP_STARTINILP=out_SFC_STEP_RUN_OR_IN_1[1];
       TOND(SFC_STEP_STARTINILP,TP_SFC_STEP_STARTINILP,Time_factor,out_SFC_STEP_STARTINILP);
       printf("\nout_SFC_STEP_STARTINILP %d",out_SFC_STEP_STARTINILP[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

       
       //AND SFC_STEP RUN_AND
       if(CORE_DIGITAL_FUELON==1&SPEED_SW_N25GT4600==1){
                                                        SFC_STEP_RUN_OR_IN_2=1;
                                                        }
                                                        else{
                                                             SFC_STEP_RUN_OR_IN_2=0;
                                                             }
       //OR SFC_STEP RUN_OR
       if(SFC_STEP_RUN_OR_IN_1[1]==1||SFC_STEP_RUN_OR_IN_2==1){
                                                               SFC_STEP_RUNNINGLP=1;
                                                               }
                                                               else{
                                                                    SFC_STEP_RUNNINGLP=0;
                                                                    }
       //ZMINUS1_B SFC_STEP RUNNINGLP 
       //Llamada de funcion para el timer Z_MINUS_RUNNINGLP de tipo TOND
       Z_MINUS_RUNNINGLP=SFC_STEP_RUNNINGLP;
       TOND(Z_MINUS_RUNNINGLP,TP_Z_MINUS_RUNNINGLP,Time_factor,out_Z_MINUS_RUNNINGLP);
       printf("\nout_Z_MINUS_RUNNINGLP %d",out_Z_MINUS_RUNNINGLP[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

       
       //ZMINUS1_B SFC_STEP SD_Z 
	   //Llamada de funcion para el timer SFC_STEP_SDRESETDLY de tipo TOND
       SFC_STEP_SDRESETDLY=out_Z_MINUS_RUNNINGLP[1];
       TOND(SFC_STEP_SDRESETDLY,TP_SFC_STEP_SDRESETDLY,Time_factor,out_SFC_STEP_SDRESETDLY);
       printf("\nout_SFC_STEP_SDRESETDLY %d",out_SFC_STEP_SDRESETDLY[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

       
       //OR SFC_STEP SRTR_CRNK
       if(SFC_STEP_OUTOFOP_TRAN_2==1||SFC_STEP_OUTOFOP_TRAN_3==1||SFC_STEP_OUTOFOP_TRAN_4==1||SFC_STEP_OUTOFOP_TRAN_5==1){
                                                                                                                          SFC_STEP_ST_SRNKLT=1;
                                                                                                                          }
                                                                                                                          else{
                                                                                                                               SFC_STEP_ST_SRNKLT=0;
                                                                                                                               }
       //DELAY SFC_STEP SDRESETDLY
       //Llamada de funcion para el timer SFC_STEP_STRTFL_RST de tipo TOND
       SFC_STEP_STRTFL_RST=SFC_STEP_SDRESETDLY;
       TOND(SFC_STEP_STRTFL_RST,TP_SFC_STEP_STRTFL_RST,Time_factor,out_SFC_STEP_STRTFL_RST);
       //SWITCH SFC_STEP SP_SW
       if(SFC_STEP_LOSPD_OR==1){
                                SFC_STEP_TMR_RESET=1000.0;
                                }
                                else{
                                     SFC_STEP_TMR_RESET=1700.0;
                                     }
       //A_COMPARE SFC_STEP TMR_RESET (HYST=0.0)
       //CONDICION_1
       if(CORE_ANALOG_N25SEL>=SFC_STEP_TMR_RESET){
                                                  SFC_STEP_STRTFL_RST_IN_2=1;
                                                  }
                                                  if(CORE_ANALOG_N25SEL<SFC_STEP_TMR_RESET){
                                                                                            SFC_STEP_STRTFL_RST_IN_2=0;
                                                                                            }
      //CONDICION_2
      /*if(SFC_STEP_TMR_RESET>CORE_ANALOG_N25SEL){
                                                  SFC_STEP_STRTFL_RST_IN_2=0;
                                                  }
                                                  if(SFC_STEP_TMR_RESET<CORE_ANALOG_N25SEL){
                                                                                            SFC_STEP_STRTFL_RST_IN_2=1;
                                                                                            }*/
      //OR SFC_STEP STRTFL_RST
      if(out_SFC_STEP_STRTFL_RST[1]==1||SFC_STEP_STRTFL_RST_IN_2==1){
                                                                     SFC_STEP_ST_CRNKLT_RST=1;
                                                                     }
                                                                     else{
                                                                          SFC_STEP_ST_CRNKLT_RST=0;
                                                                          }
      //LATCH SFC_STEP ST_CRNKLT
      //Llamada de funcion para el flip-flop SFC_STEP_SRTFL_DLY de tipo RS
      SFC_STEP_SRTFL_DLY[1]=SFC_STEP_ST_SRNKLT;
      SFC_STEP_SRTFL_DLY[2]=SFC_STEP_ST_CRNKLT_RST;
      RS(SFC_STEP_SRTFL_DLY,out_SFC_STEP_SRTFL_DLY);
      //DELAY SFC_STEP SRTFL_DLY
      //Llamada de funcion para el timer SFC_STEP_STR_FAIL de tipo TOND
      //A EFECTO DE PRUEBAS SE USARA TIMERS_SYS_TIMER=5 SEGUNDOS
      SFC_STEP_STR_FAIL=out_SFC_STEP_SRTFL_DLY[1];
      TOND(SFC_STEP_STR_FAIL,TP_SFC_STEP_STR_FAIL,Time_factor,out_SFC_STEP_STR_FAIL);

      
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//VARIABLES DE SALIDA SHEET 210
if(SFC_STEP_SFC_S_INIT==1)
{
 SFC_STEP_VENT=1;
}/*else{
      if(SFC_STEP_GLUB==1){
                           SFC_STEP_VENT=0;
                           }
      }*/                     
if(SFC_STEP_VENT==1&SHUTDOWN_ANY_SD==1&VENT_PRG_FAIL==1&VENT_PRG_DN==1)
{
 SFC_STEP_GLUB=1;
}/*else{
      if(SFC_STEP_HYD_STRT==1){
                               SFC_STEP_GLUB=0;
                               }
      } */     
if(GLUB_AC60VERLTC==1&GLUB_JCKPMP_ON==1)
{
 OUT_ACVER_JACK=1;
}else{
      OUT_ACVER_JACK=0;
      }
if(SFC_STEP_GLUB==1&SHUTDOWN_ANY_SD==1&GLUB_ABORT==1&OUT_ACVER_JACK==1)
{
 SFC_STEP_HYD_STRT=1;
}/*else{
      if(SFC_STEP_HI_SPDSEL1==1){
                                 SFC_STEP_HYD_STRT=0;
                                 }
      }*/
if(HYD_STRT_CNK_SEQPRM==1||SHUTDOWN_ANY_SD==1)
{
 OUT_SD_STPCNK1=1;
}else{
      OUT_SD_STPCNK1=0;
      }
if(SFC_STEP_HYD_STRT==1&OUT_SD_STPCNK1==1&HYD_STRT_PUMPONDLY==1)
{
 SFC_STEP_HI_SPDSEL1=1;
}/*else{
      if(SFC_STEP_NGGGT1700==1){
                                SFC_STEP_HI_SPDSEL1=0;
                                }
      }*/
if(SFC_STEP_HI_SPDSEL1==1&SHUTDOWN_ANY_SD==1&HYD_STRT_SOV1619RMP==1)
{
 SFC_STEP_NGGGT1700=1;
}/*else{
      if(SFC_STEP_TURB_PRG==1){
                               SFC_STEP_NGGGT1700=0;
                               }
      }*/
if(SFC_STEP_NGGGT1700==1&SHUTDOWN_ANY_SD==1&SPEED_SW_N25GT1700==1)
{
 SFC_STEP_TURB_PRG=1;
}/*else{
      if(SFC_STEP_HI_SPDSEL2==1){
                               SFC_STEP_TURB_PRG=0;
                               }
      }*/
if(SFC_STEP_TURB_PRG==1&SHUTDOWN_ANY_SD==1&FUEL_SYS_PRGDN==1&SFC_STEP_MOTOR_6==1)
{
 SFC_STEP_HI_SPDSEL2=1;
}/*else{
      if(SFC_STEP_HI_SPDSEL3==1){
                               SFC_STEP_HI_SPDSEL2=0;
                               }
      }*/
if(SFC_STEP_HI_SPDSEL2==1&SFC_STEP_STPMOTOR==1&SFC_STEP_SD_EXCPTNM==1&CORE_DIGITAL_LITEOFF==1)
{
 SFC_STEP_HI_SPDSEL3=1;
}/*else{
      if(SFC_STEP_ATCORE==1){
                               SFC_STEP_HI_SPDSEL3=0;
                               }
      }*/
if(SFC_STEP_HI_SPDSEL3==1&SHUTDOWN_SDN_CORE==1&SFC_STEP_SD_EXCPTNM==1&SPEED_SW_N25GT4600==1)
{
 SFC_STEP_ATCORE=1;
}/*else{
      if(SFC_STEP_ACCTOSYNC==1){
                               SFC_STEP_ATCORE=0;
                               }
      }*/
if(SPEED_SW_NSDGT1250==1&SHUTDOWN_COREREACHD==1&TLO_TLUB_GT90==1)
{
 OUT_CORE_1250=1;
}else{
      OUT_CORE_1250=0; 
      }                                                                
if(SFC_STEP_ATCORE==1&SHUTDOWN_SDN_CORE==1&SFC_STEP_SD_EXCPTNM==1&OUT_CORE_1250==1&SFC_STEP_STRT_AGAIN==1)
{
 SFC_STEP_ACCTOSYNC=1;
}/*else{
      if(SFC_STEP_WARMUP==1){
                               SFC_STEP_ACCTOSYNC=0;
                               }
      }*/
if(SFC_STEP_ACCTOSYNC==1&SHUTDOWN_SDN_CORE==1&SHUTDOWN_SD_CORE==1&SHUTDOWN_STEPIDLE==1&SHUTDOWN_CDLO==1&SPEED_SW_NSDGT3590==1)
{
 SFC_STEP_WARMUP=1;
}/*else{
      if(SFC_STEP_FSNL==1){
                               SFC_STEP_WARMUP=0;
                               }
      }*/
if(SFC_STEP_WARMUP_TRAN_5==1&SFC_STEP_UNITONLINE_TRAN_6==1&SFC_STEP_WATER_INJ_TRAN_7==1&SFC_STEP_READY2SYNC_TRAN_5==1)
{
 SFC_STEP_FSNL=1;
}/*else{
      if(SFC_STEP_FSNL==1){
                               SFC_STEP_WARMUP=0;
                               }
      }*/
if(SFC_STEP_FSNL==1&SHUTDOWN_SDN_CORE==1&SHUTDOWN_SD_CORE==1&SHUTDOWN_STEPIDLE==1&SHUTDOWN_CDLO==1&GENERATOR_GEN_BKRCLS==1&XN25_REF_XN25MAXPOS==1)
{
 SFC_STEP_READY2SYNC=1;
}/*else{
      if(SFC_STEP_FSNL==1){
                               SFC_STEP_WARMUP=0;
                               }
      }*/
if(SFC_STEP_NORM_1_TRAN_4==1&SFC_STEP_FSNL_TRAN_5==1&SFC_STEP_WATER_INJ_TRAN_6==1)
{
 SFC_STEP_UNITONLINE=1;
}/*else{
      if(SFC_STEP_FSNL==1){
                               SFC_STEP_WARMUP=0;
                               }
      }*/
if(CORE_ANALOG_MWSEL>2.0)
{
 OUT_MW_ENBWTR=1;
}else{
       OUT_MW_ENBWTR=0;
       }  
if(FALSE_MASK_WI==1&SFC_TIMER_WARMUP_DN==1&OUT_MW_ENBWTR==1)
{
 OUT_MASK_WI=1;
}else{
      OUT_MASK_WI=0;
      }
if(SFC_STEP_UNITONLINE==1&SHUTDOWN_SDN_CORE==1&SHUTDOWN_SD_CORE==1&SHUTDOWN_STEPIDLE==1&GENERATOR_NS_DROOP==1&GENERATOR_NS_ISOCH==1&GENERATOR_GEN_BKROPN==1&OUT_MASK_WI==1)
{
 SFC_STEP_WATER_INJ=1;
}/*else{
      if(SFC_STEP_FSNL==1){
                               SFC_STEP_WARMUP=0;
                               }
      }*/
 printf(" ");

////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////SECUENCIA DE PARO NORMAL///////////////////////////////

 printf(" ");

	//Funcion para imprimir
     
printf("\n AND_SFC_STEP_NORM_1_SFC_STEP %d", AND_SFC_STEP_NORM_1_SFC_STEP);
printf("\n OUT_RAMP_TO_NPT_MIN_LOAD %d",OUT_RAMP_TO_NPT_MIN_LOAD);
printf("\n RAMP_TO_NPT_MIN_LOAD %d",RAMP_TO_NPT_MIN_LOAD);  
printf("\n OUT_DEACTIVE_WATER_SYSTEM %d",OUT_DEACTIVE_WATER_SYSTEM);    
printf("\n DEACTIVE_WATER_SYSTEM %d",DEACTIVE_WATER_SYSTEM);    
printf("\n OUT_OPEN_BREAKERS %d",OUT_OPEN_BREAKERS);   
printf("\n OPEN_BREAKERS %d",OUT_OPEN_BREAKERS);   

printf("\n OUT_SYNC_COOLDOWN_TIMER_ACTIVE %d", OUT_SYNC_COOLDOWN_TIMER_ACTIVE);
printf("\n SYNC_COOLDOWN_TIMER_ACTIVE %d",SYNC_COOLDOWN_TIMER_ACTIVE);
printf("\n OUT_CORE_COOLDOWN_TIMER_ACTIVE %d",OUT_CORE_COOLDOWN_TIMER_ACTIVE);  
printf("\n CORE_COOLDOWN_TIMER_ACTIVE %d",CORE_COOLDOWN_TIMER_ACTIVE);    
printf("\n SFC_STEP_RST_AND_ST %d",SFC_STEP_RST_AND_ST);    
printf("\n ENGMODE_CRANKING_IN_1 %d",ENGMODE_CRANKING_IN_1);   
printf("\n SFC_STEP_ATCORE_T_COND_2 %d",SFC_STEP_ATCORE_T_COND_2);   

printf("\n SFC_STEP_NORM_3_SF_SEL_2 %d", SFC_STEP_NORM_3_SF_SEL_2);
printf("\n SFC_STEP_CNK_STPOR2_IN_2 %d",SFC_STEP_CNK_STPOR2_IN_2);
printf("\n SFC_STEP_RST_START_IN_2%d",SFC_STEP_RST_START_IN_2);  

printf("\n SFC_STEP_NSTOESTMR_TRIGGER %d",SFC_STEP_NSTOESTMR_TRIGGER);    

   
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

//LLAMADA DE FUNCIONES PARA BLOQUES


//declaracion de variables pag_286

//SPRINT_SPRNTOFFOR

if(SFC_STEP_WATER_INJ==1&&SFC_STEP_UNITONLINE==1)
{
AND_SFC_STEP_NORM_1_SFC_STEP=1;
}
else
{ 
AND_SFC_STEP_NORM_1_SFC_STEP=0;
}

//EVACUATE_LP_SPRINT_MANIFOLD
if(CORE_COOLDOWN_TIMER_ACTIVE==0)
{
	if(AND_SFC_STEP_NORM_1_SFC_STEP==1)
	{
	OUT_RAMP_TO_NPT_MIN_LOAD=1;
	}
	else 
	{
		OUT_RAMP_TO_NPT_MIN_LOAD=0;
	}
}
 
if(OUT_RAMP_TO_NPT_MIN_LOAD==1)
{
	RAMP_TO_NPT_MIN_LOAD=1;      
}
else if(OUT_DEACTIVE_WATER_SYSTEM==1)
{
	RAMP_TO_NPT_MIN_LOAD=0;      
}
//WAIT_FOR_XFER_DONE_BEFORE_PURGE
if(RAMP_TO_NPT_MIN_LOAD==1)
{
	if(SHUTDOWN_SDN_CORE==1&&SHUTDOWN_SD_CORE==1&&SHUTDOWN_STEPIDLE==1&&SFC_STEP_RST_AND_ST==1&&OUT_AND_SFC_STEP_RDYTOOPN==1&&SFC_STEP_WATER_INJ==1&&SFC_STEP_UNITONLINE==1)
	{
		OUT_DEACTIVE_WATER_SYSTEM=1;
	}
else 
{
OUT_DEACTIVE_WATER_SYSTEM=0;
}
}
if(OUT_DEACTIVE_WATER_SYSTEM==1)
 {
                               DEACTIVE_WATER_SYSTEM=1;      
                                     }
                                     
else if(OUT_OPEN_BREAKERS==1)
{
	DEACTIVE_WATER_SYSTEM=0;      
}                                    
                                     
//PURGE_LP_SPRINT_MANIFOLD
if(DEACTIVE_WATER_SYSTEM==1)
{
if(SHUTDOWN_SDN_CORE==1&&SHUTDOWN_SD_CORE==1&&SHUTDOWN_STEPIDLE==1&&SFC_STEP_NS_OR==1&&TRUE_SFC_STEP_NORM_3==1&&SFC_STEP_RST_AND_ST==1)
{
OUT_OPEN_BREAKERS=1;
}
else 
{
OUT_OPEN_BREAKERS=0;
}
}   
if(OUT_OPEN_BREAKERS==1)
 {
                               OPEN_BREAKERS=1;      
                                     } 
else if(OUT_SYNC_COOLDOWN_TIMER_ACTIVE==1)
 {
                               OPEN_BREAKERS=0;      
                                     }                                     
                                     
                                        
//PURGE_FROM_SUPPLY_TO_THE_DRAINS

if(OPEN_BREAKERS==1)
{
if(SHUTDOWN_SDN_CORE==1&&SHUTDOWN_SD_CORE==1&&SHUTDOWN_STEPIDLE==1&&SFC_STEP_RST_AND_ST==1&&AND_SFC_STEP_NORM_4==1)
{
OUT_SYNC_COOLDOWN_TIMER_ACTIVE=1;
}
else 
{
OUT_SYNC_COOLDOWN_TIMER_ACTIVE=0;
}
}
if(OUT_SYNC_COOLDOWN_TIMER_ACTIVE==1)
 {
                               SYNC_COOLDOWN_TIMER_ACTIVE=1;      
                                     } 
else if(OUT_CORE_COOLDOWN_TIMER_ACTIVE==1)
 {
                               SYNC_COOLDOWN_TIMER_ACTIVE=0;      
                                     }                                     
//PURGE_HP_SPRINT_MANIFOLD
if(SYNC_COOLDOWN_TIMER_ACTIVE==1)
{
if(SHUTDOWN_SDN_CORE==1&&SHUTDOWN_SD_CORE==1&&SHUTDOWN_STEPIDLE==1&&SFC_STEP_RST_AND_ST==1&&SFC_STEP_SYNC_COOL==1)
{
OUT_CORE_COOLDOWN_TIMER_ACTIVE=1;
}
else 
{
OUT_CORE_COOLDOWN_TIMER_ACTIVE=0;
}
}
if(OUT_CORE_COOLDOWN_TIMER_ACTIVE==1)
 {
                               CORE_COOLDOWN_TIMER_ACTIVE=1;      
                                     } 
else if(SHUTDOWN_SDN_CORE==1&&SHUTDOWN_SD_CORE==1&&SHUTDOWN_STEPIDLE==1&&SFC_STEP_RST_AND_ST==1&&SHUTDOWN_CHOP_FUEL==1)
 {
                               CORE_COOLDOWN_TIMER_ACTIVE=0;           
                                 OUT_CORE_COOLDOWN_TIMER_ACTIVE=0;
                                    OUT_SYNC_COOLDOWN_TIMER_ACTIVE=0; 
                                     OUT_OPEN_BREAKERS=0;
                                     OUT_DEACTIVE_WATER_SYSTEM=0;
                                    OUT_RAMP_TO_NPT_MIN_LOAD=0; 
                                     
                                     } 



//WAIT_UNTIL_N25_LT_4600
if(HOLD_UNTIL_PURGE_DONE==0)
{
if(SFC_STEP_NORM_5==1&&SFC_STEP_STI_3==1&&SFC_STEP_ES_2==1)
{
OUT_WAIT_UNTIL_N25_LT_4600=1;
}
else 
{
OUT_WAIT_UNTIL_N25_LT_4600=0;
}
}
 
if(OUT_WAIT_UNTIL_N25_LT_4600==1)
 {
                               WAIT_UNTIL_N25_LT_4600=1;      
                                     }
if(OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP==1)
 {
                               WAIT_UNTIL_N25_LT_4600=0;      
                                     }
                                     
                                 
//ACTIVATE_HYDRAULIC_STARTER_PUMP
if(WAIT_UNTIL_N25_LT_4600==1)
{
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&SPEED_SW_N25LT4600==1)
{
OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP=1;
}
else 
{
OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP=0;
}
}
if(OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP==1)
 {
                               ACTIVATE_HYDRAULIC_STARTER_PUMP=1;      
                                     }
                                     
 if(OUT_HIGH_SPEED_SELECT==1)
 {
                               ACTIVATE_HYDRAULIC_STARTER_PUMP=0;      
                                     }                                    


                                
//HIGH_SPEED_SELECT
if(ACTIVATE_HYDRAULIC_STARTER_PUMP==1)
{
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&SFC_STEP_FUELOFF==1&&AND_SFC_STEP_MOTOR_3==1)
{
OUT_HIGH_SPEED_SELECT=1;
}
else 
{
OUT_HIGH_SPEED_SELECT=0;
}
}   
if(OUT_HIGH_SPEED_SELECT==1)
 {
                               HIGH_SPEED_SELECT=1;      
                                     } 
 if(OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700==1)
 {
                               HIGH_SPEED_SELECT=0;      
                                     }                                     
                                     

                                     
//WAIT_FOR_SPEED_TO_GO_ABOVE_1700

if(HIGH_SPEED_SELECT==1)
{
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&HYD_STRT_SOV1619RMP==1)
{
OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700=1;
}
else 
{
OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700=0;
}
}
if(OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700==1)
 {
                               WAIT_FOR_SPEED_TO_GO_ABOVE_1700=1;      
                                     } 
 if(OUT_START_COOLDOWN_CRANK_TIMER==1)
 {
                               WAIT_FOR_SPEED_TO_GO_ABOVE_1700=0;      
                                     }     
         
                                                                     
//PURGE_HP_SPRINT_MANIFOLD
if(WAIT_FOR_SPEED_TO_GO_ABOVE_1700==1)
{
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&SPEED_SW_N25GT1700==1&&SFC_STEP_MOTOR_6==1)
{
OUT_START_COOLDOWN_CRANK_TIMER=1;
}
else 
{
OUT_START_COOLDOWN_CRANK_TIMER=0;
}
}
if(OUT_START_COOLDOWN_CRANK_TIMER==1)
 {
                               START_COOLDOWN_CRANK_TIMER=1;      
                                     } 
if(OUT_HOLD_UNTIL_PURGE_DONE==1)
 {
                               START_COOLDOWN_CRANK_TIMER=0;               
                                     } 
                                                                   
                                     
                                     
//HOLD_UNTIL_PURGE_DONE
if(START_COOLDOWN_CRANK_TIMER==1)
{
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&SFC_TIMER_CDC_DN==1&&LATCH_SFC_STEP_MOTOR_5==1)
{
OUT_HOLD_UNTIL_PURGE_DONE=1;
}
else 
{
OUT_HOLD_UNTIL_PURGE_DONE=0;
}
}
if(OUT_HOLD_UNTIL_PURGE_DONE==1)
 {
                               HOLD_UNTIL_PURGE_DONE=1;      
                                     } 
if(SFC_STEP_STPMOTOR==1&&SHUTDOWN_SISDESN==1&&FUEL_SYS_PRGDN==1&&SFC_STEP_ANY_SD_OR==1)
 {
                               HOLD_UNTIL_PURGE_DONE=0; 
                               OUT_WAIT_UNTIL_N25_LT_4600=0;
                               OUT_ACTIVATE_HYDRAULIC_STARTER_PUMP=0;
                               OUT_HIGH_SPEED_SELECT=0;
                                OUT_WAIT_FOR_SPEED_TO_GO_ABOVE_1700=0;  
                                OUT_START_COOLDOWN_CRANK_TIMER=0;
                                  OUT_HOLD_UNTIL_PURGE_DONE=0;         
                                     } 

//AND_

if(SFC_STEP_STAR_OR==1&&SHUTDOWN_NO_SHTDNS==1&&GLUB_DC_OFF==1)
{
SFC_STEP_RST_AND_ST=1;
}
else 
{
SFC_STEP_RST_AND_ST=0;
}
if(SFC_STEP_RST_AND_ST==1&&SFC_STEP_MTR_OR==1)
{
SFC_STEP_RESET_STRT_TRIGGER=1;
}
else 
{
SFC_STEP_RESET_STRT_TRIGGER=0;
}
//
if(FALSE_SFC_STEP_HISPD_OR==1||SFC_STEP_HICRANK_3==1||SFC_STEP_HICRANK_4==1||SFC_STEP_MOTOR_1==1||SFC_STEP_MOTOR_2==1||SFC_STEP_MOTOR_3==1||SFC_STEP_MOTOR_4==1||SFC_STEP_MOTOR_5==1)
{
ENGMODE_CRANKING_IN_1=1;
}
else 
{
ENGMODE_CRANKING_IN_1=0;
}
//
if(SFC_STEP_STI_2==1||SFC_STEP_NORM_2==1||SFC_STEP_NORM_3==1||SFC_STEP_NORM_4==1||SFC_STEP_NORM_5==1)
{
SFC_STEP_ACCTOSYNC_SF_SEL_2=1;
}
else 
{
SFC_STEP_ACCTOSYNC_SF_SEL_2=0;
}
//

if(SHUTDOWN_STEPIDLE==1||SHUTDOWN_CDLO==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_DM==1)
{
SFC_STEP_ATCORE_T_COND_2=1;
}
else 
{
SFC_STEP_ATCORE_T_COND_2=0;
}

//
if(SFC_STEP_ACCTOSYNC==1||SFC_STEP_WARMUP==1||FALSE_SFC_STEP_NS_OR==1||SFC_STEP_FSNL==1||SFC_STEP_READY2SYNC==1)
{
SFC_STEP_NORM_3_SF_SEL_2=1;
}
else 
{
SFC_STEP_NORM_3_SF_SEL_2=0;
}

//

if(SFC_STEP_MOTOR_1==1||SFC_STEP_MOTOR_2==1||SFC_STEP_MOTOR_3==1||SFC_STEP_MOTOR_4==1||SFC_STEP_MOTOR_5==1||SFC_STEP_MOTOR_6==1||SFC_STEP_MOTOR_5_TRAN_3==1)
{
SFC_STEP_CNK_STPOR2_IN_2=1;
}
else 
{
SFC_STEP_CNK_STPOR2_IN_2=0;
}

//

if(SFC_STEP_MOTOR_1_SFC_STEP==1&&SFC_STEP_MOTOR_2_SFC_STEP==1&&SFC_STEP_MOTOR_3_SFC_STEP==1&&SFC_STEP_MOTOR_4_SFC_STEP==1&&SFC_STEP_MOTOR_5_SFC_STEP==1)
{
SFC_STEP_RST_START_IN_2=1;
}
else 
{
SFC_STEP_RST_START_IN_2=0;
}
//

if(SHUTDOWN_SDN_CORE==1||SHUTDOWN_FOURHRLOK==1)
{
SFC_STEP_FUELOFF_T_COND_1=1;
}
else 
{
SFC_STEP_FUELOFF_T_COND_1=0;
}

//
if(SHUTDOWN_CDLO==1||SHUTDOWN_DECELMIN==1||SHUTDOWN_SD_CORE==1||SHUTDOWN_STEPIDLE==1)
{
SFC_STEP_MOTOR_6_T_COND_4=1;
}
else 
{
SFC_STEP_MOTOR_6_T_COND_4=0;
}

//
if(SFC_STEP_BKRS_OPN==1||SHUTDOWN_SDN_CORE==1||SHUTDOWN_STEPIDLE==1||SFC_STEP_RST_AND_ST==1)
{
SFC_STEP_ST_NS_TMR_RST=1;
}
else 
{
SFC_STEP_ST_NS_TMR_RST=0;
}

//LATCH

 if(SFC_STEP_NORM_1==1)
    {
SFC_STEP_NSTOESTMR_TRIGGER=1;
 }
 
 if  (SFC_STEP_ST_NS_TMR_RST==1)
 {
      SFC_STEP_NSTOESTMR_TRIGGER=0;   
         }
         
//Llamada de funcion para el timer SHUTDOWN_SI_IN_1 de tipo TOND
SHUTDOWN_SI_IN_1=SFC_STEP_NSTOESTMR_TRIGGER;
   TOND(SHUTDOWN_SI_IN_1,TP_SHUTDOWN_SI_IN_1,Time_factor,out_SHUTDOWN_SI_IN_1);
   printf("\nout_SHUTDOWN_SI_IN_1 %d",out_SHUTDOWN_SI_IN_1[1]);
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//Llamada de funcion para el timer SFC_STEP_SYNC_COOL de tipo TOND
SFC_STEP_SYNC_COOL=SFC_STEP_NORM_4;
   TOND(SFC_STEP_SYNC_COOL,TP_SFC_STEP_SYNC_COOL,Time_factor,out_SFC_STEP_SYNC_COOL);
   printf("\nout_SFC_STEP_SYNC_COOL %d",out_SFC_STEP_SYNC_COOL[1]);

////////////////////////////////////////////////////////////////////////////////////																		
}
if (pars==1){
int p=5/((int)sqrt(1.0f)-1);
}
return 1;

}
